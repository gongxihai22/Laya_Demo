var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MtGameConfig_1 = require("./MtGameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(MtGameConfig_1.default.width, MtGameConfig_1.default.height);
        else
            Laya.init(MtGameConfig_1.default.width, MtGameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = MtGameConfig_1.default.scaleMode;
        Laya.stage.screenMode = MtGameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = MtGameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (MtGameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (MtGameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (MtGameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        MtGameConfig_1.default.startScene && Laya.Scene.open(MtGameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./MtGameConfig":2}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/GameUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "full";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "portal/Loading.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/GameUI":18}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ResManager_1 = require("../Resource/ResManager");
var GameManager_1 = require("../GameManager");
var Common_1 = require("../Common/Common");
var NameConfig_1 = require("../Configure/NameConfig");
var EventManager_1 = require("../Events/EventManager");
var Events_1 = require("../Events/Events");
var LabelUpdate_1 = require("../Component/LabelUpdate");
/**
 * BIM管理类，用于加载、初始化模型；模型打包格式为.lh文件，以层为单位
 *
 */
var BIMManager = /** @class */ (function () {
    function BIMManager() {
        this.m_3dlabelDisappearDistance = 80;
        this.m_3dlabelTotalDisappearDistance = 180;
        this.m_2dlabelDisappearDistance = 100;
        this.m_2dlabelTotalDisappearDistance = 180;
        this.m_defaultFloorColor = "#DC143C";
        /**
         * ************************************************暂时先将设置颜色的方法放到BIM内********************************
         */
        /**
        * 记录设置颜色后的材质球；
        */
        this.MaterialsDic = new Laya.WeakObject();
        this.m_spaceDic = new Laya.WeakObject();
        this.m_levelSpsceDic = new Laya.WeakObject();
        this.m_levelRes = new Laya.WeakObject();
        this.Levels = new Array();
        this.AddEvents();
    }
    BIMManager.prototype.AddEvents = function () {
        EventManager_1.default.Instance().AddEventListener(Events_1.Events.OnCameraDistanceChanged.toString(), this, this.ShowHideTagsByDistance);
        EventManager_1.default.Instance().AddEventListener(Events_1.Events.OnDepTreeItemClicked.toString(), this, this.SetOneLevelFloorColor);
    };
    /**
     * 加载所有楼层资源，并初始化楼板，默认隐藏，GameManager中开启默认层
     * 回调函数若需要执行多次，则需要将once置为false
     * @param resUrl
     * @param onComplete
     */
    BIMManager.prototype.LoadRes = function (resUrl, onComplete) {
        var _this = this;
        if (resUrl == null || resUrl.length == 0)
            return;
        var index = 0;
        ResManager_1.default.Instance().LoadPrefabAssets(resUrl, Laya.Handler.create(this, function (url, res) {
            //初始化3D场景，初始化一次
            GameManager_1.default.Instance().Init3DScene();
            //将资源加入场景
            GameManager_1.default.Instance().MainScene.addChild(res);
            //遍历所有资源
            _this.TravelMeshSprite3D(res);
            //资源默认隐藏
            res.active = false;
            //获得所有楼层
            var level = Common_1.default.ParseLoadLevel(url);
            _this.Levels.push(level);
            //记录当前楼层资源
            if (!_this.m_levelRes.has(level)) {
                _this.m_levelRes.set(level, res);
            }
            index++;
            if (index == resUrl.length) {
                //设置默认的楼层为第一个
                _this.CurrenLevel = _this.Levels[0];
                onComplete.apply();
            }
        }, null, false));
    };
    /**
     * 刷新当前显示楼层Tags的内容，通过标签类型LabelType来改变;
     * @param type 标签类型
     */
    BIMManager.prototype.RefreshLabelContent = function (type) {
        var _this = this;
        if (this.CurrenLevel == null ||
            this.m_levelSpsceDic == null ||
            this.m_spaceDic == null)
            return;
        if (this.m_levelSpsceDic.has(this.CurrenLevel)) {
            this.m_levelSpsceDic.get(this.CurrenLevel).forEach(function (element) {
                if (_this.m_spaceDic.has(element)) {
                    var floor = _this.m_spaceDic.get(element);
                    if (floor == null)
                        return;
                    switch (type) {
                        case LabelType.Depart:
                            floor.label.text = floor.Organiaztion;
                            _this.SetHexColor(floor.Object, floor.organizationColor);
                            break;
                        case LabelType.Area:
                            floor.label.text = floor.area;
                            break;
                        case LabelType.Usage:
                            floor.label.text = floor.usage;
                            _this.SetHexColor(floor.Object, floor.usageColor);
                            break;
                    }
                }
            });
        }
    };
    /**
     *
     * @param b 显示或隐藏全部楼层，显示全部楼层时，要关掉tags
     */
    BIMManager.prototype.ShowAllLevels = function (b) {
        var _this = this;
        if (this.Levels == null || this.Levels.length == 0)
            return;
        this.Levels.forEach(function (element) {
            if (b) {
                _this.ShowOneLevelFloors(element, true);
            }
            else {
                _this.HideOneLevelFloors(element);
            }
        });
    };
    /**
     * 显示隐藏楼层及楼层Tag
     * @param level 楼层
     * @param b 显/隐
     */
    BIMManager.prototype.ShowOneLevelFloors = function (level, isShowAll) {
        var _this = this;
        if (level == null)
            return;
        //开启levelRoot
        if (this.m_levelRes.has(level)) {
            var res = this.m_levelRes.get(level);
            res.active = true;
        }
        if (this.m_levelSpsceDic.has(level)) {
            this.m_levelSpsceDic.get(level).forEach(function (element) {
                if (_this.m_spaceDic.has(element)) {
                    var floorItem = _this.m_spaceDic.get(element);
                    if (floorItem != null && floorItem.label != null) {
                        if (isShowAll) {
                            floorItem.label.visible = false;
                        }
                        else {
                            floorItem.label.visible = true;
                        }
                    }
                }
            });
        }
        this.CurrenLevel = level;
    };
    BIMManager.prototype.HideOneLevelFloors = function (level) {
        var _this = this;
        if (level == null)
            return;
        //开启levelRoot
        if (this.m_levelRes.has(level)) {
            var res = this.m_levelRes.get(level);
            res.active = false;
        }
        if (this.m_levelSpsceDic.has(level)) {
            this.m_levelSpsceDic.get(level).forEach(function (element) {
                if (_this.m_spaceDic.has(element)) {
                    var floorItem = _this.m_spaceDic.get(element);
                    if (floorItem != null) {
                        if (floorItem.label != null) {
                            floorItem.label.visible = false;
                        }
                    }
                }
            });
        }
    };
    /**
     * 通过Code获取一个FloorItem
     * @param code
     */
    BIMManager.prototype.GetOneFloorItem = function (code) {
        if (code == null)
            return null;
        if (this.m_spaceDic.has(code)) {
            return this.m_spaceDic.get(code);
        }
        else {
            return null;
        }
    };
    BIMManager.prototype.GetOneFloorSprite3D = function (code) {
        if (code == null)
            return null;
        if (this.m_spaceDic.has(code)) {
            var floor = this.m_spaceDic.get(code);
            return floor.Object;
        }
        else {
            return null;
        }
    };
    BIMManager.prototype.TravelMeshSprite3D = function (parent) {
        if (parent == null)
            return;
        for (var i = 0; i < parent._children.length; i++) {
            var meshSprite3D = parent.getChildAt(i);
            if (meshSprite3D != null) {
                if (meshSprite3D.meshFilter != null
                    && meshSprite3D.parent.name == NameConfig_1.default.floor) {
                    this.InstantiateFloorItem(meshSprite3D);
                }
                else {
                    this.TravelMeshSprite3D(meshSprite3D);
                }
            }
        }
    };
    /**
     * 对象化Floor
     * @param floor
     */
    BIMManager.prototype.InstantiateFloorItem = function (floor) {
        if (floor == null)
            return;
        var meshName = floor.name;
        var data = GameManager_1.default.Instance().Data.GetOneSpaceData(meshName);
        if (data != null) {
            var floorItem = this.CreateFloorItem(floor, data);
            if (!this.m_spaceDic.has(meshName)) {
                this.m_spaceDic.set(meshName, floorItem);
            }
            //记录当前层所有的楼板
            if (!this.m_levelSpsceDic.has(data.levelCode)) {
                this.m_levelSpsceDic.set(data.levelCode, new Array());
            }
            var arr = this.m_levelSpsceDic.get(data.levelCode);
            arr.push(meshName);
        }
        else {
            console.log("DB not contain this {0} floor", meshName);
        }
    };
    BIMManager.prototype.CreateFloorItem = function (floor, data) {
        if (floor == null || data == null)
            return;
        var item = new FloorItem();
        item.Object = floor;
        item.Transform = floor.transform;
        item.Organiaztion = GameManager_1.default.Instance().Data.GetOneOrganizationName(data.organizationCode, "2");
        item.organizationColor = GameManager_1.default.Instance().Data.GetOneOrganizationColor(data.organizationCode);
        item.usage = GameManager_1.default.Instance().Data.GetOneUsageName(data.usageTypeCode);
        item.usageColor = GameManager_1.default.Instance().Data.GetOneUsageColor(data.usageTypeCode);
        item.area = data.useArea;
        //TEMP:默认显示用途
        item.label = this.CreateOneFloorTag(GameManager_1.default.Instance().Camera.Camera, floor, item.usage);
        this.SetHexColor(floor, item.usageColor);
        //默认Tag隐藏
        item.label.visible = false;
        return item;
    };
    BIMManager.prototype.CreateOneFloorTag = function (camera, floor, content) {
        var label = new Laya.Label();
        label.addComponent(LabelUpdate_1.default);
        Laya.stage.addChild(label);
        var component = label.getComponent(LabelUpdate_1.default);
        component.Init(floor, camera, content);
        return label;
    };
    /**
     * 根据摄像机的到原点的距离显示或隐藏Label
     */
    BIMManager.prototype.ShowHideTagsByDistance = function (distance) {
        var _this = this;
        var startdisappeardis = 0;
        var totaldisappeardis = 0;
        if (GameManager_1.default.Instance().Camera.Is2D) {
            startdisappeardis = this.m_2dlabelDisappearDistance;
            totaldisappeardis = this.m_2dlabelTotalDisappearDistance;
        }
        else {
            startdisappeardis = this.m_3dlabelDisappearDistance;
            totaldisappeardis = this.m_3dlabelTotalDisappearDistance;
        }
        if (distance > startdisappeardis) {
            var floors_1 = this.m_levelSpsceDic.get(this.CurrenLevel);
            var count = floors_1.length;
            var interval = (totaldisappeardis - startdisappeardis) / count;
            var pointer_1 = (distance - startdisappeardis) / interval;
            floors_1.forEach(function (element) {
                var index = floors_1.indexOf(element);
                var floor = _this.m_spaceDic.get(element);
                if (floor != null) {
                    if (index <= pointer_1) {
                        floor.label.visible = false;
                    }
                    else {
                        floor.label.visible = true;
                    }
                }
            });
        }
    };
    BIMManager.prototype.SetOneLevelFloorColor = function (orgs, b) {
        var _this = this;
        if (orgs.length == 0)
            return;
        var floors = GameManager_1.default.Instance().Data.GetOneLevelFloorsByOrgs(this.CurrenLevel, orgs);
        if (floors == null || floors.length == 0)
            return;
        floors.forEach(function (element) {
            var floor = _this.m_spaceDic.get(element);
            if (floor == null)
                return;
            if (b) {
                switch (GameManager_1.default.Instance().MainUI.CurrentLabelType) {
                    case LabelType.Depart:
                        _this.SetHexColor(floor.Object, floor.organizationColor);
                        break;
                    case LabelType.Usage:
                        _this.SetHexColor(floor.Object, floor.usageColor);
                        break;
                }
            }
            else {
                _this.SetHexColor(floor.Object, _this.m_defaultFloorColor);
            }
        });
    };
    /**
     * 设置对象颜色
     * @param target
     * @param color Laya内部的Color
     */
    BIMManager.prototype.SetLayaColor = function (target, color) {
        var _this = this;
        if (target == null || color == null)
            return;
        var mats = target.meshRenderer.materials;
        if (mats == null)
            return;
        mats.forEach(function (element) {
            _this.SetColor(element, new Laya.Vector4(color.r, color.g, color.b, color.a));
        });
    };
    /**
     * 设置对象的颜色
     * @param target 对象
     * @param hexColor 十六进制颜色
     */
    BIMManager.prototype.SetHexColor = function (target, hexColor) {
        var _this = this;
        if (target == null || hexColor == null)
            return;
        var mats = target.meshRenderer.materials;
        if (mats == null)
            return;
        var color = this.ConvertColor(hexColor);
        mats.forEach(function (element) {
            _this.SetColor(element, color);
        });
    };
    BIMManager.prototype.SetColor = function (mat, color) {
        if (mat == null || color == null)
            return;
        mat.albedoColor = color;
        if (!this.MaterialsDic.has(mat)) {
            this.MaterialsDic.set(mat, color);
        }
    };
    /**
     * 颜色转换，将hexColor转换成Vector4
     * @param hexColor
     */
    BIMManager.prototype.ConvertColor = function (hexColor) {
        try {
            var count = hexColor.length;
            var r = parseInt(hexColor.substr(0, 2), 16);
            var g = parseInt(hexColor.substr(2, 2), 16);
            var b = parseInt(hexColor.substr(4, 2), 16);
            var a = 255;
            if (count == 8)
                a = parseInt(hexColor.substr(6, 2), 16);
            return this.Convert(r, g, b, a);
        }
        catch (error) {
            console.debug("<color=yellow>{0}</color>", "十六进制颜色值格式错误,需输入6位或8位(带alpha)16进制值,如:0091EAFF,不加#或0x");
        }
        return new Laya.Vector4(1, 1, 1, 1);
    };
    BIMManager.prototype.Convert = function (r, g, b, a) {
        return new Laya.Vector4(r / 255, g / 255, b / 255, a / 255);
    };
    BIMManager.prototype.ResetColor = function (floor) {
        var _this = this;
        if (floor == null || floor.meshRenderer == null)
            return;
        var mats = floor.meshRenderer.materials;
        if (mats != null) {
            mats.forEach(function (element) {
                if (_this.MaterialsDic.has(element)) {
                    var mat = element;
                    mat.albedoColor = _this.MaterialsDic.get(element);
                }
            });
        }
    };
    return BIMManager;
}());
exports.default = BIMManager;
var LabelType;
(function (LabelType) {
    LabelType[LabelType["Depart"] = 0] = "Depart";
    LabelType[LabelType["Usage"] = 1] = "Usage";
    LabelType[LabelType["Area"] = 2] = "Area";
})(LabelType = exports.LabelType || (exports.LabelType = {}));
var FloorItem = /** @class */ (function () {
    function FloorItem() {
    }
    return FloorItem;
}());
},{"../Common/Common":5,"../Component/LabelUpdate":7,"../Configure/NameConfig":10,"../Events/EventManager":15,"../Events/Events":16,"../GameManager":17,"../Resource/ResManager":22}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Vector3 = Laya.Vector3;
var GameManager_1 = require("../GameManager");
var EventManager_1 = require("../Events/EventManager");
var Events_1 = require("../Events/Events");
var CameraMoveScript_1 = require("../Component/CameraMoveScript");
var RaySelector_1 = require("../Component/RaySelector");
var LightControl_1 = require("../Component/LightControl");
var CameraManager = /** @class */ (function () {
    function CameraManager() {
        this._3dPos = new Vector3(-6, 45, 17);
        this._3dRot = new Vector3(-78, 0, 0);
        this._2dPos = new Vector3(-5, 50, 17);
        this._2dRot = new Vector3(-90, 0, 0);
        this._oriOrthSize = 70;
    }
    CameraManager.prototype.InitCamera = function () {
        var camera = new Laya.Camera();
        camera.transform.position = this._3dPos;
        camera.transform.localRotationEuler = this._3dRot;
        camera.clearColor = new Laya.Vector4(0, 0, 0, 0);
        this.Camera = camera;
        //摄像机控制
        camera.addComponent(CameraMoveScript_1.default);
        var camctrl = camera.getComponent(CameraMoveScript_1.default);
        camctrl.m_scene3d = GameManager_1.default.Instance().MainScene;
        //射线检测
        camera.addComponent(RaySelector_1.default);
        var rayselector = camera.getComponent(RaySelector_1.default);
        rayselector.Scene3D = GameManager_1.default.Instance().MainScene;
        GameManager_1.default.Instance().MainScene.addChild(camera);
        this.InitLight();
    };
    CameraManager.prototype.InitLight = function () {
        var directionLight = new Laya.DirectionLight();
        GameManager_1.default.Instance().MainScene.addChild(directionLight);
        directionLight.color = new Laya.Vector3(0.2, 0.2, 0.2);
        directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        directionLight.transform.position = this.Camera.transform.position;
        directionLight.transform.rotation = this.Camera.transform.rotation;
        directionLight.addComponent(LightControl_1.default);
        var lightcontrl = directionLight.getComponent(LightControl_1.default);
        lightcontrl.Camera = this.Camera;
    };
    CameraManager.prototype.ResetCamera = function (is2D) {
        this.Is2D = is2D;
        var component = this.Camera.getComponent(CameraMoveScript_1.default);
        if (is2D) {
            this.Camera.orthographic = true;
            this.Camera.orthographicVerticalSize = 60;
            this.Camera.transform.position = this._2dPos;
            this.Camera.transform.localRotationEuler = this._2dRot;
            component.Is2D = true;
            // Laya.Tween.to(this.Camera,{position:this._2dPos,rotation:this._2dRot},1000,null,Handler.create(this,()=>{
            //     this.Camera.orthographic = true;
            //     this.Camera.orthographicVerticalSize = 60;
            //     component.Is2D = true;
            // }));
        }
        else {
            this.Camera.orthographic = false;
            this.Camera.transform.position = this._3dPos;
            this.Camera.transform.localRotationEuler = this._3dRot;
            component.Is2D = false;
            // Laya.Tween.to(this.Camera,{position:this._3dPos,rotation:this._3dRot},1000,null,Handler.create(this,()=>{
            //     this.Camera.orthographic = false;
            //     component.Is2D = false;
            // }));
        }
    };
    CameraManager.prototype.CameraMove = function (object, fromPos, toPos) {
    };
    CameraManager.prototype.CameraRotate = function (fromRotate, toRotate) {
    };
    CameraManager.prototype.AddEvent = function () {
        EventManager_1.default.Instance().AddEventListener(Events_1.Events.OnUI_LevelBtn_Clicked.toString(), this, this.CameraMoveInLevel);
    };
    CameraManager.prototype.CameraMoveInLevel = function (levelName) {
    };
    return CameraManager;
}());
exports.default = CameraManager;
},{"../Component/CameraMoveScript":6,"../Component/LightControl":8,"../Component/RaySelector":9,"../Events/EventManager":15,"../Events/Events":16,"../GameManager":17}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Common = /** @class */ (function () {
    function Common() {
    }
    /**
     * 通过楼板Code获得LevelCode
     * @param code
     */
    Common.GetLevelByFloorCode = function (code) {
        if (code == null)
            return null;
        var names = code.split("-");
        if (names.length < 3) {
            return null;
        }
        else {
            return code.substring(0, 15);
        }
    };
    /**
     * 通过楼板Code获得BuildingCode
     * @param code
     */
    Common.GetBuildingByFloorCode = function (code) {
        if (code == null)
            return null;
        var names = code.split("-");
        if (names.length < 3) {
            return null;
        }
        else {
            return code.substring(0, 10);
        }
    };
    /**
     * 通过加载的资源，获取当前资源的所在的楼层
     * @param url .lh资源的url路径，.lh文件的命名规则必须为楼层的Code
     */
    Common.ParseLoadLevel = function (url) {
        if (url == null)
            return null;
        var temp = url.substr(url.lastIndexOf("/") + 1);
        var level = temp.substr(0, temp.indexOf("."));
        return level;
    };
    /**
     * 返回前端显示的LevelCode;例如F1
     * @param levelCode 楼层编码：BDHCMU-A02-F001
     */
    Common.GetPurLevel = function (levelCode) {
        if (levelCode == null || levelCode.match("-") == null)
            return null;
        var eles = levelCode.split("-");
        if (eles.length < 3)
            return null;
        return eles[2];
    };
    return Common;
}());
exports.default = Common;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Vector3 = Laya.Vector3;
var Vector2 = Laya.Vector2;
var Label = Laya.Label;
var EventManager_1 = require("../Events/EventManager");
var Events_1 = require("../Events/Events");
var CameraMoveScript = /** @class */ (function (_super) {
    __extends(CameraMoveScript, _super);
    function CameraMoveScript() {
        var _this = _super.call(this) || this;
        _this.m_lastDistance = 0;
        _this.m_preRadian = 0;
        _this.m_forwardLength = 3;
        _this.m_lookAtPoint = new Vector3();
        _this.m_isTwoFingersTouch = false;
        _this.m_twoFingersDistance = 0;
        _this.IsShowLable = true;
        _this.Is2D = false;
        return _this;
    }
    CameraMoveScript.prototype.onAwake = function () {
        this.Init();
        this.AddEvenets();
        this.RefreshPitchRadian();
        this.RefreshLookAtPoint();
    };
    CameraMoveScript.prototype.onUpdate = function () {
        if (this.IsShowLable)
            this.ShowInfo();
        this.RayCastHit();
        this.CameraToZeroDistance();
    };
    CameraMoveScript.prototype.onDestroy = function () {
        this.RemoveEvents();
    };
    CameraMoveScript.prototype.Init = function () {
        this.m_camera = this.owner;
        this.m_tempVector3 = new Vector3();
        this.m_mousePoint = new Vector2();
        this.m_lastTouchFinger0 = new Vector2();
        this.m_lastTouchFinger1 = new Vector2();
        this.yawPitchRoll = new Laya.Vector3();
        this.resultRotation = new Laya.Quaternion();
        this.tempRotationZ = new Laya.Quaternion();
        this.tempRotationX = new Laya.Quaternion();
        this.tempRotationY = new Laya.Quaternion();
        this.m_ray = new Laya.Ray(new Vector3(), new Vector3());
        this.m_hitResult = new Laya.HitResult();
        if (this.IsShowLable)
            this.m_label = this.createLabel(new Vector2(10, 10));
        this.InitDiffPlatform();
    };
    /**
     * 不同平台不同配置，从json文件中读取
     */
    CameraMoveScript.prototype.InitDiffPlatform = function () {
        if (Laya.Browser.onAndroid || Laya.Browser.onIPhone || Laya.Browser.onMobile) {
            this.m_3dMoveSpeed = 0.02;
            this.m_3dRotateSpeed = 0.004;
            this.m_3dWheelSpeed = 2;
            this.m_2dMoveSpeed = 0.02;
            this.m_2dWheelSpeed = 2;
            this.m_3dMinZoomDistance = -30;
            this.m_3dMaxZoomDistance = 1000;
            this.m_3dMinCameraPitchRadian = 10 * Math.PI / 180;
            this.m_3dMaxCameraPitchRadian = 90 * Math.PI / 180;
            this.m_2dMinOrthographicSize = 12;
        }
        else if (Laya.Browser.onPC || Laya.Browser.onMac) {
            this.m_3dMoveSpeed = 0.04;
            this.m_3dRotateSpeed = 0.004;
            this.m_3dWheelSpeed = 2;
            this.m_2dMoveSpeed = 0.02;
            this.m_2dWheelSpeed = 2;
            this.m_3dMinZoomDistance = -30;
            this.m_3dMaxZoomDistance = 1000;
            this.m_3dMinCameraPitchRadian = 10 * Math.PI / 180;
            this.m_3dMaxCameraPitchRadian = 90 * Math.PI / 180;
            this.m_2dMinOrthographicSize = 12;
        }
    };
    CameraMoveScript.prototype.AddEvenets = function () {
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.mouseDown);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.mouseUp);
        Laya.stage.on(Laya.Event.MOUSE_WHEEL, this, this.mouseWheel);
        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.mouseMove);
        Laya.stage.on(Laya.Event.RIGHT_MOUSE_DOWN, this, this.rightMouseDown);
        Laya.stage.on(Laya.Event.RIGHT_MOUSE_UP, this, this.rightMouseUp);
    };
    CameraMoveScript.prototype.RemoveEvents = function () {
        Laya.stage.off(Laya.Event.MOUSE_DOWN, this, this.mouseDown);
        Laya.stage.off(Laya.Event.MOUSE_UP, this, this.mouseUp);
        Laya.stage.off(Laya.Event.MOUSE_WHEEL, this, this.mouseWheel);
        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.mouseMove);
        Laya.stage.off(Laya.Event.RIGHT_MOUSE_DOWN, this, this.rightMouseDown);
        Laya.stage.off(Laya.Event.RIGHT_MOUSE_UP, this, this.rightMouseUp);
    };
    CameraMoveScript.prototype.mouseDown = function (e) {
        this.m_camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);
        this.m_lastMouseX = Laya.stage.mouseX;
        this.m_lastMouseY = Laya.stage.mouseY;
        this.m_isMouseDown = true;
        // //Two fingers operation
        var touches = e.touches;
        if (touches && touches.length == 2) {
            this.m_lastTouchFinger0.x = touches[0].stageX;
            this.m_lastTouchFinger0.y = touches[0].stageY;
            this.m_lastTouchFinger1.x = touches[1].stageX;
            this.m_lastTouchFinger1.y = touches[1].stageY;
            this.m_lastDistance = this.getDistance(touches);
            this.m_preRadian = this.atan2Ext(touches[0].stageY - touches[1].stageY, touches[0].stageX - touches[1].stageX);
            this.m_isTwoFingersTouch = true;
        }
    };
    CameraMoveScript.prototype.mouseUp = function (e) {
        this.m_isMouseDown = false;
        var touches = e.touches;
        if (touches && touches.length == 0) {
            this.m_isTwoFingersTouch = false;
        }
    };
    CameraMoveScript.prototype.rightMouseDown = function (e) {
        this.m_lastMouseX = Laya.stage.mouseX;
        this.m_lastMouseY = Laya.stage.mouseY;
        this.m_isMouseDown = true;
        this.m_isRightMouseButtonDown = true;
    };
    CameraMoveScript.prototype.rightMouseUp = function (e) {
        this.m_isMouseDown = false;
        this.m_isRightMouseButtonDown = false;
    };
    CameraMoveScript.prototype.mouseWheel = function (e) {
        if (e == null)
            return;
        var zoomDelta = e.delta;
        if (this.Is2D) {
            this.m_camera.orthographicVerticalSize += -zoomDelta * this.m_2dWheelSpeed;
            if (this.m_camera.orthographicVerticalSize < this.m_2dMinOrthographicSize) {
                this.m_camera.orthographicVerticalSize = this.m_2dMinOrthographicSize;
            }
        }
        else {
            this.cameraZoom(zoomDelta);
        }
        if (this.OnMouseWheel)
            this.OnMouseWheel(zoomDelta);
    };
    CameraMoveScript.prototype.mouseMove = function (e) {
        var touches = e.touches;
        if (!touches) {
            this.moveControlByMouse();
        }
        else {
            this.moveCtrlByTouch(touches);
        }
    };
    /**
    *  鼠标模式
    */
    CameraMoveScript.prototype.moveControlByMouse = function () {
        if (this.m_isMouseDown) {
            var deltaX = Laya.stage.mouseX - this.m_lastMouseX;
            var deltaY = Laya.stage.mouseY - this.m_lastMouseY;
            if (!this.m_isRightMouseButtonDown) {
                if (this.m_isLastTouchDoubleFingers) {
                    deltaX = 0;
                    deltaY = 0;
                    this.m_isLastTouchDoubleFingers = false;
                }
                this.moveRight(-this.m_3dMoveSpeed * deltaX);
                this.moveUp(this.m_3dMoveSpeed * deltaY);
                this.RefreshLookAtPoint();
            }
            else {
                if (this.Is2D)
                    return;
                var deltaX_1 = Laya.stage.mouseX - this.m_lastMouseX;
                var deltaY_1 = Laya.stage.mouseY - this.m_lastMouseY;
                this.rotateAround(-deltaY_1 * this.m_3dRotateSpeed, -deltaX_1 * this.m_3dRotateSpeed);
            }
            this.m_lastMouseX = Laya.stage.mouseX;
            this.m_lastMouseY = Laya.stage.mouseY;
        }
    };
    /**
     * 触控模式
     */
    CameraMoveScript.prototype.moveCtrlByTouch = function (touches) {
        if (touches.length == 1 && !this.m_isTwoFingersTouch) {
            //单指触控
            // this.camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);
            var deltaX = Laya.stage.mouseX - this.m_lastMouseX;
            var deltaY = Laya.stage.mouseY - this.m_lastMouseY;
            if (this.m_isLastTouchDoubleFingers) {
                //如果上一次操作是双指,如双指操作时,抬起一指变单指操作,要做个清零,防止摄像机跳跃
                deltaX = 0;
                deltaY = 0;
                this.m_isLastTouchDoubleFingers = false;
            }
            //let speed: number = 0.06;
            this.moveRight(-this.m_3dMoveSpeed * deltaX);
            this.moveUp(this.m_3dMoveSpeed * deltaY);
            this.m_lastMouseX = Laya.stage.mouseX;
            this.m_lastMouseY = Laya.stage.mouseY;
            this.RefreshLookAtPoint();
        }
        else if (touches.length == 2) {
            if (this.Is2D) {
                var distance2 = this.getDistance(touches);
                var factor2 = 0.1;
                var pinchValue2 = 0;
                pinchValue2 = (distance2 - this.m_lastDistance) * factor2;
                this.m_lastDistance = distance2;
                this.m_camera.orthographicVerticalSize -= pinchValue2;
                if (this.m_camera.orthographicVerticalSize < this.m_2dMinOrthographicSize) {
                    this.m_camera.orthographicVerticalSize = this.m_2dMinOrthographicSize;
                }
            }
            else {
                //双指触控
                this.m_isTwoFingersTouch = true;
                this.m_isLastTouchDoubleFingers = true;
                var twoFingersDistance = this.getTwoFingersDistance(touches);
                var deltaDistance = Math.abs(twoFingersDistance - this.m_twoFingersDistance);
                this.m_twoFingersDistance = twoFingersDistance;
                //Two fingers drag
                var deltaX0 = touches[0].stageX - this.m_lastTouchFinger0.x;
                var deltaY0 = touches[0].stageY - this.m_lastTouchFinger0.y;
                var deltaX1 = touches[1].stageX - this.m_lastTouchFinger1.x;
                var deltaY1 = touches[1].stageY - this.m_lastTouchFinger1.y;
                var deltaY = (deltaY0 + deltaY1) * 0.5;
                var deltaX = (deltaX0 + deltaX1) * 0.5;
                this.rotateAround(-deltaY * this.m_3dRotateSpeed, 0);
                this.m_lastTouchFinger0.x = touches[0].stageX;
                this.m_lastTouchFinger0.y = touches[0].stageY;
                this.m_lastTouchFinger1.x = touches[1].stageX;
                this.m_lastTouchFinger1.y = touches[1].stageY;
                //Two fingers pinch
                var distance = this.getDistance(touches);
                var factor = 0.01;
                var pinchValue = 0;
                pinchValue += (distance - this.m_lastDistance) * factor;
                this.m_lastDistance = distance;
                var fingerPinchSpeed = 10;
                this.cameraZoom(pinchValue * fingerPinchSpeed);
                if (this.OnDoubleFingersPinch)
                    this.OnDoubleFingersPinch(pinchValue);
                //Two fingers twist
                var nowRadian = this.atan2Ext(touches[0].stageY - touches[1].stageY, touches[0].stageX - touches[1].stageX);
                var deltaRadian = nowRadian - this.m_preRadian;
                if (deltaRadian != 0) {
                    var twistValue = 180 / Math.PI * deltaRadian;
                    this.rotateAround(0, twistValue * 0.1);
                    this.m_preRadian = nowRadian;
                    if (this.OnDoubleFingersTwist)
                        this.OnDoubleFingersTwist(twistValue);
                }
            }
        }
    };
    /**
     * 向前移动。
     * @param distance 移动距离。
     */
    CameraMoveScript.prototype.moveForward = function (distance) {
        this.m_tempVector3.x = this.m_tempVector3.y = 0;
        this.m_tempVector3.z = distance;
        this.m_camera.transform.translate(this.m_tempVector3);
    };
    /**
     * 向右移动。
     * @param distance 移动距离。
     */
    CameraMoveScript.prototype.moveRight = function (distance) {
        this.m_tempVector3.y = this.m_tempVector3.z = 0;
        this.m_tempVector3.x = distance;
        this.m_camera.transform.translate(this.m_tempVector3);
    };
    /**
     * 向上移动。
     * @param distance 移动距离。
     */
    CameraMoveScript.prototype.moveUp = function (distance) {
        this.m_tempVector3.x = this.m_tempVector3.z = 0;
        this.m_tempVector3.y = distance;
        this.m_camera.transform.translate(this.m_tempVector3, true);
    };
    /**
     * 缩放
     * @param delta
     */
    CameraMoveScript.prototype.cameraZoom = function (delta) {
        // if(this.m_hitObject!=null && !this.m_isRightMouseDown){
        //     this.m_forwardLength = this.getTwoPointsDistance(
        //         this.m_camera.transform.position,this.m_hitPoint);        
        // }
        var currentForwardLength = this.m_forwardLength;
        var distance = -delta * this.m_3dWheelSpeed;
        currentForwardLength += distance;
        if (delta > 0) {
            //拉近
            if (currentForwardLength < this.m_3dMinZoomDistance)
                distance += (this.m_3dMinZoomDistance - currentForwardLength);
        }
        else {
            //拉远
            if (currentForwardLength > this.m_3dMaxZoomDistance)
                distance -= (currentForwardLength - this.m_3dMaxZoomDistance);
        }
        this.moveForward(distance);
        this.m_forwardLength += distance;
    };
    /**
     * 旋转
     * @param angleX
     * @param angleY
     */
    CameraMoveScript.prototype.rotateAround = function (angleX, angleY) {
        var currentRadian = this.m_currentPitchRadian;
        currentRadian -= angleX;
        if (angleX < 0) {
            //下拖动,往上转
            if (currentRadian > this.m_3dMaxCameraPitchRadian)
                angleX += (currentRadian - this.m_3dMaxCameraPitchRadian);
        }
        else {
            //上拖动,往下转
            if (currentRadian < this.m_3dMinCameraPitchRadian)
                angleX += (currentRadian - this.m_3dMinCameraPitchRadian);
        }
        this.m_camera.transform.rotate(new Vector3(angleX, 0, 0));
        this.m_camera.transform.rotate(new Vector3(0, angleY, 0), false);
        var forward = new Vector3();
        this.m_camera.transform.getForward(forward);
        var newPosition = new Vector3();
        Vector3.scale(forward, -1, forward);
        newPosition = this.Forward(this.m_lookAtPoint, forward, this.m_forwardLength);
        this.m_camera.transform.position = newPosition;
        this.RefreshPitchRadian();
    };
    CameraMoveScript.prototype._updateRotation = function () {
        if (Math.abs(this.yawPitchRoll.y) < 1.50) {
            Laya.Quaternion.createFromYawPitchRoll(this.yawPitchRoll.x, this.yawPitchRoll.y, this.yawPitchRoll.z, this.tempRotationZ);
            this.tempRotationZ.cloneTo(this.m_camera.transform.localRotation);
            this.m_camera.transform.localRotation = this.m_camera.transform.localRotation;
        }
    };
    //把Math.atan2值域映射到[0, 2pi]
    CameraMoveScript.prototype.atan2Ext = function (y, x) {
        var radian = Math.atan2(y, x);
        if (radian >= 0)
            return radian;
        else
            return radian + 2 * Math.PI;
    };
    CameraMoveScript.prototype.getTwoFingersDistance = function (touches) {
        var fingersDistance = 0;
        var dx = touches[0].stageX - touches[1].stageX;
        var dy = touches[0].stageY - touches[1].stageY;
        fingersDistance = Math.sqrt(dx * dx + dy * dy);
        return fingersDistance;
    };
    CameraMoveScript.prototype.rotateAroundY = function (ponit, radius, angle) {
        var posX = Math.cos(angle) * radius;
        var posY = Math.sin(angle) * radius;
        this.m_camera.transform.position = new Vector3(posX, this.m_camera.transform.position.y, posY);
        this.m_camera.transform.lookAt(ponit, new Vector3(0, 1, 0), false);
    };
    CameraMoveScript.prototype.rotateAroundX = function (ponit, radius, angle) {
        this.m_camera.transform.rotate(new Vector3(angle, 0, 0));
        var forward = new Vector3();
        this.m_camera.transform.getForward(forward);
        var position = new Vector3();
        var deltaPosition = new Vector3();
        Vector3.scale(forward, -radius, deltaPosition);
        Vector3.add(ponit, deltaPosition, position);
        this.m_camera.transform.position = position;
    };
    //计算两个触摸点之间的距离
    CameraMoveScript.prototype.getDistance = function (points) {
        var distance = 0;
        if (points && points.length == 2) {
            var dx = points[0].stageX - points[1].stageX;
            var dy = points[0].stageY - points[1].stageY;
            distance = Math.sqrt(dx * dx + dy * dy);
        }
        return distance;
    };
    CameraMoveScript.prototype.getTwoPointsDistance = function (pointA, pointB) {
        var distance = 0;
        var dx = pointA.x - pointB.x;
        var dy = pointA.y - pointB.y;
        var dz = pointA.z - pointB.z;
        distance = Math.sqrt(dx * dx + dy * dy + dz * dz);
        return distance;
    };
    CameraMoveScript.prototype.Forward = function (position, direction, distance) {
        var deltaPosition = new Vector3();
        var newPosition = new Vector3();
        Vector3.scale(direction, distance, deltaPosition);
        Vector3.add(position, deltaPosition, newPosition);
        return newPosition;
    };
    CameraMoveScript.prototype.RefreshLookAtPoint = function () {
        var forward = new Vector3();
        this.m_camera.transform.getForward(forward);
        this.m_lookAtPoint = this.Forward(this.m_camera.transform.position, forward, this.m_forwardLength);
    };
    CameraMoveScript.prototype.RefreshPitchRadian = function () {
        this.m_camera.transform.localRotation.getYawPitchRoll(this.yawPitchRoll);
        this.m_currentPitchRadian = Math.abs(this.yawPitchRoll.y);
    };
    //temp
    CameraMoveScript.prototype.CameraToZeroDistance = function () {
        var dis = 0;
        if (this.Is2D) {
            dis = this.m_camera.orthographicVerticalSize;
        }
        else {
            var camPos = this.m_camera.transform.position;
            dis = Vector3.distance(camPos, Vector3._ZERO);
            this.m_label.text += "摄像机到原点的距离：" + dis;
        }
        EventManager_1.default.Instance().PostEvent(Events_1.Events.OnCameraDistanceChanged.toString(), dis);
    };
    /**
     * 绕给定点和轴旋转
     * @param target 旋转对象
     * @param rotatePos 给定点位置
     * @param dir 给定方向
     * @param angle 旋转角度，弧度
     */
    CameraMoveScript.prototype.RotateAround = function (target, rotatePos, dir, angle) {
        //创建一个四元数
        var quaternion = new Laya.Quaternion();
        Laya.Quaternion.createFromAxisAngle(dir, angle, quaternion);
        //计算旋转后的Position
        var deltapos = new Laya.Vector3();
        Laya.Vector3.subtract(target.transform.position, rotatePos, deltapos);
        var changeVector3 = new Laya.Vector3();
        Laya.Vector3.transformQuat(deltapos, quaternion, changeVector3);
        var resultPos = new Laya.Vector3();
        Laya.Vector3.add(changeVector3, rotatePos, resultPos);
        target.transform.position = resultPos;
        //计算旋转后的Rotation
        var newRotation = new Laya.Quaternion();
        Laya.Quaternion.multiply(target.transform.rotation, quaternion, newRotation);
        target.transform.rotation = newRotation;
    };
    /**
    * 根据碰撞对象的位置，设置摄像机的缩放和旋转轴等；
    * 旋转操作，以屏幕中心点发出射线，如果有碰撞对象，则将碰撞点作为旋转中心，如果没有则将（0,0,0）设为旋转中心；
    * 缩放操作，以鼠标位置发出射线，若有碰撞对象，则根据碰撞点与摄像机的距离限制摄像机的最小距离；
    */
    CameraMoveScript.prototype.RayCastHit = function () {
        if (this.m_camera != null && this.m_scene3d != null) {
            this.m_mousePoint.x = Laya.stage.mouseX;
            this.m_mousePoint.y = Laya.stage.mouseY;
            this.m_camera.viewportPointToRay(this.m_mousePoint, this.m_ray);
            this.m_scene3d.physicsSimulation.rayCast(this.m_ray, this.m_hitResult);
            if (this.m_hitResult.succeeded) {
                this.m_hitObject = this.m_hitResult.collider.owner;
                this.m_hitPoint = this.m_hitResult.point;
            }
            else {
                this.m_hitObject = null;
            }
        }
    };
    /**
     * 创建一个Lable
     * @param color
     * @param strokeColor
     */
    CameraMoveScript.prototype.createLabel = function (pos, color, strokeColor) {
        var _color = "#ffffff";
        var _strokeColor = "#000000";
        var _strokeWidth = 1;
        var label = new Label();
        label.font = "Microsoft YaHei";
        label.text = "SAMPLE DEMO";
        label.fontSize = 20;
        if (color) {
            label.color = color;
        }
        else {
            label.color = _color;
        }
        if (strokeColor) {
            label.stroke = _strokeWidth;
            label.strokeColor = _strokeColor;
        }
        label.pos(pos.x, pos.y);
        Laya.stage.addChild(label);
        return label;
    };
    CameraMoveScript.prototype.ShowInfo = function () {
        var pos = this.m_camera.transform.position;
        var rot = this.m_camera.transform.rotationEuler;
        this.m_label.text = "Camera Pos : (" + pos.x.toFixed(2) + "," + pos.y.toFixed(2) + "," + pos.z.toFixed(2) + ")" + "\n";
        this.m_label.text += "Camera Rot : (" + rot.x.toFixed(2) + "," + rot.y.toFixed(2) + "," + rot.z.toFixed(2) + ")" + "\n";
        this.m_label.text += "Camera orthographicVerticalSize : " + this.m_camera.orthographicVerticalSize + "\n";
        this.m_label.text += "Mouse PosX : " + Laya.stage.mouseX + "\n";
        this.m_label.text += "Mouse PosY : " + Laya.stage.mouseY + "\n";
        this.m_label.text += "是否在2D: " + this.Is2D + "\n";
        this.m_label.text += "this forwardlength: " + this.m_forwardLength + "\n";
        this.m_label.text += "3dMoveSpeed : " + this.m_3dMoveSpeed + "\n";
        this.m_label.text += "2dMoveSpeed : " + this.m_2dMoveSpeed + "\n";
    };
    return CameraMoveScript;
}(Laya.Script3D));
exports.default = CameraMoveScript;
},{"../Events/EventManager":15,"../Events/Events":16}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LabelUpdatPos = /** @class */ (function (_super) {
    __extends(LabelUpdatPos, _super);
    function LabelUpdatPos() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LabelUpdatPos.prototype.onAwake = function () {
        this.m_label = this.owner;
        if (Laya.Browser.onAndroid || Laya.Browser.onIPhone || Laya.Browser.onMobile) {
            this.m_fontsize = 25;
        }
        else if (Laya.Browser.onPC || Laya.Browser.onMac) {
            this.m_fontsize = 14;
        }
    };
    LabelUpdatPos.prototype.onStart = function () {
        this.SetLabelPos();
    };
    LabelUpdatPos.prototype.onUpdate = function () {
        this.SetLabelPos();
    };
    LabelUpdatPos.prototype.Init = function (parent, camera, content) {
        this.m_parent = parent;
        this.m_camera = camera;
        this.InitLabel();
        this.SetLabelContent(content);
    };
    LabelUpdatPos.prototype.SetLabelContent = function (content) {
        if (this.m_label == null)
            return;
        this.m_label.text = content;
    };
    LabelUpdatPos.prototype.InitLabel = function () {
        if (this.m_label == null)
            return;
        this.m_label.width = 300;
        this.m_label.height = 50;
        this.m_label.pivotX = 150;
        this.m_label.pivotY = 25;
        this.m_label.font = "Microsoft YaHei";
        this.m_label.text = "SAMPLE DEMO";
        this.m_label.fontSize = this.m_fontsize;
        this.m_label.color = "#ffffff";
        this.m_label.stroke = 0.05;
        this.m_label.strokeColor = "#000000";
        this.m_label.align = "center";
    };
    LabelUpdatPos.prototype.SetLabelPos = function () {
        if (this.m_parent == null || this.m_camera == null)
            return;
        var floorPos = this.m_parent.transform.position;
        var newPos = new Laya.Vector3(floorPos.x, floorPos.y + 3, floorPos.z);
        var screenPos = new Laya.Vector3();
        this.m_camera.worldToViewportPoint(newPos, screenPos);
        this.m_label.pos(screenPos.x, screenPos.y + 15);
    };
    return LabelUpdatPos;
}(Laya.Script));
exports.default = LabelUpdatPos;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LightControl = /** @class */ (function (_super) {
    __extends(LightControl, _super);
    function LightControl() {
        return _super.call(this) || this;
    }
    LightControl.prototype.onAwake = function () {
        this.Light = this.owner;
    };
    LightControl.prototype.onUpdate = function () {
        this.Light.transform.position = this.Camera.transform.position;
        this.Light.transform.rotationEuler = this.Camera.transform.rotationEuler;
    };
    return LightControl;
}(Laya.Script3D));
exports.default = LightControl;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../GameManager");
var Vector3 = Laya.Vector3;
var EventManager_1 = require("../Events/EventManager");
var Events_1 = require("../Events/Events");
var RaySelector = /** @class */ (function (_super) {
    __extends(RaySelector, _super);
    function RaySelector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.m_mousePoint = new Laya.Vector2();
        return _this;
    }
    RaySelector.prototype.onAwake = function () {
        if (this.owner != null) {
            var cam = this.owner;
            if (cam != null) {
                this.Camera = cam;
            }
        }
        this.m_ray = new Laya.Ray(new Vector3(), new Vector3());
        this.m_hitResult = new Laya.HitResult();
        this.AddMouseEvent();
    };
    RaySelector.prototype.onUpdate = function () {
        this.RayCastHit();
    };
    RaySelector.prototype.AddMouseEvent = function () {
        Laya.stage.on(Laya.Event.CLICK, this, this.OnRayCastClicked);
    };
    RaySelector.prototype.RemoveMouseEvent = function () {
        Laya.stage.off(Laya.Event.CLICK, this, this.OnRayCastClicked);
    };
    RaySelector.prototype.onDisable = function () {
        this.RemoveMouseEvent();
    };
    RaySelector.prototype.RayCastHit = function () {
        this.m_mousePoint.x = Laya.stage.mouseX;
        this.m_mousePoint.y = Laya.stage.mouseY;
        if (this.Camera != null && this.Scene3D != null) {
            this.Camera.viewportPointToRay(this.m_mousePoint, this.m_ray);
            this.Scene3D.physicsSimulation.rayCast(this.m_ray, this.m_hitResult);
            if (this.m_hitResult.succeeded) {
                var collider = this.m_hitResult.collider.owner;
                //this.m_deltaClickTime +=Laya.timer.delta;
                if (this.m_isClicked) {
                    EventManager_1.default.Instance().PostEvent(Events_1.Events.OnSpaceClicked.toString(), collider);
                    GameManager_1.default.Instance().BIM.SetLayaColor(collider, Laya.Color.RED);
                }
                if (this.m_selected != collider) {
                    this.m_isClicked = false;
                    if (this.m_selected != null) {
                        EventManager_1.default.Instance().PostEvent(Events_1.Events.OnSpaceExit.toString(), this.m_selected);
                        GameManager_1.default.Instance().BIM.ResetColor(this.m_selected);
                        this.m_selected = null;
                    }
                    this.m_selected = collider;
                    EventManager_1.default.Instance().PostEvent(Events_1.Events.OnSpaceExit.toString(), this.m_selected);
                    GameManager_1.default.Instance().BIM.SetLayaColor(collider, Laya.Color.YELLOW);
                }
            }
        }
    };
    RaySelector.prototype.OnRayCastClicked = function () {
        this.m_isClicked = true;
        // this.m_mousePoint.x = Laya.stage.mouseX;
        // this.m_mousePoint.y = Laya.stage.mouseY;
        // this.Camera.viewportPointToRay(this.m_mousePoint,this.m_ray);
        // if(this.Scene3D!=null){
        //     this.Scene3D.physicsSimulation.rayCast(this.m_ray,this.m_hitResult);
        //     if(this.m_hitResult.succeeded){
        //         var colliderName = this.m_hitResult.collider.owner.name;
        //         //console.debug("碰撞的对象为："+ colliderName);
        //         var floor:Laya.MeshSprite3D = GameManager.Instance().BIM.GetOneFloorSprite3D(colliderName);
        //         if(floor==null)return ;
        //         var mats = floor.meshRenderer.materials;
        //         mats.forEach(element => {
        //             var mat:Laya.BlinnPhongMaterial = element as Laya.BlinnPhongMaterial;
        //             mat.albedoColor = new Laya.Vector4(1,0,0,1);
        //         });
        //     }
        // }
    };
    RaySelector.prototype.DrawLine = function () {
        // this.m_mousePoint.x = Laya.MouseManager.instance.mouseX;
        // this.m_mousePoint.y = Laya.MouseManager.instance.mouseY;
        // this.m_camera.worldToViewportPoint(this.m_camera.transform.position,this.camPos);
        // this.sp.graphics.clear();
        // this.sp.graphics.drawLine(this.camPos.x,this.camPos.y,this.m_mousePoint.x,this.m_mousePoint.y,"#ff0000",1); 
    };
    return RaySelector;
}(Laya.Script3D));
exports.default = RaySelector;
},{"../Events/EventManager":15,"../Events/Events":16,"../GameManager":17}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NameConfig = /** @class */ (function () {
    function NameConfig() {
    }
    NameConfig.ip = "meetoo.cn";
    NameConfig.port = "1986";
    NameConfig.userName = "yangxin";
    NameConfig.userPassprot = "81DC9BDB52D04DC20036DBD8313ED055";
    NameConfig.screenWidth = Laya.Browser.width;
    NameConfig.screenHegiht = Laya.Browser.height;
    NameConfig.floorLayer = "buildingLevels";
    NameConfig.floor = "Floor";
    NameConfig.campusCode = "PUMCHW";
    return NameConfig;
}());
exports.default = NameConfig;
},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../GameManager");
var TableOrgnization_1 = require("./TableOrgnization");
var TableBIMUsageType_1 = require("./TableBIMUsageType");
var TableBIMSpace_1 = require("./TableBIMSpace");
var DataManager = /** @class */ (function () {
    function DataManager() {
    }
    DataManager.prototype.Init = function () {
        this.RegisterTables();
    };
    DataManager.prototype.RegisterTables = function () {
        var _this = this;
        this.tableBimSpace = new TableBIMSpace_1.default();
        this.tableBimSpace.Init(GameManager_1.default.Instance().Http.URL, function () {
            _this.tableOrganization = new TableOrgnization_1.default();
            _this.tableOrganization.Init(GameManager_1.default.Instance().Http.URL, function () {
                _this.tableUsageType = new TableBIMUsageType_1.default();
                _this.tableUsageType.Init(GameManager_1.default.Instance().Http.URL, function () {
                    GameManager_1.default.Instance().LoadRes();
                });
            });
        });
    };
    DataManager.prototype.GetOneOrganizationName = function (code, level) {
        if (this.tableOrganization.IsLoaded) {
            return this.tableOrganization.GetOneOrganizationName(code, level);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneOrganizationColor = function (code) {
        if (this.tableOrganization.IsLoaded) {
            return this.tableOrganization.GetOneOrganizationColor(code);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneUsageName = function (code) {
        if (this.tableUsageType.IsLoaded) {
            return this.tableUsageType.GetOneUsageName(code);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneUsageColor = function (code) {
        if (this.tableUsageType.IsLoaded) {
            return this.tableUsageType.GetOneUsageColor(code);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneSpaceData = function (code) {
        if (this.tableBimSpace.IsLoaded) {
            return this.tableBimSpace.GetOneSpaceData(code);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneLevelOrganizations = function (level) {
        if (this.tableBimSpace.IsLoaded) {
            return this.tableBimSpace.GetOneLevelOrgnizations(level);
        }
        else
            return null;
    };
    DataManager.prototype.GetOneLevelFloorsByOrgs = function (level, orgs) {
        if (this.tableBimSpace.IsLoaded) {
            return this.tableBimSpace.GetOneLevelCodesByOrgs(level, orgs);
        }
        else {
            return null;
        }
    };
    return DataManager;
}());
exports.default = DataManager;
},{"../GameManager":17,"./TableBIMSpace":12,"./TableBIMUsageType":13,"./TableOrgnization":14}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../GameManager");
var TableBIMSpace = /** @class */ (function () {
    function TableBIMSpace() {
        this.TabelName = "BIMSpace";
    }
    TableBIMSpace.prototype.Init = function (url, finished) {
        this.InitContainer();
        var postUrl = url.concat("/IVS/BIMSpace/dynamicQuery");
        var postBody = JSON.stringify({ "levelCodeList": ["PUMCHW-D03-F001", "PUMCHW-D03-F002", "PUMCHW-D03-F003"] });
        this.AsynLoadData(postUrl, postBody, finished);
    };
    TableBIMSpace.prototype.GetOneSpaceData = function (code) {
        if (code == null)
            return null;
        if (this.SpaceDataDic.has(code)) {
            return this.SpaceDataDic.get(code);
        }
        else
            return null;
    };
    TableBIMSpace.prototype.GetOrganizationByCode = function (code) {
        if (code == null)
            return null;
        if (this.SpaceDataDic.has(code)) {
            return this.SpaceDataDic.get(code).organizationCode;
        }
        else
            return null;
    };
    TableBIMSpace.prototype.GetOneLevelOrgnizations = function (level) {
        var _this = this;
        var orgs = new Array();
        if (this.m_levelSpaceCodes.has(level)) {
            this.m_levelSpaceCodes.get(level).forEach(function (element) {
                var orgCode = _this.GetOrganizationByCode(element);
                var b = orgs.some(function (code) { return code == orgCode; });
                if (!b)
                    orgs.push(orgCode);
            });
        }
        return orgs;
    };
    TableBIMSpace.prototype.GetOneLevelCodesByOrgs = function (level, orgs) {
        var _this = this;
        var floorCodes = new Array();
        if (this.m_levelSpaceCodes.has(level)) {
            this.m_levelSpaceCodes.get(level).forEach(function (element) {
                var orgCode = _this.GetOrganizationByCode(element);
                var b = orgs.some(function (code) {
                    return code == orgCode;
                });
                if (b) {
                    floorCodes.push(element);
                }
            });
        }
        return floorCodes;
    };
    TableBIMSpace.prototype.InitContainer = function () {
        this.m_levelSpaceCodes = new Laya.WeakObject();
        this.SpaceDataDic = new Laya.WeakObject();
    };
    TableBIMSpace.prototype.AsynLoadData = function (url, postBody, finished) {
        var _this = this;
        if (url == null || postBody == null)
            return;
        GameManager_1.default.Instance().Http.post(url, postBody, this, function (e) {
            if (e.state == "succeed") {
                var rst = e.data["data"]["list"];
                rst.forEach(function (element) {
                    var ele = _this.CreateSpaceData(element);
                    if (ele != null && ele.code != null) {
                        if (!_this.SpaceDataDic.has(ele.code)) {
                            _this.SpaceDataDic.set(ele.code, ele);
                        }
                    }
                    //levelCodes
                    var level = ele.levelCode;
                    if (!_this.m_levelSpaceCodes.has(level)) {
                        _this.m_levelSpaceCodes.set(level, new Array());
                    }
                    _this.m_levelSpaceCodes.get(level).push(ele.code);
                });
                finished.apply();
                _this.IsLoaded = true;
            }
        });
    };
    TableBIMSpace.prototype.CreateSpaceData = function (element) {
        var data = new SpaceData();
        data.code = element.code;
        data.usageName = element.usageName;
        data.buildingCode = element.buildingCode;
        data.campusCode = element.campusCode;
        data.levelCode = element.levelCode;
        data.organizationCode = element.organizationCode;
        data.usageTypeCode = element.usageTypeCode;
        data.useArea = element.useArea.toFixed(2).toString() + "m²";
        data.perimeter = element.perimeter;
        return data;
    };
    return TableBIMSpace;
}());
exports.default = TableBIMSpace;
var SpaceData = /** @class */ (function () {
    function SpaceData() {
    }
    return SpaceData;
}());
exports.SpaceData = SpaceData;
},{"../GameManager":17}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../GameManager");
var TableUsageType = /** @class */ (function () {
    function TableUsageType() {
        this.TabelName = "BIMUsageType";
    }
    TableUsageType.prototype.Init = function (url, finished) {
        this.InitContainer();
        var postUrl = url.concat("/IVS/Common/retrieveAllByTableName");
        var postBody = JSON.stringify({ "tableName": this.TabelName });
        this.AsynLoadData(postUrl, postBody, finished);
    };
    TableUsageType.prototype.GetOneUsageName = function (code) {
        if (code == null)
            return null;
        if (this.UsageTypeDic.has(code)) {
            var data = this.UsageTypeDic.get(code);
            return data.name;
        }
        else {
            return null;
        }
    };
    TableUsageType.prototype.GetOneUsageColor = function (code) {
        if (code == null)
            return null;
        var level = this.GetUsageLevelLevel(code);
        if (level != "2") {
            code = code.substr(0, 4);
        }
        if (this.UsageTypeDic.has(code)) {
            var data = this.UsageTypeDic.get(code);
            return data.color;
        }
        else {
            return null;
        }
    };
    TableUsageType.prototype.GetUsageLevelLevel = function (code) {
        if (code == null)
            return null;
        if (this.UsageTypeDic.has(code)) {
            var data = this.UsageTypeDic.get(code);
            return data.level;
        }
        else {
            return null;
        }
    };
    TableUsageType.prototype.InitContainer = function () {
        this.UsageTypeDic = new Laya.WeakObject();
    };
    TableUsageType.prototype.AsynLoadData = function (url, postbody, fininshed) {
        var _this = this;
        GameManager_1.default.Instance().Http.post(url, postbody, this, function (e) {
            if (e.state == "succeed") {
                var rst = e.data["data"]["list"];
                rst.forEach(function (element) {
                    var ele = _this.CreateUsageType(element);
                    if (ele != null && ele.code != null) {
                        if (!_this.UsageTypeDic.has(ele.code)) {
                            _this.UsageTypeDic.set(ele.code, ele);
                        }
                    }
                });
                fininshed.apply();
                _this.IsLoaded = true;
            }
        });
    };
    TableUsageType.prototype.CreateUsageType = function (element) {
        var data = new UsageType();
        data.code = element.code;
        data.name = element.name;
        data.level = element.level;
        data.color = element.color;
        return data;
    };
    return TableUsageType;
}());
exports.default = TableUsageType;
var UsageType = /** @class */ (function () {
    function UsageType() {
    }
    return UsageType;
}());
exports.UsageType = UsageType;
},{"../GameManager":17}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../GameManager");
var TableOrgnization = /** @class */ (function () {
    function TableOrgnization() {
        this.TabelName = "Organization";
    }
    TableOrgnization.prototype.Init = function (url, finished) {
        this.InitContainer();
        var postUrl = url.concat("/IVS/Common/retrieveAllByTableName");
        var postBody = JSON.stringify({ "tableName": this.TabelName });
        this.AsynLoadData(postUrl, postBody, finished);
    };
    TableOrgnization.prototype.GetOneOrganizationName = function (code, level) {
        if (code == null)
            return null;
        code = level == null ? code : code.substr(0, 2 * parseInt(level));
        if (this.orgnizationDic.has(code)) {
            var data = this.orgnizationDic.get(code);
            return data.name;
        }
        else {
            return null;
        }
    };
    TableOrgnization.prototype.GetOneOrganizationColor = function (code) {
        if (code == null)
            return null;
        var level = this.GetOrganizationLevel(code);
        if (level != "2") {
            code = code.substr(0, 4);
        }
        if (this.orgnizationDic.has(code)) {
            var data = this.orgnizationDic.get(code);
            return data.color;
        }
        else {
            return null;
        }
    };
    TableOrgnization.prototype.GetOrganizationLevel = function (code) {
        if (code == null)
            return null;
        if (this.orgnizationDic.has(code)) {
            var data = this.orgnizationDic.get(code);
            return data.level;
        }
        else {
            return null;
        }
    };
    TableOrgnization.prototype.InitContainer = function () {
        this.orgnizationDic = new Laya.WeakObject();
    };
    TableOrgnization.prototype.AsynLoadData = function (url, postbody, fininshed) {
        var _this = this;
        GameManager_1.default.Instance().Http.post(url, postbody, this, function (e) {
            if (e.state == "succeed") {
                var rst = e.data["data"]["list"];
                rst.forEach(function (element) {
                    var ele = _this.CreateOrganization(element);
                    if (ele != null && ele.code != null) {
                        if (!_this.orgnizationDic.has(ele.code)) {
                            _this.orgnizationDic.set(ele.code, ele);
                        }
                    }
                });
                fininshed.apply();
                _this.IsLoaded = true;
            }
        });
    };
    TableOrgnization.prototype.CreateOrganization = function (element) {
        var data = new Orgnization();
        data.code = element.code;
        data.name = element.name;
        data.level = element.level;
        data.color = element.color;
        return data;
    };
    return TableOrgnization;
}());
exports.default = TableOrgnization;
var Orgnization = /** @class */ (function () {
    function Orgnization() {
    }
    return Orgnization;
}());
exports.Orgnization = Orgnization;
},{"../GameManager":17}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventDispatcher = laya.events.EventDispatcher;
var EventManager = /** @class */ (function (_super) {
    __extends(EventManager, _super);
    function EventManager() {
        return _super.call(this) || this;
    }
    EventManager.Instance = function () {
        if (EventManager._instance == null) {
            EventManager._instance = new EventManager();
        }
        return EventManager._instance;
    };
    EventManager.prototype.PostEvent = function (eName, args) {
        //onsole.debug("分发事件");
        EventManager.eventDispatcher.event(eName, args);
    };
    EventManager.prototype.AddEventListener = function (eName, caller, listener, args) {
        //console.log("侦听事件",eName);
        EventManager.eventDispatcher.on(eName, caller, listener, args);
    };
    EventManager.prototype.RemoveEventListener = function (eName, caller, listener, once) {
        //console.log("移除事件",eName);
        EventManager.eventDispatcher.off(eName, caller, listener, once);
    };
    EventManager.eventDispatcher = new EventDispatcher();
    return EventManager;
}(EventDispatcher));
exports.default = EventManager;
},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Events;
(function (Events) {
    Events[Events["OnUI_LevelBtn_Clicked"] = 0] = "OnUI_LevelBtn_Clicked";
    Events[Events["OnSpaceEnter"] = 1] = "OnSpaceEnter";
    Events[Events["OnSpaceClicked"] = 2] = "OnSpaceClicked";
    Events[Events["OnSpaceExit"] = 3] = "OnSpaceExit";
    Events[Events["OnCameraDistanceChanged"] = 4] = "OnCameraDistanceChanged";
    Events[Events["OnDepTreeItemClicked"] = 5] = "OnDepTreeItemClicked";
})(Events = exports.Events || (exports.Events = {}));
},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MtHttp_1 = require("./Network/MtHttp");
var NameConfig_1 = require("./Configure/NameConfig");
var DataManager_1 = require("./Data/DataManager");
var Handler = Laya.Handler;
var MainUI_1 = require("./MainUI");
var BIMManager_1 = require("./BIM/BIMManager");
var CameraManager_1 = require("./Camera/CameraManager");
var EventManager_1 = require("./Events/EventManager");
var Events_1 = require("./Events/Events");
var GameManager = /** @class */ (function () {
    function GameManager() {
        this.LoginLock = false;
        this.Http = new MtHttp_1.default(NameConfig_1.default.ip, NameConfig_1.default.port);
        this.BIM = new BIMManager_1.default();
        this.Data = new DataManager_1.default();
        this.Camera = new CameraManager_1.default();
        this.AddEvents();
    }
    GameManager.Instance = function () {
        if (GameManager._instance == null) {
            GameManager._instance = new GameManager();
        }
        return GameManager._instance;
    };
    GameManager.prototype.AddEvents = function () {
        EventManager_1.default.Instance().AddEventListener(Events_1.Events.OnUI_LevelBtn_Clicked.toString(), this, this.OnLevelBtnClicked);
    };
    GameManager.prototype.OnLevelBtnClicked = function (levelName) {
        this.BIM.HideOneLevelFloors(this.BIM.CurrenLevel);
        this.BIM.ShowOneLevelFloors(levelName);
    };
    GameManager.prototype.Login = function () {
        if (this.LoginLock)
            return;
        var longinUrl = this.Http.URL.concat("/IVS/login");
        var postBody = JSON.stringify({ "name": NameConfig_1.default.userName,
            "pwd": NameConfig_1.default.userPassprot,
            "thirdPartyCode": "0" });
        this.Http.post(longinUrl, postBody, this, this.LoginSucceed);
        this.LoginLock = true;
    };
    GameManager.prototype.LoginSucceed = function (e) {
        if (e.state == "succeed") {
            console.debug("Login succeed!");
            this.LoadData();
            //test
            //this.LoadRes();
        }
        else {
            alert(e.msg);
        }
    };
    GameManager.prototype.LoadData = function () {
        this.Data.Init();
    };
    GameManager.prototype.LoadRes = function () {
        var _this = this;
        Laya.loader.load("res/JsonFile/res_pumchw.json", Handler.create(this, function (data) {
            var resUrl = new Array();
            data.url.forEach(function (element) {
                resUrl.push(_this.Http.URL.concat("/Patch/res/", element));
            });
            _this.BIM.LoadRes(resUrl, function () {
                _this.InitMainUI();
                _this.BIM.ShowOneLevelFloors(_this.BIM.CurrenLevel);
            });
        }));
    };
    GameManager.prototype.Init3DScene = function () {
        if (this.IsInitScene)
            return;
        Laya3D.init(0, 0, true);
        Laya.stage.scaleMode = Laya.Stage.SCALE_FULL;
        Laya.stage.screenMode = Laya.Stage.SCREEN_NONE;
        //Laya.Stat.show();
        this.MainScene = new Laya.Scene3D();
        Laya.stage.addChild(this.MainScene);
        this.Camera.InitCamera();
        this.IsInitScene = true;
    };
    GameManager.prototype.InitMainUI = function () {
        this.MainUI = new MainUI_1.default();
        Laya.stage.addChild(this.MainUI);
        this.MainUI.CreateTree(this.Data.GetOneLevelOrganizations(this.BIM.CurrenLevel));
        this.MainUI.CreateLevels(this.BIM.Levels);
    };
    return GameManager;
}());
exports.default = GameManager;
},{"./BIM/BIMManager":3,"./Camera/CameraManager":4,"./Configure/NameConfig":10,"./Data/DataManager":11,"./Events/EventManager":15,"./Events/Events":16,"./MainUI":19,"./Network/MtHttp":20}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var GameManager_1 = require("./GameManager");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        GameUI._instance = _this;
        _this.GameManager = GameManager_1.default.Instance();
        _this.UIAdapter();
        _this.LoginBtn.on(Laya.Event.CLICK, _this, _this.OnLoginBtnClicked);
        Laya.stage.on(Laya.Event.RESIZE, Laya.stage, function () {
            _this.UIAdapter();
        });
        return _this;
    }
    //Enable初始化
    GameUI.prototype.onEnable = function () {
    };
    //登陆
    GameUI.prototype.OnLoginBtnClicked = function (e) {
        //GameManager.Instance().Login();
        this.GameManager.Login();
    };
    //设置资源加载进度
    GameUI.prototype.SetLoadPercent = function (percent) {
        this.ProgressBar.visible = true;
        this.ProgressBar.value = percent;
        if (percent == 1) {
            this.DestroyScene();
        }
    };
    GameUI.prototype.DestroyScene = function () {
        //this.destroy();
        Laya.Scene.close(this.scene);
    };
    //UI适配
    GameUI.prototype.UIAdapter = function () {
        var width = Laya.Browser.width;
        var height = Laya.Browser.height;
        this.width = width;
        this.height = height;
        this.Background.width = width;
        this.Background.height = height;
        this.Title.pos(width / 2, height / 4);
        this.LoginBtn.pos(width / 2, height / 3 + 100);
        this.ProgressBar.pos(width / 2, height * 3 / 4);
        this.ProgressBar.visible = false;
    };
    return GameUI;
}(layaMaxUI_1.ui.portal.LoadingUI));
exports.default = GameUI;
},{"./../ui/layaMaxUI":25,"./GameManager":17}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var GameManager_1 = require("./GameManager");
var BIMManager_1 = require("./BIM/BIMManager");
var Button = Laya.Button;
var Common_1 = require("./Common/Common");
var EventManager_1 = require("./Events/EventManager");
var Events_1 = require("./Events/Events");
var UITree_1 = require("./UI/Tree/UITree");
var UITreeItem_1 = require("./UI/Tree/UITreeItem");
var MainUI = /** @class */ (function (_super) {
    __extends(MainUI, _super);
    function MainUI() {
        var _this = _super.call(this) || this;
        _this.m_isShowMultiBtns = true;
        _this.m_isShowAllLevels = false;
        _this.CurrentLabelType = BIMManager_1.LabelType.Usage;
        _this.m_orgLevel1 = new Laya.WeakObject();
        _this.m_orgLevel2 = new Laya.WeakObject();
        _this.m_level1arrs = new Array();
        return _this;
    }
    MainUI.prototype.onEnable = function () {
        var _this = this;
        MainUI._instance = this;
        this.UIAdapter();
        this.AddEvent();
        this.m_is2D = false;
        this.m_levelBtns = new Array();
        this.m_levelPos = new Laya.WeakObject();
        Laya.stage.on(Laya.Event.RESIZE, Laya.stage, function () {
            _this.UIAdapter();
        });
    };
    MainUI.prototype.UIAdapter = function () {
        var _this = this;
        var width = Laya.stage.width;
        var height = Laya.stage.height;
        this.width = width;
        this.height = height;
        this._2D3DBtn.pos(100, height - 100);
        this.DepBtn.pos(100, height / 3);
        this.UsageBtn.pos(100, height / 3 + 150);
        this.AreaBtn.pos(100, height / 3 + 300);
        this.MultiBtn.pos(width - 150, height - 180);
        this.AllBtn.pos(width - 150, height - 100);
        //重新刷新levelbtn
        if (this.m_levelBtns && this.m_levelBtns.length != 0) {
            var index_1 = 0;
            this.m_levelBtns.forEach(function (element) {
                _this.m_levelBtnOriPos = new Laya.Vector2(_this.MultiBtn.x, _this.MultiBtn.y);
                element.pos(_this.MultiBtn.x, _this.MultiBtn.y - ++index_1 * 80);
                if (_this.m_levelPos.has(element)) {
                    _this.m_levelPos.del(element);
                    _this.m_levelPos.set(element, new Laya.Vector2(element.x, element.y));
                }
            });
        }
    };
    //应该有RemoveEvenet
    MainUI.prototype.AddEvent = function () {
        var _this = this;
        this._2D3DBtn.on(Laya.Event.CLICK, null, function (e) {
            _this._2D3DBtnClicked();
            e.stopPropagation();
        });
        this.DepBtn.on(Laya.Event.CLICK, null, function (e) {
            GameManager_1.default.Instance().BIM.RefreshLabelContent(BIMManager_1.LabelType.Depart);
            _this.CurrentLabelType = BIMManager_1.LabelType.Depart;
            e.stopPropagation();
        });
        this.UsageBtn.on(Laya.Event.CLICK, null, function (e) {
            GameManager_1.default.Instance().BIM.RefreshLabelContent(BIMManager_1.LabelType.Usage);
            _this.CurrentLabelType = BIMManager_1.LabelType.Usage;
            e.stopPropagation();
        });
        this.AreaBtn.on(Laya.Event.CLICK, null, function (e) {
            GameManager_1.default.Instance().BIM.RefreshLabelContent(BIMManager_1.LabelType.Area);
            e.stopPropagation();
        });
        this.MultiBtn.on(Laya.Event.CLICK, null, function (e) {
            _this.ShowLevels(_this.m_isShowMultiBtns);
            e.stopPropagation();
        });
        this.AllBtn.on(Laya.Event.CLICK, null, function (e) {
            _this.m_isShowAllLevels = !_this.m_isShowAllLevels;
            GameManager_1.default.Instance().BIM.ShowAllLevels(_this.m_isShowAllLevels);
            e.stopPropagation();
        });
    };
    MainUI.prototype.CreateLevels = function (levels) {
        var _this = this;
        if (levels == null || levels.length == 0)
            return;
        this.m_levelBtns.splice(0);
        var underGroundLevel = new Array();
        var upGroundLevel = new Array();
        levels.forEach(function (element) {
            if (element.length != 15) {
                console.debug("level name is not legal!");
                return;
            }
            if (Common_1.default.GetPurLevel(element).match("B") != null) {
                underGroundLevel.push(element);
            }
            else {
                upGroundLevel.push(element);
            }
        });
        underGroundLevel.sort(function (a, b) {
            return a.charAt(14) > b.charAt(14) ? -1 : 1;
        });
        upGroundLevel.sort(function (a, b) {
            return a.charAt(14) > b.charAt(14) ? 1 : -1;
        });
        var realLevels = underGroundLevel.concat(upGroundLevel);
        //temp
        var index = 0;
        this.m_levelBtnOriPos = new Laya.Vector2(this.MultiBtn.x, this.MultiBtn.y);
        realLevels.forEach(function (element) {
            _this.CreateOneButton(element, new Laya.Vector2(_this.m_levelBtnOriPos.x, _this.m_levelBtnOriPos.y - ++index * 80));
        });
    };
    MainUI.prototype.CreateOneButton = function (levelCode, pos) {
        if (levelCode == null)
            return;
        var purLevel = Common_1.default.GetPurLevel(levelCode);
        var lvlBtn = new Button("comp/button.png");
        lvlBtn.name = levelCode;
        lvlBtn.width = 80;
        lvlBtn.height = 60;
        lvlBtn.pos(pos.x, pos.y);
        lvlBtn.labelSize = 30;
        lvlBtn.label = purLevel.charAt(0) + purLevel.charAt(3);
        lvlBtn.on(Laya.Event.CLICK, null, function (e, lvlName) {
            e.stopPropagation();
            EventManager_1.default.Instance().PostEvent(Events_1.Events.OnUI_LevelBtn_Clicked.toString(), lvlBtn.name);
        });
        Laya.stage.addChild(lvlBtn);
        this.m_levelBtns.push(lvlBtn);
        this.m_levelPos.set(lvlBtn, new Laya.Vector2(lvlBtn.x, lvlBtn.y));
    };
    MainUI.prototype.ShowLevels = function (b) {
        var _this = this;
        this.m_isShowMultiBtns = !b;
        if (!this.m_isShowMultiBtns) {
            this.MultiBtn.label = "展开";
            this.m_levelBtns.forEach(function (element) {
                Laya.Tween.to(element, { x: _this.m_levelBtnOriPos.x, y: _this.m_levelBtnOriPos.y }, 50, Laya.Ease.linearIn, Laya.Handler.create(_this, function () {
                    element.visible = _this.m_isShowMultiBtns;
                }));
            });
        }
        else {
            this.MultiBtn.label = "折叠";
            this.m_levelBtns.forEach(function (element) {
                element.visible = _this.m_isShowMultiBtns;
                var pos = _this.m_levelPos.get(element);
                Laya.Tween.to(element, { x: pos.x, y: pos.y }, 50);
            });
        }
    };
    MainUI.prototype._2D3DBtnClicked = function () {
        this.m_is2D = !this.m_is2D;
        GameManager_1.default.Instance().Camera.ResetCamera(this.m_is2D);
        if (this.m_is2D) {
            this._2D3DBtn.label = "3D";
        }
        else {
            this._2D3DBtn.label = "2D";
        }
    };
    MainUI.prototype.CreateTree = function (orgs) {
        //TEMP:默认为3级
        var _this = this;
        var level1;
        var level2;
        var level3;
        orgs.forEach(function (element) {
            switch (element.length) {
                case 2:
                    if (!_this.m_orgLevel1.has(element)) {
                        _this.m_orgLevel1.set(element, new Array());
                        _this.m_level1arrs.push(element);
                    }
                    break;
                case 4:
                    level1 = element.substr(0, 2);
                    level2 = element.substr(0, 4);
                    if (!_this.m_orgLevel1.has(level1)) {
                        _this.m_orgLevel1.set(level1, new Array());
                        _this.m_level1arrs.push(level1);
                    }
                    var b = _this.m_orgLevel1.get(level1).some(function (code) { return code == level2; });
                    if (!b)
                        _this.m_orgLevel1.get(level1).push(level2);
                    break;
                case 6:
                    level1 = element.substr(0, 2);
                    level2 = element.substr(0, 4);
                    level3 = element.substr(0, 6);
                    if (!_this.m_orgLevel1.has(level1)) {
                        _this.m_orgLevel1.set(level1, new Array());
                        _this.m_level1arrs.push(level1);
                    }
                    var b2 = _this.m_orgLevel1.get(level1).some(function (code) { return code == level2; });
                    if (!b2)
                        _this.m_orgLevel1.get(level1).push(level2);
                    if (!_this.m_orgLevel2.has(level2)) {
                        _this.m_orgLevel2.set(level2, new Array());
                    }
                    var b3 = _this.m_orgLevel2.get(level2).some(function (code) { return code == level3; });
                    if (!b3)
                        _this.m_orgLevel2.get(level2).push(level3);
                    break;
            }
        });
        var uitree = new UITree_1.default();
        var treedata = new Array();
        this.m_level1arrs.forEach(function (lvl1) {
            var root = _this.createTreeItem(lvl1, GameManager_1.default.Instance().Data.GetOneOrganizationName(lvl1), 1, false, null);
            treedata.push(root);
            _this.m_orgLevel1.get(lvl1).forEach(function (lvl2) {
                var isleaf = (!_this.m_orgLevel2.has(lvl2) || _this.m_orgLevel2.get(lvl2).length == 0) ? true : false;
                var level2 = _this.createTreeItem(lvl2, GameManager_1.default.Instance().Data.GetOneOrganizationName(lvl2), 2, isleaf, lvl1);
                root.children.push(level2);
                if (_this.m_orgLevel2.has(lvl2)) {
                    _this.m_orgLevel2.get(lvl2).forEach(function (lvl3) {
                        var level3 = _this.createTreeItem(lvl3, GameManager_1.default.Instance().Data.GetOneOrganizationName(lvl3), 3, true, lvl2);
                        level2.children.push(level3);
                    });
                }
            });
        });
        uitree.InitTree(treedata, null, new Laya.Vector2(Laya.Browser.width - 500, 10), "#FFD700");
        uitree.OnValueChanged = function (data, b) {
            _this.OnValueChanged(data, b);
        };
    };
    MainUI.prototype.createTreeItem = function (code, name, level, isLeaf, parentCode) {
        var item = new UITreeItem_1.TreeItemData();
        item.code = code;
        item.name = name;
        item.level = level;
        item.isLeaf = isLeaf;
        item.parentCode = parentCode;
        item.children = new Array();
        return item;
    };
    MainUI.prototype.OnValueChanged = function (arr, b) {
        var str = new Array();
        arr.forEach(function (element) {
            str.push(element.ItemData.code);
        });
        EventManager_1.default.Instance().PostEvent(Events_1.Events.OnDepTreeItemClicked.toString(), [str, b]);
    };
    MainUI._instance = null;
    return MainUI;
}(layaMaxUI_1.ui.MainScene.MainSceneUI));
exports.default = MainUI;
},{"./../ui/layaMaxUI":25,"./BIM/BIMManager":3,"./Common/Common":5,"./Events/EventManager":15,"./Events/Events":16,"./GameManager":17,"./UI/Tree/UITree":23,"./UI/Tree/UITreeItem":24}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MtProtocalCommon_1 = require("./MtProtocalCommon");
var MtHttp = /** @class */ (function () {
    function MtHttp(ip, port) {
        this.m_ip = ip;
        this.m_port = port;
        this.URL = "http://" + this.m_ip + ":" + this.m_port;
        this.m_http = new Laya.HttpRequest;
        this.m_protocalCommon = new MtProtocalCommon_1.default();
    }
    MtHttp.prototype.get = function (url, caller, callback) {
        this.m_caller = caller;
        this.m_callback = callback;
        this.m_http.once(Laya.Event.COMPLETE, this, this.onHttpRequestComplete);
        this.m_http.once(Laya.Event.ERROR, this, this.onHttpRequestError);
        this.m_http.send(url, null, 'get', 'text');
        return this;
    };
    MtHttp.prototype.post = function (url, data, caller, callback) {
        this.m_caller = caller;
        this.m_callback = callback;
        this.m_http.once(Laya.Event.COMPLETE, this, this.onHttpRequestComplete);
        this.m_http.once(Laya.Event.ERROR, this, this.onHttpRequestError);
        this.m_http.send(url, data, 'post', 'json', this.m_protocalCommon.CommonHeader);
        return this;
    };
    MtHttp.prototype.onHttpRequestError = function (e) {
        this.m_callback.apply(this.m_caller, [{ state: "failed", msg: e }]);
    };
    MtHttp.prototype.onHttpRequestComplete = function (e) {
        this.m_callback.apply(this.m_caller, [{ state: "succeed", data: this.m_http.data }]);
    };
    return MtHttp;
}());
exports.default = MtHttp;
},{"./MtProtocalCommon":21}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//协议--请求头文件
var ProtocolCommon = /** @class */ (function () {
    function ProtocolCommon() {
        this.AccessControlAllowOrigin = "Access-Control-Allow-Origin";
        this.AccessControlAllowOriginValue = "*";
        this.AccessControlAllowHeaders = "Access-Control-Allow-Headers";
        this.AccessControlAllowHeadersValue = "Content-Type,Content-Length, Authorization, Accept,X-Requested-With";
        this.AccessControlAllowMethods = "Access-Control-Allow-Methods";
        this.AccessControlAllowMethodsValue = "POST, GET, OPTIONS,DELETE,PUT";
        this.XAuthTokenField = "X-Auth-Token";
        this.XAuthTokenFieldValue = "open-sesame";
        this.AcceptField = "Accept";
        this.ContentTypeFieldValue = "application/json";
        this.ContentTypeField = "Content-Type";
        this.TokenField = "cookie";
        this.CommonHeader = new Array();
        this.CommonHeader.push(this.AccessControlAllowOrigin, this.AccessControlAllowOriginValue);
        this.CommonHeader.push(this.AccessControlAllowHeaders, this.AccessControlAllowHeadersValue);
        this.CommonHeader.push(this.AccessControlAllowMethods, this.AccessControlAllowMethodsValue);
        this.CommonHeader.push(this.XAuthTokenField, this.XAuthTokenFieldValue);
        this.CommonHeader.push(this.AcceptField, this.ContentTypeFieldValue);
        this.CommonHeader.push(this.ContentTypeField, this.ContentTypeFieldValue);
    }
    ProtocolCommon.prototype.SetCookies = function (cookie) {
        cookie = cookie;
    };
    return ProtocolCommon;
}());
exports.default = ProtocolCommon;
},{}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Handler = laya.utils.Handler;
var GameUI_1 = require("../GameUI");
var ResManager = /** @class */ (function () {
    function ResManager() {
        this.ResNames = new Array();
        this.ResEnitityDic = new Laya.WeakObject();
    }
    ResManager.Instance = function () {
        if (ResManager._instance == null) {
            ResManager._instance = new ResManager();
        }
        return ResManager._instance;
    };
    //加载多个资源
    ResManager.prototype.LoadPrefabAssets = function (resNames, finished) {
        var _this = this;
        if (resNames == null || resNames.length == 0)
            return;
        this.ResNames = resNames;
        Laya.loader.create(resNames, Handler.create(this, function () {
            _this.ResNames.forEach(function (element) {
                var res = Laya.loader.getRes(element.url);
                if (!_this.ResEnitityDic.has(element.url)) {
                    _this.ResEnitityDic.set(element.url, res);
                }
                if (finished != null) {
                    var params = [element.url, res];
                    finished.runWith(params);
                }
            });
        }), Handler.create(this, function (p) {
            _this.SetLoadPercent(p);
        }));
    };
    ResManager.prototype.GetOneAsset = function (url) {
        if (url == null)
            return null;
        if (this.ResEnitityDic.has(url)) {
            return this.ResEnitityDic.get(url);
        }
        else {
            return null;
        }
    };
    ResManager.prototype.ReleaseOneAsset = function (url) {
        if (url == null)
            return;
        var res = this.GetOneAsset(url);
        if (res != null) {
            //待测试，是否释放了内存
            res.destroy(true);
        }
    };
    //待测试
    ResManager.prototype.ReleaseAllAssets = function () {
        var _this = this;
        if (this.ResEnitityDic != null) {
            this.ResNames.forEach(function (element) {
                if (_this.ResEnitityDic.has(element)) {
                    _this.ResEnitityDic.get(element).destroy(true);
                }
            });
        }
    };
    ResManager.prototype.SetLoadPercent = function (p) {
        GameUI_1.default._instance.SetLoadPercent(p);
    };
    return ResManager;
}());
exports.default = ResManager;
},{"../GameUI":18}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UITreeItem_1 = require("./UITreeItem");
var Handler = Laya.Handler;
/**
 * 创建简易树
 */
var UITree = /** @class */ (function () {
    function UITree() {
        this.m_ItemCodes = new Array();
        this.m_treeItemsDic = new Laya.WeakObject();
        this.m_valueChangedItem = new Array();
    }
    UITree.prototype.InitTree = function (items, style, treePos, treeBgColor, uitreeAtlas) {
        var _this = this;
        if (items == null || items.length == 0)
            return;
        var defaultPath = "res/atlas/tree.atlas";
        var _uitreeAtlas = uitreeAtlas == null ? defaultPath : uitreeAtlas;
        Laya.loader.load(_uitreeAtlas, Handler.create(this, function () {
            _this.ClearTreeItemDic();
            //Temp，用VBox制作一个Tree
            _this.m_tree = new Laya.VBox();
            _this.m_tree.x = treePos == null ? 0 : treePos.x;
            _this.m_tree.y = treePos == null ? 0 : treePos.y;
            _this.m_tree.bgColor = treeBgColor == null ? "#ffffff" : treeBgColor;
            if (treeBgColor != null) {
                if (style == null)
                    style = new UITreeItem_1.TreeItemStyle();
                style.ItemColor = treeBgColor;
            }
            Laya.stage.addChild(_this.m_tree);
            items.forEach(function (element) {
                _this.AddItem(element, style);
            });
            _this.RefreshItemPosition();
        }));
    };
    UITree.prototype.AddItem = function (item, style) {
        var _this = this;
        if (item == null)
            return;
        var treeItem = new UITreeItem_1.default();
        treeItem.InitTreeItem(item, style);
        treeItem.OnArrowClick = (function (item, b) { _this.OnArrowClicked(item, b); });
        treeItem.OnCheckBoxClick = (function (item, b) { _this.OnCheckBoxClicked(item, b); });
        this.m_ItemCodes.push(item.code);
        if (!this.m_treeItemsDic.has(item.code))
            this.m_treeItemsDic.set(item.code, treeItem);
        this.m_tree.addChild(treeItem.TreeItem);
        if (!item.isLeaf) {
            item.children.forEach(function (element) {
                _this.AddItem(element, style);
            });
        }
    };
    UITree.prototype.OnArrowClicked = function (item, b) {
        if (item == null)
            return;
        this.RefreshArrowStatus(item.ItemData.code, b);
        this.RefreshItemPosition();
    };
    UITree.prototype.OnCheckBoxClicked = function (item, b) {
        if (item == null)
            return;
        this.m_valueChangedItem.splice(0);
        if (!item.ItemData.isLeaf)
            this.RefreshCheckStatusByParent(item.ItemData, b);
        else
            this.m_valueChangedItem.push(item);
        this.RefreshCheckStatusByChildren(item.ItemData);
        if (this.OnValueChanged)
            this.OnValueChanged(this.m_valueChangedItem, b);
    };
    UITree.prototype.RefreshCheckStatusByParent = function (data, b) {
        var _this = this;
        if (data == null || !this.m_treeItemsDic.has(data.code))
            return;
        var treeItem = this.m_treeItemsDic.get(data.code);
        if (treeItem.ItemData.children != null) {
            treeItem.ItemData.children.forEach(function (element) {
                if (_this.m_treeItemsDic.has(element.code)) {
                    var child = _this.m_treeItemsDic.get(element.code);
                    child.SetCheckboxStatus(b ? UITreeItem_1.CheckStatus.check : UITreeItem_1.CheckStatus.uncheck);
                    if (child.ItemData.isLeaf)
                        _this.m_valueChangedItem.push(child);
                    _this.RefreshCheckStatusByParent(child.ItemData, b);
                }
            });
        }
    };
    UITree.prototype.RefreshCheckStatusByChildren = function (data) {
        if (data.level == 1)
            return;
        var check = 0;
        var partly = 0;
        var parent = this.m_treeItemsDic.has(data.parentCode) ? this.m_treeItemsDic.get(data.parentCode) : null;
        if (parent) {
            parent.ItemData.children.forEach(function (element) {
                switch (element.status) {
                    case UITreeItem_1.CheckStatus.check:
                        check++;
                        break;
                    case UITreeItem_1.CheckStatus.partly:
                        partly++;
                        break;
                }
            });
            if (partly > 0) {
                parent.SetCheckboxStatus(UITreeItem_1.CheckStatus.partly);
            }
            else {
                if (check == 0) {
                    parent.SetCheckboxStatus(UITreeItem_1.CheckStatus.uncheck);
                    this.RefreshCheckStatusByChildren(parent.ItemData);
                }
                else if (check == parent.ItemData.children.length) {
                    parent.SetCheckboxStatus(UITreeItem_1.CheckStatus.check);
                    this.RefreshCheckStatusByChildren(parent.ItemData);
                }
                else {
                    parent.SetCheckboxStatus(UITreeItem_1.CheckStatus.partly);
                }
            }
        }
    };
    UITree.prototype.RefreshArrowStatus = function (code, b) {
        var _this = this;
        if (code == null || !this.m_treeItemsDic.has(code))
            return;
        var treeItem = this.m_treeItemsDic.get(code);
        treeItem.ItemData.children.forEach(function (element) {
            if (_this.m_treeItemsDic.has(element.code)) {
                var child = _this.m_treeItemsDic.get(element.code);
                child.TreeItem.visible = b;
                if (!b && !child.ItemData.isLeaf) {
                    _this.RefreshArrowStatus(child.ItemData.code, b);
                    child.SetArrowStatus(b);
                }
            }
        });
    };
    UITree.prototype.RefreshItemPosition = function () {
        var _this = this;
        var treelist = new Array();
        this.m_ItemCodes.forEach(function (element) {
            var item = _this.m_treeItemsDic.get(element);
            if (item.TreeItem.visible) {
                treelist.push(item);
            }
        });
        for (var i = 0; i < treelist.length; i++) {
            treelist[i].TreeItem.y = i * 50;
        }
        this.m_tree.height = treelist.length * 50;
    };
    UITree.prototype.ClearTreeItemDic = function () {
        var _this = this;
        this.m_ItemCodes.forEach(function (element) {
            if (_this.m_treeItemsDic.has(element))
                _this.m_treeItemsDic.del(element);
        });
    };
    return UITree;
}());
exports.default = UITree;
},{"./UITreeItem":24}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TreeItemData = /** @class */ (function () {
    function TreeItemData() {
    }
    return TreeItemData;
}());
exports.TreeItemData = TreeItemData;
var TreeItemStyle = /** @class */ (function () {
    function TreeItemStyle() {
    }
    return TreeItemStyle;
}());
exports.TreeItemStyle = TreeItemStyle;
var TreeStyle;
(function (TreeStyle) {
    TreeStyle[TreeStyle["Normal"] = 0] = "Normal";
    TreeStyle[TreeStyle["Legend"] = 1] = "Legend";
})(TreeStyle = exports.TreeStyle || (exports.TreeStyle = {}));
var CheckStatus;
(function (CheckStatus) {
    CheckStatus[CheckStatus["check"] = 0] = "check";
    CheckStatus[CheckStatus["partly"] = 1] = "partly";
    CheckStatus[CheckStatus["uncheck"] = 2] = "uncheck";
})(CheckStatus = exports.CheckStatus || (exports.CheckStatus = {}));
var UITreeItem = /** @class */ (function () {
    function UITreeItem() {
        this.m_treeItemWidth = 300;
        this.m_treeItemHeight = 50;
        this.m_treeItemIntentLevel = 30;
        this.m_treeItemInnerSpace = 10;
        this.m_treeItemBgColor = "#ffffff";
        this.m_labelColor = "#000000";
        this.m_fontsize = 30;
        this.m_align = "left";
    }
    /** *******************Public Methods*************************************************/
    UITreeItem.prototype.InitTreeItem = function (data, itemStyle) {
        if (data == null)
            return;
        this.ItemData = data;
        this.SetTreeItemStyle(itemStyle);
        this.CreateArrow();
        this.CreateCheckBox();
        this.CreateLabel();
        this.CreateHBox();
    };
    UITreeItem.prototype.SetTreeItemStyle = function (style) {
        if (style == null)
            return;
        this.m_treeItemWidth = style.ItemWidth == null ? this.m_treeItemWidth : style.ItemWidth;
        this.m_treeItemHeight = style.ItemHeigth == null ? this.m_treeItemHeight : style.ItemHeigth;
        this.m_treeItemIntentLevel = style.ItemIntentLevel == null ? this.m_treeItemIntentLevel : style.ItemIntentLevel;
        this.m_treeItemInnerSpace = style.ItemInnerSpace == null ? this.m_treeItemInnerSpace : style.ItemInnerSpace;
        this.m_treeItemBgColor = style.ItemColor == null ? this.m_treeItemBgColor : style.ItemColor;
        this.m_labelColor = style.LabelColor == null ? this.m_labelColor : style.LabelColor;
        this.m_fontsize = style.LabelFontsize == null ? this.m_fontsize : style.LabelFontsize;
        this.m_align = style.LabelAlign == null ? this.m_align : style.LabelAlign;
    };
    UITreeItem.prototype.SetArrowStatus = function (b) {
        this.ItemData.arrowStatus = b;
        if (this.ItemData.arrowStatus) {
            this.Arrow.index = 1;
        }
        else {
            this.Arrow.index = 0;
        }
    };
    UITreeItem.prototype.SetCheckboxStatus = function (status) {
        switch (status) {
            case CheckStatus.check:
                this.CheckBox.index = 2;
                this.ItemData.status = CheckStatus.check;
                break;
            case CheckStatus.partly:
                this.CheckBox.index = 1;
                this.ItemData.status = CheckStatus.partly;
                break;
            case CheckStatus.uncheck:
                this.CheckBox.index = 0;
                this.ItemData.status = CheckStatus.uncheck;
                break;
        }
    };
    UITreeItem.prototype.SetContent = function (content) {
        this.Label.text = content;
    };
    /****************************TreeItem**************************************************/
    UITreeItem.prototype.CreateHBox = function (intentLevel) {
        this.TreeItem = new Laya.HBox();
        this.TreeItem.name = "treeItem";
        this.TreeItem.space = this.m_treeItemInnerSpace;
        this.TreeItem.width = this.m_treeItemWidth;
        this.TreeItem.height = this.m_treeItemHeight;
        if (this.m_treeItemBgColor.length > 7) {
            this.m_treeItemBgColor = this.m_treeItemBgColor.substr(0, 7) + "00";
        }
        this.TreeItem.bgColor = this.m_treeItemBgColor;
        this.TreeItem.x = this.m_treeItemIntentLevel * (this.ItemData.level - 1);
        this.TreeItem.addChild(this.Arrow);
        this.TreeItem.addChild(this.CheckBox);
        this.TreeItem.addChild(this.Label);
        Laya.stage.addChild(this.TreeItem);
    };
    /** ***********************arrow*******************************************************/
    UITreeItem.prototype.CreateArrow = function () {
        var _this = this;
        var arrowRes = "tree/arrow.png";
        this.Arrow = new Laya.Clip(arrowRes, 1, 2);
        this.Arrow.width = this.m_treeItemHeight - 20;
        this.Arrow.height = this.m_treeItemHeight - 20;
        this.Arrow.y = 10;
        this.Arrow.clipY = 2;
        this.Arrow.name = "arrow";
        if (this.ItemData.isLeaf)
            this.Arrow.visible = false;
        this.SetArrowStatus(true);
        this.Arrow.on(Laya.Event.CLICK, this, function (e) {
            e.stopPropagation();
            _this.ItemData.arrowStatus = !_this.ItemData.arrowStatus;
            _this.SetArrowStatus(_this.ItemData.arrowStatus);
            if (_this.OnArrowClick)
                _this.OnArrowClick(_this, _this.ItemData.arrowStatus);
        });
        Laya.stage.addChild(this.Arrow);
    };
    /******************CheckBox************************************************************/
    UITreeItem.prototype.CreateCheckBox = function () {
        var _this = this;
        this.CheckBox = new Laya.Clip("tree/checkbox.png", 1, 2);
        this.CheckBox.width = this.m_treeItemHeight - 20;
        this.CheckBox.height = this.m_treeItemHeight - 20;
        this.CheckBox.y = 10;
        this.CheckBox.clipY = 3;
        this.CheckBox.name = "checkbox";
        this.SetCheckboxStatus(CheckStatus.check); //默认全选
        this.CheckBox.on(Laya.Event.CLICK, this, function (e) {
            e.stopPropagation();
            var b = _this.ItemData.status == CheckStatus.uncheck ? false : true;
            _this.SetCheckboxStatus(!b ? CheckStatus.check : CheckStatus.uncheck);
            if (_this.OnCheckBoxClick)
                _this.OnCheckBoxClick(_this, !b);
        });
        Laya.stage.addChild(this.CheckBox);
    };
    /****************Label*****************************************************************/
    UITreeItem.prototype.CreateLabel = function () {
        this.Label = new Laya.Label();
        this.Label.name = "label";
        this.Label.height = this.m_treeItemHeight;
        this.Label.align = this.m_align;
        this.Label.valign = "middle";
        this.Label.fontSize = this.m_fontsize;
        this.Label.color = this.m_labelColor;
        this.SetContent(this.ItemData.name);
        Laya.stage.addChild(this.Label);
    };
    return UITreeItem;
}());
exports.default = UITreeItem;
},{}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var MainScene;
    (function (MainScene) {
        var MainSceneUI = /** @class */ (function (_super) {
            __extends(MainSceneUI, _super);
            function MainSceneUI() {
                return _super.call(this) || this;
            }
            MainSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(MainSceneUI.uiView);
            };
            MainSceneUI.uiView = { "type": "Scene", "props": { "width": 600, "height": 900 }, "compId": 2, "child": [{ "type": "Button", "props": { "y": 271, "x": 23, "width": 80, "var": "DepBtn", "skin": "comp/button.png", "labelSize": 30, "label": "科室", "height": 60 }, "compId": 7 }, { "type": "Button", "props": { "y": 355, "x": 23, "width": 80, "var": "UsageBtn", "skin": "comp/button.png", "labelSize": 30, "label": "用途", "height": 60 }, "compId": 8 }, { "type": "Button", "props": { "y": 437, "x": 23, "width": 80, "var": "AreaBtn", "skin": "comp/button.png", "labelSize": 30, "label": "面积", "height": 60 }, "compId": 9 }, { "type": "Button", "props": { "y": 600, "x": 476, "width": 80, "var": "MultiBtn", "skin": "comp/button.png", "labelSize": 30, "label": "折叠", "height": 60 }, "compId": 13 }, { "type": "Button", "props": { "y": 680, "x": 23, "width": 80, "var": "_2D3DBtn", "skin": "comp/button.png", "labelSize": 30, "label": "2D", "height": 60 }, "compId": 14 }, { "type": "Button", "props": { "y": 680, "x": 476, "width": 80, "var": "AllBtn", "skin": "comp/button.png", "labelSize": 30, "label": "全部", "height": 60 }, "compId": 26 }], "loadList": ["comp/button.png"], "loadList3D": [] };
            return MainSceneUI;
        }(Scene));
        MainScene.MainSceneUI = MainSceneUI;
        REG("ui.MainScene.MainSceneUI", MainSceneUI);
    })(MainScene = ui.MainScene || (ui.MainScene = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var portal;
    (function (portal) {
        var LoadingUI = /** @class */ (function (_super) {
            __extends(LoadingUI, _super);
            function LoadingUI() {
                return _super.call(this) || this;
            }
            LoadingUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("portal/Loading");
            };
            return LoadingUI;
        }(Scene));
        portal.LoadingUI = LoadingUI;
        REG("ui.portal.LoadingUI", LoadingUI);
    })(portal = ui.portal || (ui.portal = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2lkZS9MYXlhQWlySURFX2JldGEgKDEpL3Jlc291cmNlcy9hcHAvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsInNyYy9NYWluLnRzIiwic3JjL010R2FtZUNvbmZpZy50cyIsInNyYy9zY3JpcHQvQklNL0JJTU1hbmFnZXIudHMiLCJzcmMvc2NyaXB0L0NhbWVyYS9DYW1lcmFNYW5hZ2VyLnRzIiwic3JjL3NjcmlwdC9Db21tb24vQ29tbW9uLnRzIiwic3JjL3NjcmlwdC9Db21wb25lbnQvQ2FtZXJhTW92ZVNjcmlwdC50cyIsInNyYy9zY3JpcHQvQ29tcG9uZW50L0xhYmVsVXBkYXRlLnRzIiwic3JjL3NjcmlwdC9Db21wb25lbnQvTGlnaHRDb250cm9sLnRzIiwic3JjL3NjcmlwdC9Db21wb25lbnQvUmF5U2VsZWN0b3IudHMiLCJzcmMvc2NyaXB0L0NvbmZpZ3VyZS9OYW1lQ29uZmlnLnRzIiwic3JjL3NjcmlwdC9EYXRhL0RhdGFNYW5hZ2VyLnRzIiwic3JjL3NjcmlwdC9EYXRhL1RhYmxlQklNU3BhY2UudHMiLCJzcmMvc2NyaXB0L0RhdGEvVGFibGVCSU1Vc2FnZVR5cGUudHMiLCJzcmMvc2NyaXB0L0RhdGEvVGFibGVPcmduaXphdGlvbi50cyIsInNyYy9zY3JpcHQvRXZlbnRzL0V2ZW50TWFuYWdlci50cyIsInNyYy9zY3JpcHQvRXZlbnRzL0V2ZW50cy50cyIsInNyYy9zY3JpcHQvR2FtZU1hbmFnZXIudHMiLCJzcmMvc2NyaXB0L0dhbWVVSS50cyIsInNyYy9zY3JpcHQvTWFpblVJLnRzIiwic3JjL3NjcmlwdC9OZXR3b3JrL010SHR0cC50cyIsInNyYy9zY3JpcHQvTmV0d29yay9NdFByb3RvY2FsQ29tbW9uLnRzIiwic3JjL3NjcmlwdC9SZXNvdXJjZS9SZXNNYW5hZ2VyLnRzIiwic3JjL3NjcmlwdC9VSS9UcmVlL1VJVHJlZS50cyIsInNyYy9zY3JpcHQvVUkvVHJlZS9VSVRyZWVJdGVtLnRzIiwic3Jj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QVEsRUFBQyxHQUFHLEVBQUMsRUFBQyxRQUFRLEVBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLFFBQVEsRUFBQyxPQUFPLEVBQUMsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsT0FBTyxFQUFDLEVBQUUsRUFBQyxLQUFLLEVBQUMsUUFBUSxFQUFDLE1BQU0sRUFBQyxpQkFBaUIsRUFBQyxXQUFXLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBQyxJQUFJLEVBQUMsUUFBUSxFQUFDLEVBQUUsRUFBQyxFQUFDLFFBQVEsRUFBQyxDQUFDLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsT0FBTyxFQUFDLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBQyxFQUFFLEVBQUMsS0FBSyxFQUFDLFVBQVUsRUFBQyxNQUFNLEVBQUMsaUJBQWlCLEVBQUMsV0FBVyxFQUFDLEVBQUUsRUFBQyxPQUFPLEVBQUMsSUFBSSxFQUFDLFFBQVEsRUFBQyxFQUFFLEVBQUMsRUFBQyxRQUFRLEVBQUMsQ0FBQyxFQUFDLEVBQUMsRUFBQyxNQUFNLEVBQUMsUUFBUSxFQUFDLE9BQU8sRUFBQyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxPQUFPLEVBQUMsRUFBRSxFQUFDLEtBQUssRUFBQyxTQUFTLEVBQUMsTUFBTSxFQUFDLGlCQUFpQixFQUFDLFdBQVcsRUFBQyxFQUFFLEVBQUMsT0FBTyxFQUFDLElBQUksRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLEVBQUMsUUFBUSxFQUFDLENBQUMsRUFBQyxFQUFDLEVBQUMsTUFBTSxFQUFDLFFBQVEsRUFBQyxPQUFPLEVBQUMsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsT0FBTyxFQUFDLEVBQUUsRUFBQyxLQUFLLEVBQUMsVUFBVSxFQUFDLE1BQU0sRUFBQyxpQkFBaUIsRUFBQyxXQUFXLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBQyxJQUFJLEVBQUMsUUFBUSxFQUFDLEVBQUUsRUFBQyxFQUFDLFFBQVEsRUFBQyxFQUFFLEVBQUMsRUFBQyxFQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsT0FBTyxFQUFDLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBQyxFQUFFLEVBQUMsS0FBSyxFQUFDLFVBQVUsRUFBQyxNQUFNLEVBQUMsaUJBQWlCLEVBQUMsV0FBVyxFQUFDLEVBQUUsRUFBQyxPQUFPLEVBQUMsSUFBSSxFQUFDLFFBQVEsRUFBQyxFQUFFLEVBQUMsRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLEVBQUMsRUFBQyxNQUFNLEVBQUMsUUFBUSxFQUFDLE9BQU8sRUFBQyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxPQUFPLEVBQUMsRUFBRSxFQUFDLEtBQUssRUFBQyxRQUFRLEVBQUMsTUFBTSxFQUFDLGlCQUFpQixFQUFDLFdBQVcsRUFBQyxFQUFFLEVBQUMsT0FBTyxFQUFDLElBQUksRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLEVBQUMsUUFBUSxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsVUFBVSxFQUFDLENBQUMsaUJBQWlCLENBQUMsRUFBQyxZQUFZLEVBQUMsRUFBRSxFQUFDLENBQUM7WUFNemdDLGtCQUFDO1NBYkQsQUFhQyxDQWJnQyxLQUFLLEdBYXJDO1FBYlkscUJBQVcsY0FhdkIsQ0FBQTtRQUNELEdBQUcsQ0FBQywwQkFBMEIsRUFBQyxXQUFXLENBQUMsQ0FBQztJQUNoRCxDQUFDLEVBaEJnQixTQUFTLEdBQVQsWUFBUyxLQUFULFlBQVMsUUFnQnpCO0FBQUQsQ0FBQyxFQWhCYSxFQUFFLEdBQUYsVUFBRSxLQUFGLFVBQUUsUUFnQmY7QUFDRCxXQUFjLEVBQUU7SUFBQyxJQUFBLE1BQU0sQ0FhdEI7SUFiZ0IsV0FBQSxNQUFNO1FBQ25CO1lBQStCLDZCQUFLO1lBS2hDO3VCQUFlLGlCQUFPO1lBQUEsQ0FBQztZQUN2QixrQ0FBYyxHQUFkO2dCQUNJLGlCQUFNLGNBQWMsV0FBRSxDQUFDO2dCQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDckMsQ0FBQztZQUNMLGdCQUFDO1FBQUQsQ0FWQSxBQVVDLENBVjhCLEtBQUssR0FVbkM7UUFWWSxnQkFBUyxZQVVyQixDQUFBO1FBQ0QsR0FBRyxDQUFDLHFCQUFxQixFQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pDLENBQUMsRUFiZ0IsTUFBTSxHQUFOLFNBQU0sS0FBTixTQUFNLFFBYXRCO0FBQUQsQ0FBQyxFQWJhLEVBQUUsR0FBRixVQUFFLEtBQUYsVUFBRSxRQWFmIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImltcG9ydCBHYW1lQ29uZmlnIGZyb20gXCIuL010R2FtZUNvbmZpZ1wiO1xyXG5jbGFzcyBNYWluIHtcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdC8v5qC55o2uSURF6K6+572u5Yid5aeL5YyW5byV5pOOXHRcdFxyXG5cdFx0aWYgKHdpbmRvd1tcIkxheWEzRFwiXSkgTGF5YTNELmluaXQoR2FtZUNvbmZpZy53aWR0aCwgR2FtZUNvbmZpZy5oZWlnaHQpO1xyXG5cdFx0ZWxzZSBMYXlhLmluaXQoR2FtZUNvbmZpZy53aWR0aCwgR2FtZUNvbmZpZy5oZWlnaHQsIExheWFbXCJXZWJHTFwiXSk7XHJcblx0XHRMYXlhW1wiUGh5c2ljc1wiXSAmJiBMYXlhW1wiUGh5c2ljc1wiXS5lbmFibGUoKTtcclxuXHRcdExheWFbXCJEZWJ1Z1BhbmVsXCJdICYmIExheWFbXCJEZWJ1Z1BhbmVsXCJdLmVuYWJsZSgpO1xyXG5cdFx0TGF5YS5zdGFnZS5zY2FsZU1vZGUgPSBHYW1lQ29uZmlnLnNjYWxlTW9kZTtcclxuXHRcdExheWEuc3RhZ2Uuc2NyZWVuTW9kZSA9IEdhbWVDb25maWcuc2NyZWVuTW9kZTtcclxuXHRcdC8v5YW85a655b6u5L+h5LiN5pSv5oyB5Yqg6L29c2NlbmXlkI7nvIDlnLrmma9cclxuXHRcdExheWEuVVJMLmV4cG9ydFNjZW5lVG9Kc29uID0gR2FtZUNvbmZpZy5leHBvcnRTY2VuZVRvSnNvbjtcclxuXHJcblx0XHQvL+aJk+W8gOiwg+ivlemdouadv++8iOmAmui/h0lEReiuvue9ruiwg+ivleaooeW8j++8jOaIluiAhXVybOWcsOWdgOWinuWKoGRlYnVnPXRydWXlj4LmlbDvvIzlnYflj6/miZPlvIDosIPor5XpnaLmnb/vvIlcclxuXHRcdGlmIChHYW1lQ29uZmlnLmRlYnVnIHx8IExheWEuVXRpbHMuZ2V0UXVlcnlTdHJpbmcoXCJkZWJ1Z1wiKSA9PSBcInRydWVcIikgTGF5YS5lbmFibGVEZWJ1Z1BhbmVsKCk7XHJcblx0XHRpZiAoR2FtZUNvbmZpZy5waHlzaWNzRGVidWcgJiYgTGF5YVtcIlBoeXNpY3NEZWJ1Z0RyYXdcIl0pIExheWFbXCJQaHlzaWNzRGVidWdEcmF3XCJdLmVuYWJsZSgpO1xyXG5cdFx0aWYgKEdhbWVDb25maWcuc3RhdCkgTGF5YS5TdGF0LnNob3coKTtcclxuXHRcdExheWEuYWxlcnRHbG9iYWxFcnJvciA9IHRydWU7XHJcblxyXG5cdFx0Ly/mv4DmtLvotYTmupDniYjmnKzmjqfliLbvvIx2ZXJzaW9uLmpzb27nlLFJREXlj5HluIPlip/og73oh6rliqjnlJ/miJDvvIzlpoLmnpzmsqHmnInkuZ/kuI3lvbHlk43lkI7nu63mtYHnqItcclxuXHRcdExheWEuUmVzb3VyY2VWZXJzaW9uLmVuYWJsZShcInZlcnNpb24uanNvblwiLCBMYXlhLkhhbmRsZXIuY3JlYXRlKHRoaXMsIHRoaXMub25WZXJzaW9uTG9hZGVkKSwgTGF5YS5SZXNvdXJjZVZlcnNpb24uRklMRU5BTUVfVkVSU0lPTik7XHJcblx0fVxyXG5cclxuXHRvblZlcnNpb25Mb2FkZWQoKTogdm9pZCB7XHJcblx0XHQvL+a/gOa0u+Wkp+Wwj+WbvuaYoOWwhO+8jOWKoOi9veWwj+WbvueahOaXtuWAme+8jOWmguaenOWPkeeOsOWwj+WbvuWcqOWkp+WbvuWQiOmbhumHjOmdou+8jOWImeS8mOWFiOWKoOi9veWkp+WbvuWQiOmbhu+8jOiAjOS4jeaYr+Wwj+WbvlxyXG5cdFx0TGF5YS5BdGxhc0luZm9NYW5hZ2VyLmVuYWJsZShcImZpbGVjb25maWcuanNvblwiLCBMYXlhLkhhbmRsZXIuY3JlYXRlKHRoaXMsIHRoaXMub25Db25maWdMb2FkZWQpKTtcclxuXHR9XHJcblxyXG5cdG9uQ29uZmlnTG9hZGVkKCk6IHZvaWQge1xyXG5cdFx0Ly/liqDovb1JREXmjIflrprnmoTlnLrmma9cclxuXHRcdEdhbWVDb25maWcuc3RhcnRTY2VuZSAmJiBMYXlhLlNjZW5lLm9wZW4oR2FtZUNvbmZpZy5zdGFydFNjZW5lKTtcclxuXHR9XHJcbn1cclxuLy/mv4DmtLvlkK/liqjnsbtcclxubmV3IE1haW4oKTtcclxuIiwiLyoqVGhpcyBjbGFzcyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBMYXlhQWlySURFLCBwbGVhc2UgZG8gbm90IG1ha2UgYW55IG1vZGlmaWNhdGlvbnMuICovXHJcbmltcG9ydCBHYW1lVUkgZnJvbSBcIi4vc2NyaXB0L0dhbWVVSVwiXHJcbmltcG9ydCBNYWluVUkgZnJvbSBcIi4vc2NyaXB0L01haW5VSVwiO1xyXG4vKlxyXG4qIOa4uOaIj+WIneWni+WMlumFjee9rjtcclxuKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUNvbmZpZ3tcclxuICAgIHN0YXRpYyB3aWR0aDpudW1iZXI9NjQwO1xyXG4gICAgc3RhdGljIGhlaWdodDpudW1iZXI9MTEzNjtcclxuICAgIHN0YXRpYyBzY2FsZU1vZGU6c3RyaW5nPVwiZnVsbFwiO1xyXG4gICAgc3RhdGljIHNjcmVlbk1vZGU6c3RyaW5nPVwibm9uZVwiO1xyXG4gICAgc3RhdGljIGFsaWduVjpzdHJpbmc9XCJ0b3BcIjtcclxuICAgIHN0YXRpYyBhbGlnbkg6c3RyaW5nPVwibGVmdFwiO1xyXG4gICAgc3RhdGljIHN0YXJ0U2NlbmU6YW55PVwicG9ydGFsL0xvYWRpbmcuc2NlbmVcIjtcclxuICAgIHN0YXRpYyBzY2VuZVJvb3Q6c3RyaW5nPVwiXCI7XHJcbiAgICBzdGF0aWMgZGVidWc6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBzdGF0OmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgcGh5c2ljc0RlYnVnOmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgZXhwb3J0U2NlbmVUb0pzb246Ym9vbGVhbj10cnVlO1xyXG4gICAgY29uc3RydWN0b3IoKXt9XHJcbiAgICBzdGF0aWMgaW5pdCgpe1xyXG4gICAgICAgIHZhciByZWc6IEZ1bmN0aW9uID0gTGF5YS5DbGFzc1V0aWxzLnJlZ0NsYXNzO1xyXG4gICAgICAgIHJlZyhcInNjcmlwdC9HYW1lVUkudHNcIixHYW1lVUkpO1xyXG4gICAgfVxyXG59XHJcbkdhbWVDb25maWcuaW5pdCgpOyIsImltcG9ydCBSZXNNYW5hZ2VyIGZyb20gXCIuLi9SZXNvdXJjZS9SZXNNYW5hZ2VyXCI7XHJcbmltcG9ydCBHYW1lTWFuYWdlciBmcm9tIFwiLi4vR2FtZU1hbmFnZXJcIjtcclxuaW1wb3J0IENvbW1vbiBmcm9tIFwiLi4vQ29tbW9uL0NvbW1vblwiO1xyXG5pbXBvcnQgTmFtZUNvbmZpZyBmcm9tIFwiLi4vQ29uZmlndXJlL05hbWVDb25maWdcIjtcclxuaW1wb3J0IHsgU3BhY2VEYXRhIH0gZnJvbSBcIi4uL0RhdGEvVGFibGVCSU1TcGFjZVwiO1xyXG5pbXBvcnQgRXZlbnRNYW5hZ2VyIGZyb20gXCIuLi9FdmVudHMvRXZlbnRNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IEV2ZW50cyB9IGZyb20gXCIuLi9FdmVudHMvRXZlbnRzXCI7XHJcbmltcG9ydCBMYWJlbFVwZGF0UG9zIGZyb20gXCIuLi9Db21wb25lbnQvTGFiZWxVcGRhdGVcIjtcclxuXHJcbi8qKlxyXG4gKiBCSU3nrqHnkIbnsbvvvIznlKjkuo7liqDovb3jgIHliJ3lp4vljJbmqKHlnovvvJvmqKHlnovmiZPljIXmoLzlvI/kuLoubGjmlofku7bvvIzku6XlsYLkuLrljZXkvY1cclxuICogXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQklNTWFuYWdlcntcclxuXHJcbiAgICBwdWJsaWMgTGV2ZWxzOkFycmF5PHN0cmluZz47XHJcbiAgICBwdWJsaWMgQ3VycmVuTGV2ZWw6c3RyaW5nO1xyXG5cclxuICAgIHByaXZhdGUgbV9zcGFjZURpYzpMYXlhLldlYWtPYmplY3Q7XHJcbiAgICBwcml2YXRlIG1fbGV2ZWxTcHNjZURpYzpMYXlhLldlYWtPYmplY3Q7XHJcbiAgICBwcml2YXRlIG1fbGV2ZWxSZXM6TGF5YS5XZWFrT2JqZWN0O1xyXG5cclxuICAgIHByaXZhdGUgbV8zZGxhYmVsRGlzYXBwZWFyRGlzdGFuY2U6bnVtYmVyID0gODA7XHJcbiAgICBwcml2YXRlIG1fM2RsYWJlbFRvdGFsRGlzYXBwZWFyRGlzdGFuY2U6bnVtYmVyID0gMTgwO1xyXG4gICAgcHJpdmF0ZSBtXzJkbGFiZWxEaXNhcHBlYXJEaXN0YW5jZTpudW1iZXIgPSAxMDA7XHJcbiAgICBwcml2YXRlIG1fMmRsYWJlbFRvdGFsRGlzYXBwZWFyRGlzdGFuY2U6bnVtYmVyID0gMTgwO1xyXG4gIFxyXG4gICAgcHJpdmF0ZSBtX2RlZmF1bHRGbG9vckNvbG9yID0gXCIjREMxNDNDXCI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLm1fc3BhY2VEaWMgPSBuZXcgTGF5YS5XZWFrT2JqZWN0KCk7XHJcbiAgICAgICAgdGhpcy5tX2xldmVsU3BzY2VEaWMgPSBuZXcgTGF5YS5XZWFrT2JqZWN0KCk7XHJcbiAgICAgICAgdGhpcy5tX2xldmVsUmVzID0gbmV3IExheWEuV2Vha09iamVjdCgpO1xyXG4gICAgICAgIHRoaXMuTGV2ZWxzID0gbmV3IEFycmF5PHN0cmluZz4oKTtcclxuXHJcbiAgICAgICAgdGhpcy5BZGRFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBBZGRFdmVudHMoKXtcclxuICAgICAgICBFdmVudE1hbmFnZXIuSW5zdGFuY2UoKS5BZGRFdmVudExpc3RlbmVyKEV2ZW50cy5PbkNhbWVyYURpc3RhbmNlQ2hhbmdlZC50b1N0cmluZygpLHRoaXMsdGhpcy5TaG93SGlkZVRhZ3NCeURpc3RhbmNlKTtcclxuICAgICAgICBFdmVudE1hbmFnZXIuSW5zdGFuY2UoKS5BZGRFdmVudExpc3RlbmVyKEV2ZW50cy5PbkRlcFRyZWVJdGVtQ2xpY2tlZC50b1N0cmluZygpLHRoaXMsdGhpcy5TZXRPbmVMZXZlbEZsb29yQ29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBcclxuICAgICAqIOWKoOi9veaJgOaciealvOWxgui1hOa6kO+8jOW5tuWIneWni+WMlualvOadv++8jOm7mOiupOmakOiXj++8jEdhbWVNYW5hZ2Vy5Lit5byA5ZCv6buY6K6k5bGCXHJcbiAgICAgKiDlm57osIPlh73mlbDoi6XpnIDopoHmiafooYzlpJrmrKHvvIzliJnpnIDopoHlsIZvbmNl572u5Li6ZmFsc2VcclxuICAgICAqIEBwYXJhbSByZXNVcmxcclxuICAgICAqIEBwYXJhbSBvbkNvbXBsZXRlXHJcbiAgICAgKi9cclxuICAgIExvYWRSZXMocmVzVXJsOkFycmF5PGFueT4sb25Db21wbGV0ZT86YW55KXtcclxuICAgICAgICBpZihyZXNVcmw9PW51bGwgfHwgcmVzVXJsLmxlbmd0aCA9PSAwKSBcclxuICAgICAgICAgICAgcmV0dXJuIDtcclxuXHJcbiAgICAgICAgdmFyIGluZGV4Om51bWJlciA9IDA7XHJcblxyXG4gICAgICAgIFJlc01hbmFnZXIuSW5zdGFuY2UoKS5Mb2FkUHJlZmFiQXNzZXRzKHJlc1VybCxMYXlhLkhhbmRsZXIuY3JlYXRlKHRoaXMsKHVybCxyZXMpPT57XHJcblxyXG4gICAgICAgICAgICAvL+WIneWni+WMljNE5Zy65pmv77yM5Yid5aeL5YyW5LiA5qyhXHJcbiAgICAgICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuSW5pdDNEU2NlbmUoKTtcclxuXHJcbiAgICAgICAgICAgIC8v5bCG6LWE5rqQ5Yqg5YWl5Zy65pmvXHJcbiAgICAgICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuTWFpblNjZW5lLmFkZENoaWxkKHJlcyk7XHJcblxyXG4gICAgICAgICAgICAvL+mBjeWOhuaJgOaciei1hOa6kFxyXG4gICAgICAgICAgICB0aGlzLlRyYXZlbE1lc2hTcHJpdGUzRChyZXMpO1xyXG5cclxuICAgICAgICAgICAgLy/otYTmupDpu5jorqTpmpDol49cclxuICAgICAgICAgICAgcmVzLmFjdGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLy/ojrflvpfmiYDmnInmpbzlsYJcclxuICAgICAgICAgICAgdmFyIGxldmVsID0gQ29tbW9uLlBhcnNlTG9hZExldmVsKHVybCk7XHJcbiAgICAgICAgICAgIHRoaXMuTGV2ZWxzLnB1c2gobGV2ZWwpO1xyXG5cclxuICAgICAgICAgICAgLy/orrDlvZXlvZPliY3mpbzlsYLotYTmupBcclxuICAgICAgICAgICAgaWYoIXRoaXMubV9sZXZlbFJlcy5oYXMobGV2ZWwpKXtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9sZXZlbFJlcy5zZXQobGV2ZWwscmVzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5kZXgrKztcclxuXHJcbiAgICAgICAgICAgIGlmKGluZGV4ID09IHJlc1VybC5sZW5ndGgpe1xyXG4gICAgICAgICAgICAgICAgLy/orr7nva7pu5jorqTnmoTmpbzlsYLkuLrnrKzkuIDkuKpcclxuICAgICAgICAgICAgICAgIHRoaXMuQ3VycmVuTGV2ZWwgPSB0aGlzLkxldmVsc1swXTtcclxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGUuYXBwbHkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sbnVsbCxmYWxzZSkpOyBcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliLfmlrDlvZPliY3mmL7npLrmpbzlsYJUYWdz55qE5YaF5a6577yM6YCa6L+H5qCH562+57G75Z6LTGFiZWxUeXBl5p2l5pS55Y+YO1xyXG4gICAgICogQHBhcmFtIHR5cGUg5qCH562+57G75Z6LXHJcbiAgICAgKi9cclxuICAgIFJlZnJlc2hMYWJlbENvbnRlbnQodHlwZTogTGFiZWxUeXBlKXtcclxuICAgICAgICBpZih0aGlzLkN1cnJlbkxldmVsID09bnVsbHx8XHJcbiAgICAgICAgICAgdGhpcy5tX2xldmVsU3BzY2VEaWMgPT0gbnVsbHx8XHJcbiAgICAgICAgICAgdGhpcy5tX3NwYWNlRGljID09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYodGhpcy5tX2xldmVsU3BzY2VEaWMuaGFzKHRoaXMuQ3VycmVuTGV2ZWwpKXtcclxuICAgICAgICAgICAgdGhpcy5tX2xldmVsU3BzY2VEaWMuZ2V0KHRoaXMuQ3VycmVuTGV2ZWwpLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLm1fc3BhY2VEaWMuaGFzKGVsZW1lbnQpKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZsb29yOkZsb29ySXRlbSA9IHRoaXMubV9zcGFjZURpYy5nZXQoZWxlbWVudCkgYXMgRmxvb3JJdGVtO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihmbG9vciA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2godHlwZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTGFiZWxUeXBlLkRlcGFydDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb29yLmxhYmVsLnRleHQgPSBmbG9vci5PcmdhbmlhenRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlNldEhleENvbG9yKGZsb29yLk9iamVjdCwgZmxvb3Iub3JnYW5pemF0aW9uQ29sb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBMYWJlbFR5cGUuQXJlYTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb29yLmxhYmVsLnRleHQgPSBmbG9vci5hcmVhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTGFiZWxUeXBlLlVzYWdlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvb3IubGFiZWwudGV4dCA9IGZsb29yLnVzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5TZXRIZXhDb2xvcihmbG9vci5PYmplY3QsIGZsb29yLnVzYWdlQ29sb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gYiDmmL7npLrmiJbpmpDol4/lhajpg6jmpbzlsYLvvIzmmL7npLrlhajpg6jmpbzlsYLml7bvvIzopoHlhbPmjol0YWdzXHJcbiAgICAgKi9cclxuICAgIFNob3dBbGxMZXZlbHMoYjpib29sZWFuKXtcclxuICAgICAgICBpZih0aGlzLkxldmVscyA9PSBudWxsfHx0aGlzLkxldmVscy5sZW5ndGggPT0gMClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLkxldmVscy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBpZihiKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuU2hvd09uZUxldmVsRmxvb3JzKGVsZW1lbnQsdHJ1ZSlcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkhpZGVPbmVMZXZlbEZsb29ycyhlbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaYvuekuumakOiXj+alvOWxguWPiualvOWxglRhZ1xyXG4gICAgICogQHBhcmFtIGxldmVsIOalvOWxglxyXG4gICAgICogQHBhcmFtIGIg5pi+L+makFxyXG4gICAgICovXHJcbiAgICBTaG93T25lTGV2ZWxGbG9vcnMobGV2ZWw6c3RyaW5nLGlzU2hvd0FsbD86Ym9vbGVhbil7XHJcbiAgICAgICAgaWYobGV2ZWwgPT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAvL+W8gOWQr2xldmVsUm9vdFxyXG4gICAgICAgIGlmKHRoaXMubV9sZXZlbFJlcy5oYXMobGV2ZWwpKXtcclxuICAgICAgICAgICAgdmFyIHJlczpMYXlhLlNwcml0ZTNEID0gdGhpcy5tX2xldmVsUmVzLmdldChsZXZlbCk7XHJcbiAgICAgICAgICAgIHJlcy5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5tX2xldmVsU3BzY2VEaWMuaGFzKGxldmVsKSl7XHJcbiAgICAgICAgICAgIHRoaXMubV9sZXZlbFNwc2NlRGljLmdldChsZXZlbCkuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMubV9zcGFjZURpYy5oYXMoZWxlbWVudCkpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmxvb3JJdGVtOkZsb29ySXRlbSA9IHRoaXMubV9zcGFjZURpYy5nZXQoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGZsb29ySXRlbSE9bnVsbCAmJiBmbG9vckl0ZW0ubGFiZWwhPW51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpc1Nob3dBbGwpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvb3JJdGVtLmxhYmVsLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9vckl0ZW0ubGFiZWwudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLkN1cnJlbkxldmVsID0gbGV2ZWw7XHJcbiAgICB9XHJcblxyXG4gICAgSGlkZU9uZUxldmVsRmxvb3JzKGxldmVsOnN0cmluZyl7XHJcbiAgICAgICAgaWYobGV2ZWwgPT0gbnVsbClcclxuICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIC8v5byA5ZCvbGV2ZWxSb290XHJcbiAgICAgICAgaWYodGhpcy5tX2xldmVsUmVzLmhhcyhsZXZlbCkpe1xyXG4gICAgICAgICAgICB2YXIgcmVzOkxheWEuU3ByaXRlM0QgPSB0aGlzLm1fbGV2ZWxSZXMuZ2V0KGxldmVsKTtcclxuICAgICAgICAgICAgcmVzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5tX2xldmVsU3BzY2VEaWMuaGFzKGxldmVsKSl7XHJcbiAgICAgICAgICAgIHRoaXMubV9sZXZlbFNwc2NlRGljLmdldChsZXZlbCkuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMubV9zcGFjZURpYy5oYXMoZWxlbWVudCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbG9vckl0ZW06Rmxvb3JJdGVtID0gdGhpcy5tX3NwYWNlRGljLmdldChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBpZihmbG9vckl0ZW0hPW51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihmbG9vckl0ZW0ubGFiZWwhPW51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvb3JJdGVtLmxhYmVsLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YCa6L+HQ29kZeiOt+WPluS4gOS4qkZsb29ySXRlbVxyXG4gICAgICogQHBhcmFtIGNvZGUgXHJcbiAgICAgKi9cclxuICAgIEdldE9uZUZsb29ySXRlbShjb2RlOnN0cmluZyk6Rmxvb3JJdGVte1xyXG4gICAgICAgIGlmKGNvZGUgPT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIGlmKHRoaXMubV9zcGFjZURpYy5oYXMoY29kZSkpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tX3NwYWNlRGljLmdldChjb2RlKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBHZXRPbmVGbG9vclNwcml0ZTNEKGNvZGU6c3RyaW5nKTpMYXlhLk1lc2hTcHJpdGUzRHtcclxuICAgICAgICBpZihjb2RlID09IG51bGwpcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIGlmKHRoaXMubV9zcGFjZURpYy5oYXMoY29kZSkpe1xyXG4gICAgICAgICAgICB2YXIgZmxvb3IgPSB0aGlzLm1fc3BhY2VEaWMuZ2V0KGNvZGUpIGFzIEZsb29ySXRlbTtcclxuICAgICAgICAgICAgcmV0dXJuIGZsb29yLk9iamVjdDtcclxuICAgICAgICB9ZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgcHJpdmF0ZSBUcmF2ZWxNZXNoU3ByaXRlM0QocGFyZW50OkxheWEuU3ByaXRlM0Qpe1xyXG4gICAgICAgIGlmKHBhcmVudD09IG51bGwpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICBmb3IodmFyIGkgPSAwO2k8cGFyZW50Ll9jaGlsZHJlbi5sZW5ndGg7aSsrKXtcclxuXHJcbiAgICAgICAgICAgIHZhciBtZXNoU3ByaXRlM0QgOiBMYXlhLk1lc2hTcHJpdGUzRCA9IHBhcmVudC5nZXRDaGlsZEF0KGkpIGFzIExheWEuTWVzaFNwcml0ZTNEO1xyXG5cclxuICAgICAgICAgICAgaWYobWVzaFNwcml0ZTNEICE9IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgaWYobWVzaFNwcml0ZTNELm1lc2hGaWx0ZXIhPW51bGwgXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgbWVzaFNwcml0ZTNELnBhcmVudC5uYW1lID09IE5hbWVDb25maWcuZmxvb3Ipe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkluc3RhbnRpYXRlRmxvb3JJdGVtKG1lc2hTcHJpdGUzRCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5UcmF2ZWxNZXNoU3ByaXRlM0QobWVzaFNwcml0ZTNEKTtcclxuICAgICAgICAgICAgICAgIH0gICAgIFxyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWvueixoeWMlkZsb29yXHJcbiAgICAgKiBAcGFyYW0gZmxvb3IgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgSW5zdGFudGlhdGVGbG9vckl0ZW0oZmxvb3I6TGF5YS5NZXNoU3ByaXRlM0Qpe1xyXG4gICAgICAgIGlmKGZsb29yID09bnVsbClyZXR1cm47XHJcbiAgICAgICAgIHZhciBtZXNoTmFtZSA9IGZsb29yLm5hbWU7XHJcbiAgICAgICAgIHZhciBkYXRhOlNwYWNlRGF0YSA9IEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuRGF0YS5HZXRPbmVTcGFjZURhdGEobWVzaE5hbWUpO1xyXG5cclxuICAgICAgICAgaWYoZGF0YSE9bnVsbCl7XHJcbiAgICAgICAgICAgIHZhciBmbG9vckl0ZW0gPSB0aGlzLkNyZWF0ZUZsb29ySXRlbShmbG9vcixkYXRhKTtcclxuXHJcbiAgICAgICAgICAgIGlmKCF0aGlzLm1fc3BhY2VEaWMuaGFzKG1lc2hOYW1lKSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fc3BhY2VEaWMuc2V0KG1lc2hOYW1lLGZsb29ySXRlbSk7ICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAvL+iusOW9leW9k+WJjeWxguaJgOacieeahOalvOadv1xyXG4gICAgICAgICAgICBpZighdGhpcy5tX2xldmVsU3BzY2VEaWMuaGFzKGRhdGEubGV2ZWxDb2RlKSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fbGV2ZWxTcHNjZURpYy5zZXQoZGF0YS5sZXZlbENvZGUsbmV3IEFycmF5PGFueT4oKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGFycjpBcnJheTxhbnk+ID0gdGhpcy5tX2xldmVsU3BzY2VEaWMuZ2V0KGRhdGEubGV2ZWxDb2RlKTtcclxuICAgICAgICAgICAgYXJyLnB1c2gobWVzaE5hbWUpO1xyXG5cclxuICAgICAgICAgfWVsc2VcclxuICAgICAgICAge1xyXG4gICAgICAgICAgICAgY29uc29sZS5sb2coXCJEQiBub3QgY29udGFpbiB0aGlzIHswfSBmbG9vclwiLG1lc2hOYW1lKTtcclxuICAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgQ3JlYXRlRmxvb3JJdGVtKGZsb29yOkxheWEuTWVzaFNwcml0ZTNELCBkYXRhOlNwYWNlRGF0YSk6Rmxvb3JJdGVte1xyXG4gICAgICAgIGlmKGZsb29yID09IG51bGwgfHwgZGF0YSA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm47ICAgICAgIFxyXG4gICAgICAgIHZhciBpdGVtID0gbmV3IEZsb29ySXRlbSgpO1xyXG4gICAgICAgIGl0ZW0uT2JqZWN0ID0gZmxvb3I7XHJcbiAgICAgICAgaXRlbS5UcmFuc2Zvcm0gPSBmbG9vci50cmFuc2Zvcm07XHJcbiAgICAgICAgaXRlbS5PcmdhbmlhenRpb24gPSBHYW1lTWFuYWdlci5JbnN0YW5jZSgpLkRhdGEuR2V0T25lT3JnYW5pemF0aW9uTmFtZShkYXRhLm9yZ2FuaXphdGlvbkNvZGUsXCIyXCIpO1xyXG4gICAgICAgIGl0ZW0ub3JnYW5pemF0aW9uQ29sb3IgPSBHYW1lTWFuYWdlci5JbnN0YW5jZSgpLkRhdGEuR2V0T25lT3JnYW5pemF0aW9uQ29sb3IoZGF0YS5vcmdhbml6YXRpb25Db2RlKTtcclxuICAgICAgICBpdGVtLnVzYWdlID0gR2FtZU1hbmFnZXIuSW5zdGFuY2UoKS5EYXRhLkdldE9uZVVzYWdlTmFtZShkYXRhLnVzYWdlVHlwZUNvZGUpXHJcbiAgICAgICAgaXRlbS51c2FnZUNvbG9yID0gR2FtZU1hbmFnZXIuSW5zdGFuY2UoKS5EYXRhLkdldE9uZVVzYWdlQ29sb3IoZGF0YS51c2FnZVR5cGVDb2RlKTtcclxuICAgICAgICBpdGVtLmFyZWEgPSBkYXRhLnVzZUFyZWE7ICBcclxuXHJcbiAgICAgICAgLy9URU1QOum7mOiupOaYvuekuueUqOmAlFxyXG4gICAgICAgIGl0ZW0ubGFiZWwgPSB0aGlzLkNyZWF0ZU9uZUZsb29yVGFnKEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuQ2FtZXJhLkNhbWVyYSxmbG9vcixpdGVtLnVzYWdlKTtcclxuICAgICAgICB0aGlzLlNldEhleENvbG9yKGZsb29yLGl0ZW0udXNhZ2VDb2xvcik7XHJcblxyXG4gICAgICAgIC8v6buY6K6kVGFn6ZqQ6JePXHJcbiAgICAgICAgaXRlbS5sYWJlbC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBDcmVhdGVPbmVGbG9vclRhZyhjYW1lcmE6TGF5YS5DYW1lcmEsIGZsb29yOkxheWEuTWVzaFNwcml0ZTNEICwgY29udGVudDpzdHJpbmcpIDpMYXlhLkxhYmVse1xyXG4gICAgICAgIHZhciBsYWJlbCA6TGF5YS5MYWJlbCA9IG5ldyBMYXlhLkxhYmVsKCk7XHJcbiAgICAgICAgbGFiZWwuYWRkQ29tcG9uZW50KExhYmVsVXBkYXRQb3MpO1xyXG4gICAgICAgIExheWEuc3RhZ2UuYWRkQ2hpbGQobGFiZWwpO1xyXG5cclxuICAgICAgICB2YXIgY29tcG9uZW50ID0gbGFiZWwuZ2V0Q29tcG9uZW50KExhYmVsVXBkYXRQb3MpIGFzIExhYmVsVXBkYXRQb3M7XHJcbiAgICAgICAgY29tcG9uZW50LkluaXQoZmxvb3IsY2FtZXJhLGNvbnRlbnQpO1xyXG4gICAgICAgIHJldHVybiBsYWJlbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOagueaNruaRhOWDj+acuueahOWIsOWOn+eCueeahOi3neemu+aYvuekuuaIlumakOiXj0xhYmVsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgU2hvd0hpZGVUYWdzQnlEaXN0YW5jZShkaXN0YW5jZTpudW1iZXIpe1xyXG4gICAgICAgIGxldCBzdGFydGRpc2FwcGVhcmRpcyA9IDA7XHJcbiAgICAgICAgbGV0IHRvdGFsZGlzYXBwZWFyZGlzID0gMDtcclxuXHJcbiAgICAgICAgaWYoR2FtZU1hbmFnZXIuSW5zdGFuY2UoKS5DYW1lcmEuSXMyRCl7XHJcbiAgICAgICAgICAgIHN0YXJ0ZGlzYXBwZWFyZGlzID0gdGhpcy5tXzJkbGFiZWxEaXNhcHBlYXJEaXN0YW5jZTtcclxuICAgICAgICAgICAgdG90YWxkaXNhcHBlYXJkaXMgPSB0aGlzLm1fMmRsYWJlbFRvdGFsRGlzYXBwZWFyRGlzdGFuY2VcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgc3RhcnRkaXNhcHBlYXJkaXMgPSB0aGlzLm1fM2RsYWJlbERpc2FwcGVhckRpc3RhbmNlO1xyXG4gICAgICAgICAgICB0b3RhbGRpc2FwcGVhcmRpcyA9IHRoaXMubV8zZGxhYmVsVG90YWxEaXNhcHBlYXJEaXN0YW5jZVxyXG4gICAgICAgIH0gIFxyXG5cclxuICAgICAgICBpZihkaXN0YW5jZSA+IHN0YXJ0ZGlzYXBwZWFyZGlzKXtcclxuICAgICAgICAgICAgbGV0IGZsb29yczpBcnJheTxhbnk+ID0gdGhpcy5tX2xldmVsU3BzY2VEaWMuZ2V0KHRoaXMuQ3VycmVuTGV2ZWwpO1xyXG4gICAgICAgICAgICBsZXQgY291bnQgPSBmbG9vcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICBsZXQgaW50ZXJ2YWwgPSAodG90YWxkaXNhcHBlYXJkaXMgLSBzdGFydGRpc2FwcGVhcmRpcykgLyBjb3VudDtcclxuICAgICAgICAgICAgbGV0IHBvaW50ZXIgPSAoZGlzdGFuY2UgLSBzdGFydGRpc2FwcGVhcmRpcykgLyBpbnRlcnZhbDtcclxuXHJcbiAgICAgICAgICAgIGZsb29ycy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gZmxvb3JzLmluZGV4T2YoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmxvb3I6Rmxvb3JJdGVtID0gdGhpcy5tX3NwYWNlRGljLmdldChlbGVtZW50KTsgXHJcbiAgICAgICAgICAgICAgICBpZihmbG9vciE9bnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGluZGV4IDw9IHBvaW50ZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9vci5sYWJlbC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsb29yLmxhYmVsLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgU2V0T25lTGV2ZWxGbG9vckNvbG9yKG9yZ3M6QXJyYXk8c3RyaW5nPixiOmJvb2xlYW4pe1xyXG4gICAgICAgIGlmKG9yZ3MubGVuZ3RoID09IDApIHJldHVybiA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGZsb29ycyA9IEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuRGF0YS5HZXRPbmVMZXZlbEZsb29yc0J5T3Jncyh0aGlzLkN1cnJlbkxldmVsLG9yZ3MpO1xyXG5cclxuICAgICAgICBpZihmbG9vcnM9PW51bGx8fGZsb29ycy5sZW5ndGggPT0gMCkgcmV0dXJuIDtcclxuICAgICAgICBmbG9vcnMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgdmFyIGZsb29yOkZsb29ySXRlbSA9IHRoaXMubV9zcGFjZURpYy5nZXQoZWxlbWVudCkgYXMgRmxvb3JJdGVtO1xyXG4gICAgICAgICAgICBpZihmbG9vciA9PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBpZihiKXtcclxuICAgICAgICAgICAgICAgIHN3aXRjaChHYW1lTWFuYWdlci5JbnN0YW5jZSgpLk1haW5VSS5DdXJyZW50TGFiZWxUeXBlKXtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIExhYmVsVHlwZS5EZXBhcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuU2V0SGV4Q29sb3IoZmxvb3IuT2JqZWN0LCBmbG9vci5vcmdhbml6YXRpb25Db2xvcilcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIExhYmVsVHlwZS5Vc2FnZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5TZXRIZXhDb2xvcihmbG9vci5PYmplY3QsIGZsb29yLnVzYWdlQ29sb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHRoaXMuU2V0SGV4Q29sb3IoZmxvb3IuT2JqZWN0LHRoaXMubV9kZWZhdWx0Rmxvb3JDb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKirmmoLml7blhYjlsIborr7nva7popzoibLnmoTmlrnms5XmlL7liLBCSU3lhoUqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAqIOiusOW9leiuvue9ruminOiJsuWQjueahOadkOi0qOeQg++8m1xyXG4gICAgKi9cclxuICAgIHByaXZhdGUgTWF0ZXJpYWxzRGljOkxheWEuV2Vha09iamVjdCA9IG5ldyBMYXlhLldlYWtPYmplY3QoKTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7lr7nosaHpopzoibJcclxuICAgICAqIEBwYXJhbSB0YXJnZXQgXHJcbiAgICAgKiBAcGFyYW0gY29sb3IgTGF5YeWGhemDqOeahENvbG9yXHJcbiAgICAgKi9cclxuICAgIFNldExheWFDb2xvcih0YXJnZXQ6TGF5YS5NZXNoU3ByaXRlM0QsY29sb3I6TGF5YS5Db2xvcil7XHJcbiAgICAgICAgaWYodGFyZ2V0ID09IG51bGx8fGNvbG9yID09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIG1hdHMgPSB0YXJnZXQubWVzaFJlbmRlcmVyLm1hdGVyaWFscztcclxuXHJcbiAgICAgICAgaWYobWF0cyA9PSBudWxsKSByZXR1cm4gO1xyXG5cclxuICAgICAgICBtYXRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuU2V0Q29sb3IoZWxlbWVudCxuZXcgTGF5YS5WZWN0b3I0KGNvbG9yLnIsY29sb3IuZyxjb2xvci5iLGNvbG9yLmEpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7lr7nosaHnmoTpopzoibJcclxuICAgICAqIEBwYXJhbSB0YXJnZXQg5a+56LGhXHJcbiAgICAgKiBAcGFyYW0gaGV4Q29sb3Ig5Y2B5YWt6L+b5Yi26aKc6ImyXHJcbiAgICAgKi9cclxuICAgIFNldEhleENvbG9yKHRhcmdldDpMYXlhLk1lc2hTcHJpdGUzRCxoZXhDb2xvcjpzdHJpbmcpe1xyXG4gICAgICAgIGlmKHRhcmdldCA9PSBudWxsfHxoZXhDb2xvciA9PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBtYXRzID0gdGFyZ2V0Lm1lc2hSZW5kZXJlci5tYXRlcmlhbHM7XHJcblxyXG4gICAgICAgIGlmKG1hdHMgPT0gbnVsbCkgcmV0dXJuIDtcclxuXHJcbiAgICAgICAgdmFyIGNvbG9yOkxheWEuVmVjdG9yNCA9IHRoaXMuQ29udmVydENvbG9yKGhleENvbG9yKTtcclxuXHJcbiAgICAgICAgbWF0cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLlNldENvbG9yKGVsZW1lbnQsY29sb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIFNldENvbG9yKG1hdDpMYXlhLkJhc2VNYXRlcmlhbCxjb2xvcjpMYXlhLlZlY3RvcjQpe1xyXG4gICAgICAgIGlmKG1hdCA9PSBudWxsIHx8IGNvbG9yID09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAobWF0IGFzIExheWEuQmxpbm5QaG9uZ01hdGVyaWFsKS5hbGJlZG9Db2xvciA9IGNvbG9yO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKCF0aGlzLk1hdGVyaWFsc0RpYy5oYXMobWF0KSkge1xyXG4gICAgICAgICAgICB0aGlzLk1hdGVyaWFsc0RpYy5zZXQobWF0LGNvbG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpopzoibLovazmjaLvvIzlsIZoZXhDb2xvcui9rOaNouaIkFZlY3RvcjRcclxuICAgICAqIEBwYXJhbSBoZXhDb2xvciBcclxuICAgICAqL1xyXG4gICAgQ29udmVydENvbG9yKGhleENvbG9yOnN0cmluZyk6TGF5YS5WZWN0b3I0e1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBjb3VudDpudW1iZXIgPSBoZXhDb2xvci5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciByID0gcGFyc2VJbnQoaGV4Q29sb3Iuc3Vic3RyKDAsIDIpLCAxNik7XHJcbiAgICAgICAgICAgIHZhciBnID0gcGFyc2VJbnQoaGV4Q29sb3Iuc3Vic3RyKDIsIDIpLCAxNik7XHJcbiAgICAgICAgICAgIHZhciBiID0gcGFyc2VJbnQoaGV4Q29sb3Iuc3Vic3RyKDQsIDIpLCAxNik7XHJcbiAgICAgICAgICAgIHZhciBhID0gMjU1O1xyXG4gICAgICAgICAgICBpZiAoY291bnQgPT0gOClcclxuICAgICAgICAgICAgICAgIGEgPSBwYXJzZUludChoZXhDb2xvci5zdWJzdHIoNiwgMiksIDE2KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ29udmVydChyLCBnLCBiLCBhKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiPGNvbG9yPXllbGxvdz57MH08L2NvbG9yPlwiLCBcIuWNgeWFrei/m+WItuminOiJsuWAvOagvOW8j+mUmeivryzpnIDovpPlhaU25L2N5oiWOOS9jSjluKZhbHBoYSkxNui/m+WItuWAvCzlpoI6MDA5MUVBRkYs5LiN5YqgI+aIljB4XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IExheWEuVmVjdG9yNCgxLDEsMSwxKTtcclxuICAgIH1cclxuXHJcbiAgICBDb252ZXJ0KHI6bnVtYmVyLGc6bnVtYmVyLCBiOm51bWJlciwgYTpudW1iZXIpIDpMYXlhLlZlY3RvcjR7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMYXlhLlZlY3RvcjQoci8yNTUsZy8yNTUsIGIvMjU1LCBhLzI1NSk7XHJcbiAgICB9XHJcblxyXG4gICAgUmVzZXRDb2xvcihmbG9vcjpMYXlhLk1lc2hTcHJpdGUzRCl7XHJcbiAgICAgICAgaWYoZmxvb3IgPT0gbnVsbHx8Zmxvb3IubWVzaFJlbmRlcmVyID09IG51bGwpIHJldHVybiA7XHJcblxyXG4gICAgICAgIHZhciBtYXRzID0gZmxvb3IubWVzaFJlbmRlcmVyLm1hdGVyaWFscztcclxuICAgICAgICBpZihtYXRzIT1udWxsKXtcclxuICAgICAgICAgICAgbWF0cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5NYXRlcmlhbHNEaWMuaGFzKGVsZW1lbnQpKXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0OkxheWEuQmxpbm5QaG9uZ01hdGVyaWFsID0gZWxlbWVudCBhcyBMYXlhLkJsaW5uUGhvbmdNYXRlcmlhbDtcclxuICAgICAgICAgICAgICAgICAgICBtYXQuYWxiZWRvQ29sb3IgPSB0aGlzLk1hdGVyaWFsc0RpYy5nZXQoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGVudW0gTGFiZWxUeXBle1xyXG4gICAgRGVwYXJ0LFxyXG4gICAgVXNhZ2UsXHJcbiAgICBBcmVhLFxyXG59XHJcblxyXG5jbGFzcyBGbG9vckl0ZW17XHJcbiAgICBwdWJsaWMgT2JqZWN0OkxheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgcHVibGljIFRyYW5zZm9ybTpMYXlhLlRyYW5zZm9ybTNEO1xyXG4gICAgcHVibGljIE9yZ2FuaWF6dGlvbjpzdHJpbmc7XHJcbiAgICBwdWJsaWMgb3JnYW5pemF0aW9uQ29sb3I6c3RyaW5nO1xyXG4gICAgcHVibGljIHVzYWdlOnN0cmluZztcclxuICAgIHB1YmxpYyB1c2FnZUNvbG9yOnN0cmluZztcclxuICAgIHB1YmxpYyBhcmVhOnN0cmluZztcclxuICAgIHB1YmxpYyBsYWJlbDpMYXlhLkxhYmVsO1xyXG59IiwiaW1wb3J0IFZlY3RvcjMgPSBMYXlhLlZlY3RvcjM7XHJcbmltcG9ydCBIYW5kbGVyID0gTGF5YS5IYW5kbGVyO1xyXG5cclxuaW1wb3J0IEdhbWVNYW5hZ2VyIGZyb20gXCIuLi9HYW1lTWFuYWdlclwiO1xyXG5pbXBvcnQgRXZlbnRNYW5hZ2VyIGZyb20gXCIuLi9FdmVudHMvRXZlbnRNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IEV2ZW50cyB9IGZyb20gXCIuLi9FdmVudHMvRXZlbnRzXCI7XHJcbmltcG9ydCBDYW1lcmFNb3ZlU2NyaXB0IGZyb20gXCIuLi9Db21wb25lbnQvQ2FtZXJhTW92ZVNjcmlwdFwiO1xyXG5pbXBvcnQgUmF5U2VsZWN0b3IgZnJvbSBcIi4uL0NvbXBvbmVudC9SYXlTZWxlY3RvclwiO1xyXG5pbXBvcnQgTGlnaHRDb250cm9sIGZyb20gXCIuLi9Db21wb25lbnQvTGlnaHRDb250cm9sXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FtZXJhTWFuYWdlcntcclxuXHJcbiAgICBDYW1lcmE6TGF5YS5DYW1lcmE7XHJcblxyXG4gICAgcHVibGljIElzMkQ6Qm9vbGVhbjtcclxuXHJcbiAgICBwcml2YXRlIF8zZFBvczpWZWN0b3IzO1xyXG4gICAgcHJpdmF0ZSBfM2RSb3Q6VmVjdG9yMztcclxuICAgIHByaXZhdGUgXzJkUG9zOlZlY3RvcjM7XHJcbiAgICBwcml2YXRlIF8yZFJvdDpWZWN0b3IzO1xyXG4gICAgcHJpdmF0ZSBfb3JpT3J0aFNpemU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLl8zZFBvcyA9IG5ldyBWZWN0b3IzKC02LDQ1LDE3KTtcclxuICAgICAgICB0aGlzLl8zZFJvdCA9IG5ldyBWZWN0b3IzKC03OCwwLDApO1xyXG4gICAgICAgIHRoaXMuXzJkUG9zID0gbmV3IFZlY3RvcjMoLTUsNTAsMTcpO1xyXG4gICAgICAgIHRoaXMuXzJkUm90ID0gbmV3IFZlY3RvcjMoLTkwLDAsMCk7XHJcbiAgICAgICAgdGhpcy5fb3JpT3J0aFNpemUgPSA3MDtcclxuICAgIH1cclxuXHJcbiAgICBJbml0Q2FtZXJhKCl7XHJcbiAgICAgICAgdmFyIGNhbWVyYTpMYXlhLkNhbWVyYSA9IG5ldyBMYXlhLkNhbWVyYSgpOyBcclxuICAgICAgICBjYW1lcmEudHJhbnNmb3JtLnBvc2l0aW9uID0gdGhpcy5fM2RQb3M7XHJcbiAgICAgICAgY2FtZXJhLnRyYW5zZm9ybS5sb2NhbFJvdGF0aW9uRXVsZXIgPSB0aGlzLl8zZFJvdDtcclxuICAgICAgICBjYW1lcmEuY2xlYXJDb2xvciA9IG5ldyBMYXlhLlZlY3RvcjQoMCwwLDAsMCk7XHJcbiAgICAgICAgdGhpcy5DYW1lcmEgPSBjYW1lcmE7XHJcblxyXG4gICAgICAgIC8v5pGE5YOP5py65o6n5Yi2XHJcbiAgICAgICAgY2FtZXJhLmFkZENvbXBvbmVudChDYW1lcmFNb3ZlU2NyaXB0KTtcclxuICAgICAgICBsZXQgY2FtY3RybCA9IGNhbWVyYS5nZXRDb21wb25lbnQoQ2FtZXJhTW92ZVNjcmlwdCkgYXMgQ2FtZXJhTW92ZVNjcmlwdDtcclxuICAgICAgICBjYW1jdHJsLm1fc2NlbmUzZCA9IEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuTWFpblNjZW5lO1xyXG5cclxuICAgICAgICAvL+WwhOe6v+ajgOa1i1xyXG4gICAgICAgIGNhbWVyYS5hZGRDb21wb25lbnQoUmF5U2VsZWN0b3IpO1xyXG4gICAgICAgIHZhciByYXlzZWxlY3RvciA9IGNhbWVyYS5nZXRDb21wb25lbnQoUmF5U2VsZWN0b3IpIGFzIFJheVNlbGVjdG9yO1xyXG4gICAgICAgIHJheXNlbGVjdG9yLlNjZW5lM0QgPSBHYW1lTWFuYWdlci5JbnN0YW5jZSgpLk1haW5TY2VuZTtcclxuXHJcbiAgICAgICAgR2FtZU1hbmFnZXIuSW5zdGFuY2UoKS5NYWluU2NlbmUuYWRkQ2hpbGQoY2FtZXJhKTtcclxuXHJcbiAgICAgICAgdGhpcy5Jbml0TGlnaHQoKTtcclxuICAgIH1cclxuXHJcbiAgICBJbml0TGlnaHQoKXtcclxuICAgICAgICB2YXIgZGlyZWN0aW9uTGlnaHQ6IExheWEuRGlyZWN0aW9uTGlnaHQgPSBuZXcgTGF5YS5EaXJlY3Rpb25MaWdodCgpO1xyXG4gICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuTWFpblNjZW5lLmFkZENoaWxkKGRpcmVjdGlvbkxpZ2h0KTtcclxuICAgICAgICBkaXJlY3Rpb25MaWdodC5jb2xvciA9IG5ldyBMYXlhLlZlY3RvcjMoMC4yLCAwLjIsIDAuMik7XHJcbiAgICAgICAgZGlyZWN0aW9uTGlnaHQudHJhbnNmb3JtLndvcmxkTWF0cml4LnNldEZvcndhcmQobmV3IExheWEuVmVjdG9yMygxLCAtMSwgMCkpO1xyXG4gICAgICAgIGRpcmVjdGlvbkxpZ2h0LnRyYW5zZm9ybS5wb3NpdGlvbiA9IHRoaXMuQ2FtZXJhLnRyYW5zZm9ybS5wb3NpdGlvbjtcclxuICAgICAgICBkaXJlY3Rpb25MaWdodC50cmFuc2Zvcm0ucm90YXRpb24gPSB0aGlzLkNhbWVyYS50cmFuc2Zvcm0ucm90YXRpb247XHJcblxyXG4gICAgICAgIGRpcmVjdGlvbkxpZ2h0LmFkZENvbXBvbmVudChMaWdodENvbnRyb2wpO1xyXG4gICAgICAgIHZhciBsaWdodGNvbnRybCA9IGRpcmVjdGlvbkxpZ2h0LmdldENvbXBvbmVudChMaWdodENvbnRyb2wpIGFzIExpZ2h0Q29udHJvbDtcclxuICAgICAgICBsaWdodGNvbnRybC5DYW1lcmEgPSB0aGlzLkNhbWVyYTtcclxuICAgIH1cclxuXHJcbiAgICBSZXNldENhbWVyYShpczJEOkJvb2xlYW4pe1xyXG4gICAgICAgIHRoaXMuSXMyRCA9IGlzMkQ7XHJcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHRoaXMuQ2FtZXJhLmdldENvbXBvbmVudChDYW1lcmFNb3ZlU2NyaXB0KSBhcyBDYW1lcmFNb3ZlU2NyaXB0O1xyXG4gICAgICAgIGlmKGlzMkQpe1xyXG4gICAgICAgICAgICB0aGlzLkNhbWVyYS5vcnRob2dyYXBoaWMgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLkNhbWVyYS5vcnRob2dyYXBoaWNWZXJ0aWNhbFNpemUgPSA2MDtcclxuICAgICAgICAgICAgdGhpcy5DYW1lcmEudHJhbnNmb3JtLnBvc2l0aW9uID0gdGhpcy5fMmRQb3M7XHJcbiAgICAgICAgICAgIHRoaXMuQ2FtZXJhLnRyYW5zZm9ybS5sb2NhbFJvdGF0aW9uRXVsZXIgPSB0aGlzLl8yZFJvdDtcclxuICAgICAgICAgICAgY29tcG9uZW50LklzMkQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gTGF5YS5Ud2Vlbi50byh0aGlzLkNhbWVyYSx7cG9zaXRpb246dGhpcy5fMmRQb3Mscm90YXRpb246dGhpcy5fMmRSb3R9LDEwMDAsbnVsbCxIYW5kbGVyLmNyZWF0ZSh0aGlzLCgpPT57XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLkNhbWVyYS5vcnRob2dyYXBoaWMgPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5DYW1lcmEub3J0aG9ncmFwaGljVmVydGljYWxTaXplID0gNjA7XHJcbiAgICAgICAgICAgIC8vICAgICBjb21wb25lbnQuSXMyRCA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIH0pKTtcclxuXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuQ2FtZXJhLm9ydGhvZ3JhcGhpYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLkNhbWVyYS50cmFuc2Zvcm0ucG9zaXRpb24gPSB0aGlzLl8zZFBvcztcclxuICAgICAgICAgICAgdGhpcy5DYW1lcmEudHJhbnNmb3JtLmxvY2FsUm90YXRpb25FdWxlciA9IHRoaXMuXzNkUm90O1xyXG4gICAgICAgICAgICBjb21wb25lbnQuSXMyRCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLy8gTGF5YS5Ud2Vlbi50byh0aGlzLkNhbWVyYSx7cG9zaXRpb246dGhpcy5fM2RQb3Mscm90YXRpb246dGhpcy5fM2RSb3R9LDEwMDAsbnVsbCxIYW5kbGVyLmNyZWF0ZSh0aGlzLCgpPT57XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLkNhbWVyYS5vcnRob2dyYXBoaWMgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gICAgIGNvbXBvbmVudC5JczJEID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIH0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQ2FtZXJhTW92ZShvYmplY3Q6T2JqZWN0LCBmcm9tUG9zOlZlY3RvcjMsdG9Qb3M6VmVjdG9yMyl7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgQ2FtZXJhUm90YXRlKGZyb21Sb3RhdGU6VmVjdG9yMyx0b1JvdGF0ZTpWZWN0b3IzKXtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgQWRkRXZlbnQoKXtcclxuICAgICAgICBFdmVudE1hbmFnZXIuSW5zdGFuY2UoKS5BZGRFdmVudExpc3RlbmVyKEV2ZW50cy5PblVJX0xldmVsQnRuX0NsaWNrZWQudG9TdHJpbmcoKSx0aGlzLHRoaXMuQ2FtZXJhTW92ZUluTGV2ZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIENhbWVyYU1vdmVJbkxldmVsKGxldmVsTmFtZTpzdHJpbmcpe1xyXG5cclxuICAgIH1cclxufSIsIlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tb257XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YCa6L+H5qW85p2/Q29kZeiOt+W+l0xldmVsQ29kZVxyXG4gICAgICogQHBhcmFtIGNvZGUgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBHZXRMZXZlbEJ5Rmxvb3JDb2RlKGNvZGU6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgaWYoY29kZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIG5hbWVzID0gY29kZS5zcGxpdChcIi1cIik7XHJcbiAgICAgICAgaWYobmFtZXMubGVuZ3RoIDwgMyl7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gY29kZS5zdWJzdHJpbmcoMCwxNSk7XHJcbiAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDpgJrov4fmpbzmnb9Db2Rl6I635b6XQnVpbGRpbmdDb2RlXHJcbiAgICAgKiBAcGFyYW0gY29kZSBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIEdldEJ1aWxkaW5nQnlGbG9vckNvZGUoY29kZTpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICBpZihjb2RlID09IG51bGwpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICB2YXIgbmFtZXMgPSBjb2RlLnNwbGl0KFwiLVwiKTtcclxuICAgICAgICBpZihuYW1lcy5sZW5ndGggPCAzKXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2RlLnN1YnN0cmluZygwLDEwKTtcclxuICAgICAgICB9ICAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpgJrov4fliqDovb3nmoTotYTmupDvvIzojrflj5blvZPliY3otYTmupDnmoTmiYDlnKjnmoTmpbzlsYJcclxuICAgICAqIEBwYXJhbSB1cmwgLmxo6LWE5rqQ55qEdXJs6Lev5b6E77yMLmxo5paH5Lu255qE5ZG95ZCN6KeE5YiZ5b+F6aG75Li65qW85bGC55qEQ29kZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgUGFyc2VMb2FkTGV2ZWwodXJsOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIGlmKHVybCA9PSBudWxsKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIHRlbXAgPSB1cmwuc3Vic3RyKHVybC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcclxuICAgICAgICB2YXIgbGV2ZWwgPSB0ZW1wLnN1YnN0cigwLHRlbXAuaW5kZXhPZihcIi5cIikpO1xyXG5cclxuICAgICAgICByZXR1cm4gbGV2ZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDov5Tlm57liY3nq6/mmL7npLrnmoRMZXZlbENvZGU75L6L5aaCRjFcclxuICAgICAqIEBwYXJhbSBsZXZlbENvZGUg5qW85bGC57yW56CB77yaQkRIQ01VLUEwMi1GMDAxXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBHZXRQdXJMZXZlbChsZXZlbENvZGU6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgaWYobGV2ZWxDb2RlID09IG51bGwgfHwgbGV2ZWxDb2RlLm1hdGNoKFwiLVwiKSA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIGVsZXMgPSBsZXZlbENvZGUuc3BsaXQoXCItXCIpO1xyXG5cclxuICAgICAgICBpZihlbGVzLmxlbmd0aDwzKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVsZXNbMl07XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IFZlY3RvcjMgPSBMYXlhLlZlY3RvcjM7XHJcbmltcG9ydCBWZWN0b3IyID0gTGF5YS5WZWN0b3IyO1xyXG5pbXBvcnQgTGFiZWwgPSBMYXlhLkxhYmVsO1xyXG5pbXBvcnQgRXZlbnRNYW5hZ2VyIGZyb20gXCIuLi9FdmVudHMvRXZlbnRNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IEV2ZW50cyB9IGZyb20gXCIuLi9FdmVudHMvRXZlbnRzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW1lcmFNb3ZlU2NyaXB0IGV4dGVuZHMgTGF5YS5TY3JpcHQzRCB7XHJcblx0XHRcclxuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcigpO31cclxuXHJcbiAgICBwcml2YXRlIG1fY2FtZXJhOkxheWEuQ2FtZXJhO1xyXG4gICAgcHVibGljICBtX3NjZW5lM2Q6TGF5YS5TY2VuZTNEO1xyXG5cclxuICAgIHByaXZhdGUgbV90ZW1wVmVjdG9yMzpWZWN0b3IzO1xyXG4gICAgcHJpdmF0ZSBtX2xhc3RNb3VzZVg6bnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBtX2xhc3RNb3VzZVk6bnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgbV9pc01vdXNlRG93bjpib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBtX2lzUmlnaHRNb3VzZURvd246Ym9vbGVhbjtcclxuICAgIHByaXZhdGUgbV9pc01vdXNlV2hlZWw6Ym9vbGVhbjtcclxuXHJcbiAgICBwcml2YXRlIG1fM2RNb3ZlU3BlZWQ6bnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBtXzNkUm90YXRlU3BlZWQ6bnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBtXzNkV2hlZWxTcGVlZDpudW1iZXI7XHJcbiAgICBwcml2YXRlIG1fMmRNb3ZlU3BlZWQ6bnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBtXzJkV2hlZWxTcGVlZDpudW1iZXI7XHJcbiAgICBwcml2YXRlIG1fM2RNaW5ab29tRGlzdGFuY2U6bnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBtXzNkTWF4Wm9vbURpc3RhbmNlOm51bWJlcjtcclxuICAgIHByaXZhdGUgbV8zZE1pbkNhbWVyYVBpdGNoUmFkaWFuOm51bWJlcjtcclxuICAgIHByaXZhdGUgbV8zZE1heENhbWVyYVBpdGNoUmFkaWFuOm51bWJlcjtcclxuICAgIHByaXZhdGUgbV8yZE1pbk9ydGhvZ3JhcGhpY1NpemU6bnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgbV9jdXJyZW50UGl0Y2hSYWRpYW46bnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgbV9pc0xhc3RUb3VjaERvdWJsZUZpbmdlcnM6Ym9vbGVhbjtcclxuICAgIHByaXZhdGUgbV9pc1JpZ2h0TW91c2VCdXR0b25Eb3duOmJvb2xlYW47XHJcbiAgICBwcml2YXRlIG1fbGFzdFRvdWNoRmluZ2VyMDpWZWN0b3IyO1xyXG4gICAgcHJpdmF0ZSBtX2xhc3RUb3VjaEZpbmdlcjE6VmVjdG9yMjtcclxuXHJcbiAgICBwcml2YXRlIG1fbGFzdERpc3RhbmNlOiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBtX3ByZVJhZGlhbjogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwdWJsaWMgT25Nb3VzZVdoZWVsOkZ1bmN0aW9uO1xyXG4gICAgcHVibGljIE9uU2luZ2xlRmluZ2VyRHJhZzpGdW5jdGlvbjtcclxuICAgIHB1YmxpYyBPbkRvdWJsZUZpbmdlcnNQaW5jaDpGdW5jdGlvbjtcclxuICAgIHB1YmxpYyBPbkRvdWJsZUZpbmdlcnNUd2lzdDpGdW5jdGlvbjtcclxuICAgIHB1YmxpYyBPblxyXG4gICBcclxuICAgIHByaXZhdGUgbV9mb3J3YXJkTGVuZ3RoOiBudW1iZXIgPSAzO1xyXG4gICAgcHJpdmF0ZSBtX2xvb2tBdFBvaW50OiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIHByaXZhdGUgbV9pc1R3b0ZpbmdlcnNUb3VjaDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBtX3R3b0ZpbmdlcnNEaXN0YW5jZTogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwcml2YXRlIG1fbGFzdFRvdWNoZXM6YW55W107XHJcblxyXG4gICAgcHJvdGVjdGVkIHlhd1BpdGNoUm9sbDpMYXlhLlZlY3RvcjM7XHJcbiAgICBwcm90ZWN0ZWQgcmVzdWx0Um90YXRpb246TGF5YS5RdWF0ZXJuaW9uO1xyXG4gICAgcHJvdGVjdGVkIHRlbXBSb3RhdGlvblo6TGF5YS5RdWF0ZXJuaW9uO1xyXG4gICAgcHJvdGVjdGVkIHRlbXBSb3RhdGlvblg6TGF5YS5RdWF0ZXJuaW9uO1xyXG4gICAgcHJvdGVjdGVkIHRlbXBSb3RhdGlvblk6TGF5YS5RdWF0ZXJuaW9uO1xyXG5cclxuICAgIHByaXZhdGUgbV9yYXk6TGF5YS5SYXk7XHJcbiAgICBwcml2YXRlIG1faGl0UmVzdWx0OkxheWEuSGl0UmVzdWx0O1xyXG4gICAgcHJpdmF0ZSBtX2hpdE9iamVjdDpMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgIHByaXZhdGUgbV9oaXRQb2ludDpMYXlhLlZlY3RvcjM7XHJcbiAgICBcclxuICAgIHB1YmxpYyBJc1Nob3dMYWJsZTpib29sZWFuID0gdHJ1ZTtcclxuICAgIHByb3RlY3RlZCBtX2xhYmVsOiBMYWJlbDtcclxuXHJcbiAgICBwdWJsaWMgSXMyRDpCb29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJvdGVjdGVkIG1fbW91c2VQb2ludDpWZWN0b3IyO1xyXG5cclxuICAgIG9uQXdha2UoKXtcclxuICAgICAgICB0aGlzLkluaXQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5BZGRFdmVuZXRzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuUmVmcmVzaFBpdGNoUmFkaWFuKCk7XHJcblxyXG4gICAgICAgIHRoaXMuUmVmcmVzaExvb2tBdFBvaW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25VcGRhdGUoKXtcclxuICAgICAgICBpZih0aGlzLklzU2hvd0xhYmxlKVxyXG4gICAgICAgICAgICB0aGlzLlNob3dJbmZvKCk7XHJcblxyXG4gICAgICAgIHRoaXMuUmF5Q2FzdEhpdCgpO1xyXG5cclxuICAgICAgICB0aGlzLkNhbWVyYVRvWmVyb0Rpc3RhbmNlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG9uRGVzdHJveSgpe1xyXG4gICAgICAgIHRoaXMuUmVtb3ZlRXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIEluaXQoKXtcclxuICAgICAgICB0aGlzLm1fY2FtZXJhID0gdGhpcy5vd25lciBhcyBMYXlhLkNhbWVyYTtcclxuICAgICAgICB0aGlzLm1fdGVtcFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICAgIHRoaXMubV9tb3VzZVBvaW50ID0gbmV3IFZlY3RvcjIoKTtcclxuICAgICAgICB0aGlzLm1fbGFzdFRvdWNoRmluZ2VyMCA9IG5ldyBWZWN0b3IyKCk7XHJcbiAgICAgICAgdGhpcy5tX2xhc3RUb3VjaEZpbmdlcjEgPSBuZXcgVmVjdG9yMigpO1xyXG5cclxuICAgICAgICB0aGlzLnlhd1BpdGNoUm9sbCA9IG5ldyBMYXlhLlZlY3RvcjMoKTtcclxuICAgICAgICB0aGlzLnJlc3VsdFJvdGF0aW9uID0gbmV3IExheWEuUXVhdGVybmlvbigpO1xyXG4gICAgICAgIHRoaXMudGVtcFJvdGF0aW9uWiA9IG5ldyBMYXlhLlF1YXRlcm5pb24oKTtcclxuICAgICAgICB0aGlzLnRlbXBSb3RhdGlvblggPSBuZXcgTGF5YS5RdWF0ZXJuaW9uKCk7XHJcbiAgICAgICAgdGhpcy50ZW1wUm90YXRpb25ZID0gbmV3IExheWEuUXVhdGVybmlvbigpO1xyXG5cclxuICAgICAgICB0aGlzLm1fcmF5ID0gbmV3IExheWEuUmF5KG5ldyBWZWN0b3IzKCksbmV3IFZlY3RvcjMoKSk7XHJcbiAgICAgICAgdGhpcy5tX2hpdFJlc3VsdCA9IG5ldyBMYXlhLkhpdFJlc3VsdCgpO1xyXG5cclxuICAgICAgICBpZih0aGlzLklzU2hvd0xhYmxlKVxyXG4gICAgICAgICAgICB0aGlzLm1fbGFiZWwgPSB0aGlzLmNyZWF0ZUxhYmVsKG5ldyBWZWN0b3IyKDEwLDEwKSlcclxuXHJcbiAgICAgICAgdGhpcy5Jbml0RGlmZlBsYXRmb3JtKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuI3lkIzlubPlj7DkuI3lkIzphY3nva7vvIzku45qc29u5paH5Lu25Lit6K+75Y+WXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBJbml0RGlmZlBsYXRmb3JtKCl7XHJcbiAgICAgICAgaWYoTGF5YS5Ccm93c2VyLm9uQW5kcm9pZHx8TGF5YS5Ccm93c2VyLm9uSVBob25lfHxMYXlhLkJyb3dzZXIub25Nb2JpbGUpe1xyXG4gICAgIFxyXG4gICAgICAgICAgICB0aGlzLm1fM2RNb3ZlU3BlZWQgPSAwLjAyO1xyXG4gICAgICAgICAgICB0aGlzLm1fM2RSb3RhdGVTcGVlZCA9IDAuMDA0O1xyXG4gICAgICAgICAgICB0aGlzLm1fM2RXaGVlbFNwZWVkID0gMjtcclxuICAgIFxyXG4gICAgICAgICAgICB0aGlzLm1fMmRNb3ZlU3BlZWQgPSAwLjAyO1xyXG4gICAgICAgICAgICB0aGlzLm1fMmRXaGVlbFNwZWVkID0gMjtcclxuICAgIFxyXG4gICAgICAgICAgICB0aGlzLm1fM2RNaW5ab29tRGlzdGFuY2UgPSAtMzA7XHJcbiAgICAgICAgICAgIHRoaXMubV8zZE1heFpvb21EaXN0YW5jZSA9IDEwMDA7XHJcbiAgICAgICAgICAgIHRoaXMubV8zZE1pbkNhbWVyYVBpdGNoUmFkaWFuID0gMTAgKiBNYXRoLlBJIC8gMTgwOyBcclxuICAgICAgICAgICAgdGhpcy5tXzNkTWF4Q2FtZXJhUGl0Y2hSYWRpYW4gPSA5MCAqIE1hdGguUEkgLyAxODA7XHJcbiAgICAgICAgICAgIHRoaXMubV8yZE1pbk9ydGhvZ3JhcGhpY1NpemUgPSAxMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihMYXlhLkJyb3dzZXIub25QQ3x8TGF5YS5Ccm93c2VyLm9uTWFjKXtcclxuICAgICAgICAgICAgdGhpcy5tXzNkTW92ZVNwZWVkID0gMC4wNDtcclxuICAgICAgICAgICAgdGhpcy5tXzNkUm90YXRlU3BlZWQgPSAwLjAwNDtcclxuICAgICAgICAgICAgdGhpcy5tXzNkV2hlZWxTcGVlZCA9IDI7XHJcbiAgICBcclxuICAgICAgICAgICAgdGhpcy5tXzJkTW92ZVNwZWVkID0gMC4wMjtcclxuICAgICAgICAgICAgdGhpcy5tXzJkV2hlZWxTcGVlZCA9IDI7XHJcbiAgICBcclxuICAgICAgICAgICAgdGhpcy5tXzNkTWluWm9vbURpc3RhbmNlID0gLTMwO1xyXG4gICAgICAgICAgICB0aGlzLm1fM2RNYXhab29tRGlzdGFuY2UgPSAxMDAwO1xyXG4gICAgICAgICAgICB0aGlzLm1fM2RNaW5DYW1lcmFQaXRjaFJhZGlhbiA9IDEwICogTWF0aC5QSSAvIDE4MDsgXHJcbiAgICAgICAgICAgIHRoaXMubV8zZE1heENhbWVyYVBpdGNoUmFkaWFuID0gOTAgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgICAgICAgICB0aGlzLm1fMmRNaW5PcnRob2dyYXBoaWNTaXplID0gMTI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBBZGRFdmVuZXRzKCl7XHJcbiAgICAgICAgTGF5YS5zdGFnZS5vbihMYXlhLkV2ZW50Lk1PVVNFX0RPV04sIHRoaXMsIHRoaXMubW91c2VEb3duKTtcclxuICAgICAgICBMYXlhLnN0YWdlLm9uKExheWEuRXZlbnQuTU9VU0VfVVAsIHRoaXMsIHRoaXMubW91c2VVcCk7XHJcbiAgICAgICAgTGF5YS5zdGFnZS5vbihMYXlhLkV2ZW50Lk1PVVNFX1dIRUVMLCB0aGlzLCB0aGlzLm1vdXNlV2hlZWwpO1xyXG4gICAgICAgIExheWEuc3RhZ2Uub24oTGF5YS5FdmVudC5NT1VTRV9NT1ZFLCB0aGlzLCB0aGlzLm1vdXNlTW92ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgTGF5YS5zdGFnZS5vbihMYXlhLkV2ZW50LlJJR0hUX01PVVNFX0RPV04sIHRoaXMsIHRoaXMucmlnaHRNb3VzZURvd24pO1xyXG4gICAgICAgIExheWEuc3RhZ2Uub24oTGF5YS5FdmVudC5SSUdIVF9NT1VTRV9VUCwgdGhpcywgdGhpcy5yaWdodE1vdXNlVXApOyAgICBcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVtb3ZlRXZlbnRzKCl7XHJcbiAgICAgICAgTGF5YS5zdGFnZS5vZmYoTGF5YS5FdmVudC5NT1VTRV9ET1dOLCB0aGlzLCB0aGlzLm1vdXNlRG93bik7XHJcbiAgICAgICAgTGF5YS5zdGFnZS5vZmYoTGF5YS5FdmVudC5NT1VTRV9VUCwgdGhpcywgdGhpcy5tb3VzZVVwKTtcclxuICAgICAgICBMYXlhLnN0YWdlLm9mZihMYXlhLkV2ZW50Lk1PVVNFX1dIRUVMLCB0aGlzLCB0aGlzLm1vdXNlV2hlZWwpO1xyXG4gICAgICAgIExheWEuc3RhZ2Uub2ZmKExheWEuRXZlbnQuTU9VU0VfTU9WRSwgdGhpcywgdGhpcy5tb3VzZU1vdmUpO1xyXG4gICAgICAgIExheWEuc3RhZ2Uub2ZmKExheWEuRXZlbnQuUklHSFRfTU9VU0VfRE9XTiwgdGhpcywgdGhpcy5yaWdodE1vdXNlRG93bik7XHJcbiAgICAgICAgTGF5YS5zdGFnZS5vZmYoTGF5YS5FdmVudC5SSUdIVF9NT1VTRV9VUCwgdGhpcywgdGhpcy5yaWdodE1vdXNlVXApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgbW91c2VEb3duKGU6IExheWEuRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1fY2FtZXJhLnRyYW5zZm9ybS5sb2NhbFJvdGF0aW9uLmdldFlhd1BpdGNoUm9sbCh0aGlzLnlhd1BpdGNoUm9sbCk7XHJcbiAgICAgICAgdGhpcy5tX2xhc3RNb3VzZVggPSBMYXlhLnN0YWdlLm1vdXNlWDtcclxuICAgICAgICB0aGlzLm1fbGFzdE1vdXNlWSA9IExheWEuc3RhZ2UubW91c2VZO1xyXG4gICAgICAgIHRoaXMubV9pc01vdXNlRG93biA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIC8vVHdvIGZpbmdlcnMgb3BlcmF0aW9uXHJcbiAgICAgICAgdmFyIHRvdWNoZXM6IEFycmF5PGFueT4gPSBlLnRvdWNoZXM7XHJcbiAgICAgICAgaWYgKHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICB0aGlzLm1fbGFzdFRvdWNoRmluZ2VyMC54ID0gdG91Y2hlc1swXS5zdGFnZVg7XHJcbiAgICAgICAgICAgIHRoaXMubV9sYXN0VG91Y2hGaW5nZXIwLnkgPSB0b3VjaGVzWzBdLnN0YWdlWTtcclxuICAgICAgICAgICAgdGhpcy5tX2xhc3RUb3VjaEZpbmdlcjEueCA9IHRvdWNoZXNbMV0uc3RhZ2VYO1xyXG4gICAgICAgICAgICB0aGlzLm1fbGFzdFRvdWNoRmluZ2VyMS55ID0gdG91Y2hlc1sxXS5zdGFnZVk7XHJcbiAgICAgICAgICAgIHRoaXMubV9sYXN0RGlzdGFuY2UgPSB0aGlzLmdldERpc3RhbmNlKHRvdWNoZXMpO1xyXG4gICAgICAgICAgICB0aGlzLm1fcHJlUmFkaWFuID0gdGhpcy5hdGFuMkV4dCh0b3VjaGVzWzBdLnN0YWdlWSAtIHRvdWNoZXNbMV0uc3RhZ2VZLCB0b3VjaGVzWzBdLnN0YWdlWCAtIHRvdWNoZXNbMV0uc3RhZ2VYKTtcclxuICAgICAgICAgICAgdGhpcy5tX2lzVHdvRmluZ2Vyc1RvdWNoID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBtb3VzZVVwKGU6TGF5YS5FdmVudCk6dm9pZCB7XHJcbiAgICAgICAgdGhpcy5tX2lzTW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIHRvdWNoZXM6IEFycmF5PGFueT4gPSBlLnRvdWNoZXM7XHJcbiAgICAgICAgaWYgKHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLm1faXNUd29GaW5nZXJzVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHJpZ2h0TW91c2VEb3duKGU6IExheWEuRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1fbGFzdE1vdXNlWCA9IExheWEuc3RhZ2UubW91c2VYO1xyXG4gICAgICAgIHRoaXMubV9sYXN0TW91c2VZID0gTGF5YS5zdGFnZS5tb3VzZVk7XHJcbiAgICAgICAgdGhpcy5tX2lzTW91c2VEb3duID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm1faXNSaWdodE1vdXNlQnV0dG9uRG93biA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHJpZ2h0TW91c2VVcChlOiBMYXlhLkV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5tX2lzTW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tX2lzUmlnaHRNb3VzZUJ1dHRvbkRvd24gPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbW91c2VXaGVlbChlOkxheWEuRXZlbnQpOnZvaWQge1xyXG4gICAgICAgIGlmKGUgPT0gbnVsbCkgcmV0dXJuIDtcclxuICAgICAgICBsZXQgem9vbURlbHRhOiBudW1iZXIgPSBlLmRlbHRhO1xyXG4gICAgICAgIGlmKHRoaXMuSXMyRCl7ICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5tX2NhbWVyYS5vcnRob2dyYXBoaWNWZXJ0aWNhbFNpemUgKz0gLXpvb21EZWx0YSAqIHRoaXMubV8yZFdoZWVsU3BlZWQ7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHRoaXMubV9jYW1lcmEub3J0aG9ncmFwaGljVmVydGljYWxTaXplIDwgdGhpcy5tXzJkTWluT3J0aG9ncmFwaGljU2l6ZSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fY2FtZXJhLm9ydGhvZ3JhcGhpY1ZlcnRpY2FsU2l6ZSA9IHRoaXMubV8yZE1pbk9ydGhvZ3JhcGhpY1NpemU7XHJcbiAgICAgICAgICAgIH0gICAgICAgICAgXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhWm9vbSh6b29tRGVsdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuT25Nb3VzZVdoZWVsKSBcclxuICAgICAgICAgICAgdGhpcy5Pbk1vdXNlV2hlZWwoem9vbURlbHRhKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbW91c2VNb3ZlKGU6IExheWEuRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB2YXIgdG91Y2hlczogQXJyYXk8YW55PiA9IGUudG91Y2hlcztcclxuICAgICAgICBpZiAoIXRvdWNoZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5tb3ZlQ29udHJvbEJ5TW91c2UoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm1vdmVDdHJsQnlUb3VjaCh0b3VjaGVzKTsgICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogIOm8oOagh+aooeW8jyBcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG1vdmVDb250cm9sQnlNb3VzZSgpe1xyXG4gICAgICAgIGlmICh0aGlzLm1faXNNb3VzZURvd24pIHtcclxuICAgICAgICAgICAgbGV0IGRlbHRhWDogbnVtYmVyID0gTGF5YS5zdGFnZS5tb3VzZVggLSB0aGlzLm1fbGFzdE1vdXNlWDtcclxuICAgICAgICAgICAgbGV0IGRlbHRhWTogbnVtYmVyID0gTGF5YS5zdGFnZS5tb3VzZVkgLSB0aGlzLm1fbGFzdE1vdXNlWTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1faXNSaWdodE1vdXNlQnV0dG9uRG93bikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubV9pc0xhc3RUb3VjaERvdWJsZUZpbmdlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YVggPSAwOyBkZWx0YVkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9pc0xhc3RUb3VjaERvdWJsZUZpbmdlcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubW92ZVJpZ2h0KC10aGlzLm1fM2RNb3ZlU3BlZWQgKiBkZWx0YVgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlVXAodGhpcy5tXzNkTW92ZVNwZWVkICogZGVsdGFZKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuUmVmcmVzaExvb2tBdFBvaW50KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLklzMkQpIHJldHVybiA7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGRlbHRhWDogbnVtYmVyID0gTGF5YS5zdGFnZS5tb3VzZVggLSB0aGlzLm1fbGFzdE1vdXNlWDtcclxuICAgICAgICAgICAgICAgIGxldCBkZWx0YVk6IG51bWJlciA9IExheWEuc3RhZ2UubW91c2VZIC0gdGhpcy5tX2xhc3RNb3VzZVk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvdGF0ZUFyb3VuZCgtZGVsdGFZICogdGhpcy5tXzNkUm90YXRlU3BlZWQsIC1kZWx0YVggKiB0aGlzLm1fM2RSb3RhdGVTcGVlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tX2xhc3RNb3VzZVggPSBMYXlhLnN0YWdlLm1vdXNlWDtcclxuICAgICAgICAgICAgdGhpcy5tX2xhc3RNb3VzZVkgPSBMYXlhLnN0YWdlLm1vdXNlWTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDop6bmjqfmqKHlvI9cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG1vdmVDdHJsQnlUb3VjaCh0b3VjaGVzOkFycmF5PGFueT4pe1xyXG4gICAgICAgIGlmICh0b3VjaGVzLmxlbmd0aCA9PSAxICYmICF0aGlzLm1faXNUd29GaW5nZXJzVG91Y2gpIHtcclxuICAgICAgICAgICAgLy/ljZXmjIfop6bmjqdcclxuICAgICAgICAgICAgLy8gdGhpcy5jYW1lcmEudHJhbnNmb3JtLmxvY2FsUm90YXRpb24uZ2V0WWF3UGl0Y2hSb2xsKHRoaXMueWF3UGl0Y2hSb2xsKTtcclxuICAgICAgICAgICAgbGV0IGRlbHRhWDogbnVtYmVyID0gTGF5YS5zdGFnZS5tb3VzZVggLSB0aGlzLm1fbGFzdE1vdXNlWDtcclxuICAgICAgICAgICAgbGV0IGRlbHRhWTogbnVtYmVyID0gTGF5YS5zdGFnZS5tb3VzZVkgLSB0aGlzLm1fbGFzdE1vdXNlWTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1faXNMYXN0VG91Y2hEb3VibGVGaW5nZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAvL+WmguaenOS4iuS4gOasoeaTjeS9nOaYr+WPjOaMhyzlpoLlj4zmjIfmk43kvZzml7Ys5oqs6LW35LiA5oyH5Y+Y5Y2V5oyH5pON5L2cLOimgeWBmuS4qua4hembtizpmLLmraLmkYTlg4/mnLrot7Pot4NcclxuICAgICAgICAgICAgICAgIGRlbHRhWCA9IDA7XHJcbiAgICAgICAgICAgICAgICBkZWx0YVkgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2lzTGFzdFRvdWNoRG91YmxlRmluZ2VycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vbGV0IHNwZWVkOiBudW1iZXIgPSAwLjA2O1xyXG4gICAgICAgICAgICB0aGlzLm1vdmVSaWdodCgtdGhpcy5tXzNkTW92ZVNwZWVkICogZGVsdGFYKTtcclxuICAgICAgICAgICAgdGhpcy5tb3ZlVXAodGhpcy5tXzNkTW92ZVNwZWVkICogZGVsdGFZKTtcclxuICAgICAgICAgICAgdGhpcy5tX2xhc3RNb3VzZVggPSBMYXlhLnN0YWdlLm1vdXNlWDtcclxuICAgICAgICAgICAgdGhpcy5tX2xhc3RNb3VzZVkgPSBMYXlhLnN0YWdlLm1vdXNlWTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuUmVmcmVzaExvb2tBdFBvaW50KCk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0b3VjaGVzLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuSXMyRCl7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGlzdGFuY2UyOiBudW1iZXIgPSB0aGlzLmdldERpc3RhbmNlKHRvdWNoZXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmFjdG9yMjogbnVtYmVyID0gMC4xO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBwaW5jaFZhbHVlMjogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBwaW5jaFZhbHVlMiA9IChkaXN0YW5jZTIgLSB0aGlzLm1fbGFzdERpc3RhbmNlKSAqIGZhY3RvcjI7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2xhc3REaXN0YW5jZSA9IGRpc3RhbmNlMjtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fY2FtZXJhLm9ydGhvZ3JhcGhpY1ZlcnRpY2FsU2l6ZSAtPSBwaW5jaFZhbHVlMjsgICBcclxuXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLm1fY2FtZXJhLm9ydGhvZ3JhcGhpY1ZlcnRpY2FsU2l6ZSA8IHRoaXMubV8yZE1pbk9ydGhvZ3JhcGhpY1NpemUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9jYW1lcmEub3J0aG9ncmFwaGljVmVydGljYWxTaXplID0gdGhpcy5tXzJkTWluT3J0aG9ncmFwaGljU2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfWVsc2V7XHJcblxyXG4gICAgICAgICAgICAgICAgLy/lj4zmjIfop6bmjqdcclxuICAgICAgICAgICAgICAgIHRoaXMubV9pc1R3b0ZpbmdlcnNUb3VjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1faXNMYXN0VG91Y2hEb3VibGVGaW5nZXJzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdHdvRmluZ2Vyc0Rpc3RhbmNlOiBudW1iZXIgPSB0aGlzLmdldFR3b0ZpbmdlcnNEaXN0YW5jZSh0b3VjaGVzKTtcclxuICAgICAgICAgICAgICAgIGxldCBkZWx0YURpc3RhbmNlOiBudW1iZXIgPSBNYXRoLmFicyh0d29GaW5nZXJzRGlzdGFuY2UgLSB0aGlzLm1fdHdvRmluZ2Vyc0Rpc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV90d29GaW5nZXJzRGlzdGFuY2UgPSB0d29GaW5nZXJzRGlzdGFuY2U7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vVHdvIGZpbmdlcnMgZHJhZ1xyXG4gICAgICAgICAgICAgICAgbGV0IGRlbHRhWDA6IG51bWJlciA9IHRvdWNoZXNbMF0uc3RhZ2VYIC0gdGhpcy5tX2xhc3RUb3VjaEZpbmdlcjAueDtcclxuICAgICAgICAgICAgICAgIGxldCBkZWx0YVkwOiBudW1iZXIgPSB0b3VjaGVzWzBdLnN0YWdlWSAtIHRoaXMubV9sYXN0VG91Y2hGaW5nZXIwLnk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGVsdGFYMTogbnVtYmVyID0gdG91Y2hlc1sxXS5zdGFnZVggLSB0aGlzLm1fbGFzdFRvdWNoRmluZ2VyMS54O1xyXG4gICAgICAgICAgICAgICAgbGV0IGRlbHRhWTE6IG51bWJlciA9IHRvdWNoZXNbMV0uc3RhZ2VZIC0gdGhpcy5tX2xhc3RUb3VjaEZpbmdlcjEueTtcclxuICAgICAgICAgICAgICAgIGxldCBkZWx0YVkgPSAoZGVsdGFZMCArIGRlbHRhWTEpICogMC41O1xyXG4gICAgICAgICAgICAgICAgbGV0IGRlbHRhWCA9IChkZWx0YVgwICsgZGVsdGFYMSkgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvdGF0ZUFyb3VuZCgtZGVsdGFZICogdGhpcy5tXzNkUm90YXRlU3BlZWQsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubV9sYXN0VG91Y2hGaW5nZXIwLnggPSB0b3VjaGVzWzBdLnN0YWdlWDtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9sYXN0VG91Y2hGaW5nZXIwLnkgPSB0b3VjaGVzWzBdLnN0YWdlWTtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9sYXN0VG91Y2hGaW5nZXIxLnggPSB0b3VjaGVzWzFdLnN0YWdlWDtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9sYXN0VG91Y2hGaW5nZXIxLnkgPSB0b3VjaGVzWzFdLnN0YWdlWTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL1R3byBmaW5nZXJzIHBpbmNoXHJcbiAgICAgICAgICAgICAgICBsZXQgZGlzdGFuY2U6IG51bWJlciA9IHRoaXMuZ2V0RGlzdGFuY2UodG91Y2hlcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmYWN0b3I6IG51bWJlciA9IDAuMDE7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGluY2hWYWx1ZTogbnVtYmVyID0gMDtcclxuICAgICAgICAgICAgICAgIHBpbmNoVmFsdWUgKz0gKGRpc3RhbmNlIC0gdGhpcy5tX2xhc3REaXN0YW5jZSkgKiBmYWN0b3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1fbGFzdERpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaW5nZXJQaW5jaFNwZWVkOiBudW1iZXIgPSAxMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhWm9vbShwaW5jaFZhbHVlICogZmluZ2VyUGluY2hTcGVlZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5PbkRvdWJsZUZpbmdlcnNQaW5jaClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLk9uRG91YmxlRmluZ2Vyc1BpbmNoKHBpbmNoVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvL1R3byBmaW5nZXJzIHR3aXN0XHJcbiAgICAgICAgICAgICAgICBsZXQgbm93UmFkaWFuOiBudW1iZXIgPSB0aGlzLmF0YW4yRXh0KHRvdWNoZXNbMF0uc3RhZ2VZIC0gdG91Y2hlc1sxXS5zdGFnZVksIHRvdWNoZXNbMF0uc3RhZ2VYIC0gdG91Y2hlc1sxXS5zdGFnZVgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGRlbHRhUmFkaWFuOiBudW1iZXIgPSBub3dSYWRpYW4gLSB0aGlzLm1fcHJlUmFkaWFuO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlbHRhUmFkaWFuICE9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHdpc3RWYWx1ZTogbnVtYmVyID0gMTgwIC8gTWF0aC5QSSAqIGRlbHRhUmFkaWFuO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm90YXRlQXJvdW5kKDAsIHR3aXN0VmFsdWUgKiAwLjEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9wcmVSYWRpYW4gPSBub3dSYWRpYW47XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuT25Eb3VibGVGaW5nZXJzVHdpc3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuT25Eb3VibGVGaW5nZXJzVHdpc3QodHdpc3RWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlkJHliY3np7vliqjjgIJcclxuICAgICAqIEBwYXJhbSBkaXN0YW5jZSDnp7vliqjot53nprvjgIJcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG1vdmVGb3J3YXJkKGRpc3RhbmNlOm51bWJlcik6dm9pZCB7XHJcbiAgICAgICAgdGhpcy5tX3RlbXBWZWN0b3IzLnggPSB0aGlzLm1fdGVtcFZlY3RvcjMueSA9IDA7XHJcbiAgICAgICAgdGhpcy5tX3RlbXBWZWN0b3IzLnogPSBkaXN0YW5jZTtcclxuICAgICAgICB0aGlzLm1fY2FtZXJhLnRyYW5zZm9ybS50cmFuc2xhdGUodGhpcy5tX3RlbXBWZWN0b3IzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDlkJHlj7Pnp7vliqjjgIJcclxuICAgICAqIEBwYXJhbSBkaXN0YW5jZSDnp7vliqjot53nprvjgIJcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG1vdmVSaWdodChkaXN0YW5jZTpudW1iZXIpOnZvaWQge1xyXG4gICAgICAgIHRoaXMubV90ZW1wVmVjdG9yMy55ID0gdGhpcy5tX3RlbXBWZWN0b3IzLnogPSAwO1xyXG4gICAgICAgIHRoaXMubV90ZW1wVmVjdG9yMy54ID0gZGlzdGFuY2U7XHJcbiAgICAgICAgdGhpcy5tX2NhbWVyYS50cmFuc2Zvcm0udHJhbnNsYXRlKHRoaXMubV90ZW1wVmVjdG9yMyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICog5ZCR5LiK56e75Yqo44CCXHJcbiAgICAgKiBAcGFyYW0gZGlzdGFuY2Ug56e75Yqo6Led56a744CCXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBtb3ZlVXAoZGlzdGFuY2U6bnVtYmVyKTp2b2lkIHtcclxuICAgICAgICB0aGlzLm1fdGVtcFZlY3RvcjMueCA9IHRoaXMubV90ZW1wVmVjdG9yMy56ID0gMDtcclxuICAgICAgICB0aGlzLm1fdGVtcFZlY3RvcjMueSA9IGRpc3RhbmNlO1xyXG4gICAgICAgIHRoaXMubV9jYW1lcmEudHJhbnNmb3JtLnRyYW5zbGF0ZSh0aGlzLm1fdGVtcFZlY3RvcjMsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57yp5pS+XHJcbiAgICAgKiBAcGFyYW0gZGVsdGEgXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBjYW1lcmFab29tKGRlbHRhOiBudW1iZXIpOiB2b2lke1xyXG4gICAgICAgIC8vIGlmKHRoaXMubV9oaXRPYmplY3QhPW51bGwgJiYgIXRoaXMubV9pc1JpZ2h0TW91c2VEb3duKXtcclxuICAgICAgICAvLyAgICAgdGhpcy5tX2ZvcndhcmRMZW5ndGggPSB0aGlzLmdldFR3b1BvaW50c0Rpc3RhbmNlKFxyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy5tX2NhbWVyYS50cmFuc2Zvcm0ucG9zaXRpb24sdGhpcy5tX2hpdFBvaW50KTsgICAgICAgIFxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBsZXQgY3VycmVudEZvcndhcmRMZW5ndGg6IG51bWJlciA9IHRoaXMubV9mb3J3YXJkTGVuZ3RoO1xyXG4gICAgICAgIGxldCBkaXN0YW5jZTogbnVtYmVyID0gLWRlbHRhICogdGhpcy5tXzNkV2hlZWxTcGVlZDtcclxuICAgICAgICBjdXJyZW50Rm9yd2FyZExlbmd0aCArPSBkaXN0YW5jZTtcclxuICAgICAgICBpZiAoZGVsdGEgPiAwKSB7XHJcbiAgICAgICAgICAgIC8v5ouJ6L+RXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50Rm9yd2FyZExlbmd0aCA8IHRoaXMubV8zZE1pblpvb21EaXN0YW5jZSkgIFxyXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgKz0gKHRoaXMubV8zZE1pblpvb21EaXN0YW5jZSAtIGN1cnJlbnRGb3J3YXJkTGVuZ3RoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy/mi4nov5xcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRGb3J3YXJkTGVuZ3RoID4gdGhpcy5tXzNkTWF4Wm9vbURpc3RhbmNlKSAgXHJcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSAtPSAoY3VycmVudEZvcndhcmRMZW5ndGggLSB0aGlzLm1fM2RNYXhab29tRGlzdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1vdmVGb3J3YXJkKGRpc3RhbmNlKTtcclxuICAgICAgICB0aGlzLm1fZm9yd2FyZExlbmd0aCArPSBkaXN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaXi+i9rFxyXG4gICAgICogQHBhcmFtIGFuZ2xlWCBcclxuICAgICAqIEBwYXJhbSBhbmdsZVkgXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCByb3RhdGVBcm91bmQoYW5nbGVYOiBudW1iZXIsIGFuZ2xlWTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRSYWRpYW46IG51bWJlciA9IHRoaXMubV9jdXJyZW50UGl0Y2hSYWRpYW47XHJcbiAgICAgICAgY3VycmVudFJhZGlhbiAtPSBhbmdsZVg7XHJcbiAgICAgICAgaWYgKGFuZ2xlWCA8IDApIHtcclxuICAgICAgICAgICAgLy/kuIvmi5bliqgs5b6A5LiK6L2sXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UmFkaWFuID4gdGhpcy5tXzNkTWF4Q2FtZXJhUGl0Y2hSYWRpYW4pICBcclxuICAgICAgICAgICAgICAgIGFuZ2xlWCArPSAoY3VycmVudFJhZGlhbiAtIHRoaXMubV8zZE1heENhbWVyYVBpdGNoUmFkaWFuKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvL+S4iuaLluWKqCzlvoDkuIvovaxcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSYWRpYW4gPCB0aGlzLm1fM2RNaW5DYW1lcmFQaXRjaFJhZGlhbikgIFxyXG4gICAgICAgICAgICAgICAgYW5nbGVYICs9IChjdXJyZW50UmFkaWFuIC0gdGhpcy5tXzNkTWluQ2FtZXJhUGl0Y2hSYWRpYW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5tX2NhbWVyYS50cmFuc2Zvcm0ucm90YXRlKG5ldyBWZWN0b3IzKGFuZ2xlWCwgMCwgMCkpO1xyXG4gICAgICAgIHRoaXMubV9jYW1lcmEudHJhbnNmb3JtLnJvdGF0ZShuZXcgVmVjdG9yMygwLCBhbmdsZVksIDApLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIGxldCBmb3J3YXJkOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcclxuICAgICAgICB0aGlzLm1fY2FtZXJhLnRyYW5zZm9ybS5nZXRGb3J3YXJkKGZvcndhcmQpO1xyXG4gICAgICAgIGxldCBuZXdQb3NpdGlvbjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XHJcbiAgICAgICAgVmVjdG9yMy5zY2FsZShmb3J3YXJkLCAtMSwgZm9yd2FyZCk7XHJcbiAgICAgICAgbmV3UG9zaXRpb24gPSB0aGlzLkZvcndhcmQodGhpcy5tX2xvb2tBdFBvaW50LCBmb3J3YXJkLCB0aGlzLm1fZm9yd2FyZExlbmd0aCk7XHJcbiAgICAgICAgdGhpcy5tX2NhbWVyYS50cmFuc2Zvcm0ucG9zaXRpb24gPSBuZXdQb3NpdGlvbjtcclxuXHJcbiAgICAgICAgdGhpcy5SZWZyZXNoUGl0Y2hSYWRpYW4oKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIF91cGRhdGVSb3RhdGlvbigpOnZvaWQge1xyXG4gICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnlhd1BpdGNoUm9sbC55KSA8IDEuNTApIHtcclxuICAgICAgICAgICAgTGF5YS5RdWF0ZXJuaW9uLmNyZWF0ZUZyb21ZYXdQaXRjaFJvbGwodGhpcy55YXdQaXRjaFJvbGwueCwgdGhpcy55YXdQaXRjaFJvbGwueSwgdGhpcy55YXdQaXRjaFJvbGwueiwgdGhpcy50ZW1wUm90YXRpb25aKTtcclxuICAgICAgICAgICAgdGhpcy50ZW1wUm90YXRpb25aLmNsb25lVG8odGhpcy5tX2NhbWVyYS50cmFuc2Zvcm0ubG9jYWxSb3RhdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMubV9jYW1lcmEudHJhbnNmb3JtLmxvY2FsUm90YXRpb24gPSB0aGlzLm1fY2FtZXJhLnRyYW5zZm9ybS5sb2NhbFJvdGF0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL+aKik1hdGguYXRhbjLlgLzln5/mmKDlsITliLBbMCwgMnBpXVxyXG4gICAgcHJvdGVjdGVkIGF0YW4yRXh0KHk6IG51bWJlciwgeDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgcmFkaWFuOiBudW1iZXIgPSBNYXRoLmF0YW4yKHksIHgpO1xyXG4gICAgICAgIGlmIChyYWRpYW4gPj0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHJhZGlhbjtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiByYWRpYW4gKyAyICogTWF0aC5QSTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0VHdvRmluZ2Vyc0Rpc3RhbmNlKHRvdWNoZXM6IEFycmF5PGFueT4pOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBmaW5nZXJzRGlzdGFuY2U6IG51bWJlciA9IDA7XHJcbiAgICAgICAgdmFyIGR4OiBudW1iZXIgPSB0b3VjaGVzWzBdLnN0YWdlWCAtIHRvdWNoZXNbMV0uc3RhZ2VYO1xyXG4gICAgICAgIHZhciBkeTogbnVtYmVyID0gdG91Y2hlc1swXS5zdGFnZVkgLSB0b3VjaGVzWzFdLnN0YWdlWTtcclxuICAgICAgICBmaW5nZXJzRGlzdGFuY2UgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xyXG4gICAgICAgIHJldHVybiBmaW5nZXJzRGlzdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHJvdGF0ZUFyb3VuZFkocG9uaXQ6IFZlY3RvcjMsIHJhZGl1czogbnVtYmVyLCBhbmdsZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHBvc1g6IG51bWJlciA9IE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cztcclxuICAgICAgICBsZXQgcG9zWTogbnVtYmVyID0gTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzO1xyXG4gICAgICAgIHRoaXMubV9jYW1lcmEudHJhbnNmb3JtLnBvc2l0aW9uID0gbmV3IFZlY3RvcjMocG9zWCwgdGhpcy5tX2NhbWVyYS50cmFuc2Zvcm0ucG9zaXRpb24ueSwgcG9zWSk7XHJcbiAgICAgICAgdGhpcy5tX2NhbWVyYS50cmFuc2Zvcm0ubG9va0F0KHBvbml0LCBuZXcgVmVjdG9yMygwLCAxLCAwKSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCByb3RhdGVBcm91bmRYKHBvbml0OiBWZWN0b3IzLCByYWRpdXM6IG51bWJlciwgYW5nbGU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubV9jYW1lcmEudHJhbnNmb3JtLnJvdGF0ZShuZXcgVmVjdG9yMyhhbmdsZSwgMCwgMCkpO1xyXG4gICAgICAgIGxldCBmb3J3YXJkOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcclxuICAgICAgICB0aGlzLm1fY2FtZXJhLnRyYW5zZm9ybS5nZXRGb3J3YXJkKGZvcndhcmQpO1xyXG4gICAgICAgIGxldCBwb3NpdGlvbjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7ICAgXHJcbiAgICAgICAgbGV0IGRlbHRhUG9zaXRpb246IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpOyAgIFxyXG4gICAgICAgIFZlY3RvcjMuc2NhbGUoZm9yd2FyZCwgLXJhZGl1cywgZGVsdGFQb3NpdGlvbik7IFxyXG4gICAgICAgIFZlY3RvcjMuYWRkKHBvbml0LCBkZWx0YVBvc2l0aW9uLCBwb3NpdGlvbik7IFxyXG4gICAgICAgIHRoaXMubV9jYW1lcmEudHJhbnNmb3JtLnBvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgLy/orqHnrpfkuKTkuKrop6bmkbjngrnkuYvpl7TnmoTot53nprtcclxuICAgIHByb3RlY3RlZCBnZXREaXN0YW5jZShwb2ludHM6IEFycmF5PGFueT4pOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBkaXN0YW5jZTpudW1iZXIgPSAwO1xyXG4gICAgICAgIGlmIChwb2ludHMgJiYgcG9pbnRzLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgIHZhciBkeDogbnVtYmVyID0gcG9pbnRzWzBdLnN0YWdlWCAtIHBvaW50c1sxXS5zdGFnZVg7XHJcbiAgICAgICAgICAgIHZhciBkeTogbnVtYmVyID0gcG9pbnRzWzBdLnN0YWdlWSAtIHBvaW50c1sxXS5zdGFnZVk7XHJcbiAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgZ2V0VHdvUG9pbnRzRGlzdGFuY2UocG9pbnRBOiBWZWN0b3IzLCBwb2ludEI6IFZlY3RvcjMpOiBudW1iZXIge1xyXG4gICAgICAgIHZhciBkaXN0YW5jZTogbnVtYmVyID0gMDtcclxuICAgICAgICB2YXIgZHg6IG51bWJlciA9IHBvaW50QS54IC0gcG9pbnRCLng7XHJcbiAgICAgICAgdmFyIGR5OiBudW1iZXIgPSBwb2ludEEueSAtIHBvaW50Qi55O1xyXG4gICAgICAgIHZhciBkejogbnVtYmVyID0gcG9pbnRBLnogLSBwb2ludEIuejtcclxuICAgICAgICBkaXN0YW5jZSA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSArIGR6ICogZHopO1xyXG4gICAgICAgIHJldHVybiBkaXN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgRm9yd2FyZChwb3NpdGlvbjogVmVjdG9yMywgZGlyZWN0aW9uOiBWZWN0b3IzLCBkaXN0YW5jZTogbnVtYmVyKTogVmVjdG9yMyB7XHJcbiAgICAgICAgbGV0IGRlbHRhUG9zaXRpb246IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpOyAgIFxyXG4gICAgICAgIGxldCBuZXdQb3NpdGlvbjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7ICAgXHJcbiAgICAgICAgVmVjdG9yMy5zY2FsZShkaXJlY3Rpb24sIGRpc3RhbmNlLCBkZWx0YVBvc2l0aW9uKTsgXHJcbiAgICAgICAgVmVjdG9yMy5hZGQocG9zaXRpb24sIGRlbHRhUG9zaXRpb24sIG5ld1Bvc2l0aW9uKTsgXHJcbiAgICAgICAgcmV0dXJuIG5ld1Bvc2l0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBSZWZyZXNoTG9va0F0UG9pbnQoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGZvcndhcmQ6IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICAgIHRoaXMubV9jYW1lcmEudHJhbnNmb3JtLmdldEZvcndhcmQoZm9yd2FyZCk7XHJcbiAgICAgICAgdGhpcy5tX2xvb2tBdFBvaW50ID0gdGhpcy5Gb3J3YXJkKHRoaXMubV9jYW1lcmEudHJhbnNmb3JtLnBvc2l0aW9uLCBmb3J3YXJkLCB0aGlzLm1fZm9yd2FyZExlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlZnJlc2hQaXRjaFJhZGlhbigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1fY2FtZXJhLnRyYW5zZm9ybS5sb2NhbFJvdGF0aW9uLmdldFlhd1BpdGNoUm9sbCh0aGlzLnlhd1BpdGNoUm9sbCk7XHJcbiAgICAgICAgdGhpcy5tX2N1cnJlbnRQaXRjaFJhZGlhbiA9IE1hdGguYWJzKHRoaXMueWF3UGl0Y2hSb2xsLnkpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvL3RlbXBcclxuICAgIHByb3RlY3RlZCBDYW1lcmFUb1plcm9EaXN0YW5jZSgpe1xyXG4gICAgICAgIHZhciBkaXM6bnVtYmVyID0gMDtcclxuICAgICAgICBpZih0aGlzLklzMkQpe1xyXG4gICAgICAgICAgICBkaXMgPSB0aGlzLm1fY2FtZXJhLm9ydGhvZ3JhcGhpY1ZlcnRpY2FsU2l6ZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgbGV0IGNhbVBvcyA9IHRoaXMubV9jYW1lcmEudHJhbnNmb3JtLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICBkaXMgPSBWZWN0b3IzLmRpc3RhbmNlKGNhbVBvcyxWZWN0b3IzLl9aRVJPKTtcclxuICAgICAgICAgICAgdGhpcy5tX2xhYmVsLnRleHQgKz0gXCLmkYTlg4/mnLrliLDljp/ngrnnmoTot53nprvvvJpcIiArIGRpczsgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBFdmVudE1hbmFnZXIuSW5zdGFuY2UoKS5Qb3N0RXZlbnQoRXZlbnRzLk9uQ2FtZXJhRGlzdGFuY2VDaGFuZ2VkLnRvU3RyaW5nKCksZGlzKTsgICAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgXHJcbiAgICAvKipcclxuICAgICAqIOe7lee7meWumueCueWSjOi9tOaXi+i9rFxyXG4gICAgICogQHBhcmFtIHRhcmdldCDml4vovazlr7nosaFcclxuICAgICAqIEBwYXJhbSByb3RhdGVQb3Mg57uZ5a6a54K55L2N572uXHJcbiAgICAgKiBAcGFyYW0gZGlyIOe7meWumuaWueWQkVxyXG4gICAgICogQHBhcmFtIGFuZ2xlIOaXi+i9rOinkuW6pu+8jOW8p+W6plxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgUm90YXRlQXJvdW5kKHRhcmdldDpMYXlhLlNwcml0ZTNELHJvdGF0ZVBvczpMYXlhLlZlY3RvcjMsZGlyOkxheWEuVmVjdG9yMyxhbmdsZTpudW1iZXIpe1xyXG4gICAgICAgIC8v5Yib5bu65LiA5Liq5Zub5YWD5pWwXHJcbiAgICAgICAgbGV0IHF1YXRlcm5pb24gPSBuZXcgTGF5YS5RdWF0ZXJuaW9uKCk7XHJcbiAgICAgICAgTGF5YS5RdWF0ZXJuaW9uLmNyZWF0ZUZyb21BeGlzQW5nbGUoZGlyLGFuZ2xlLHF1YXRlcm5pb24pO1xyXG5cclxuICAgICAgICAvL+iuoeeul+aXi+i9rOWQjueahFBvc2l0aW9uXHJcbiAgICAgICAgbGV0IGRlbHRhcG9zID0gbmV3IExheWEuVmVjdG9yMygpO1xyXG4gICAgICAgIExheWEuVmVjdG9yMy5zdWJ0cmFjdCh0YXJnZXQudHJhbnNmb3JtLnBvc2l0aW9uLHJvdGF0ZVBvcyxkZWx0YXBvcyk7XHJcbiAgICAgICAgbGV0IGNoYW5nZVZlY3RvcjMgOkxheWEuVmVjdG9yMyA9IG5ldyBMYXlhLlZlY3RvcjMoKTtcclxuICAgICAgICBMYXlhLlZlY3RvcjMudHJhbnNmb3JtUXVhdChkZWx0YXBvcyxxdWF0ZXJuaW9uLGNoYW5nZVZlY3RvcjMpO1xyXG4gICAgICAgIGxldCByZXN1bHRQb3MgID0gbmV3IExheWEuVmVjdG9yMygpOyBcclxuICAgICAgICBMYXlhLlZlY3RvcjMuYWRkKGNoYW5nZVZlY3RvcjMscm90YXRlUG9zLHJlc3VsdFBvcyk7XHJcbiAgICAgICAgdGFyZ2V0LnRyYW5zZm9ybS5wb3NpdGlvbiA9IHJlc3VsdFBvcztcclxuXHJcbiAgICAgICAgLy/orqHnrpfml4vovazlkI7nmoRSb3RhdGlvblxyXG4gICAgICAgIGxldCBuZXdSb3RhdGlvbiA9IG5ldyBMYXlhLlF1YXRlcm5pb24oKTtcclxuICAgICAgICBMYXlhLlF1YXRlcm5pb24ubXVsdGlwbHkodGFyZ2V0LnRyYW5zZm9ybS5yb3RhdGlvbixxdWF0ZXJuaW9uLG5ld1JvdGF0aW9uKTtcclxuICAgICAgICB0YXJnZXQudHJhbnNmb3JtLnJvdGF0aW9uID0gbmV3Um90YXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgIC8qKlxyXG4gICAgICog5qC55o2u56Kw5pKe5a+56LGh55qE5L2N572u77yM6K6+572u5pGE5YOP5py655qE57yp5pS+5ZKM5peL6L2s6L20562J77ybXHJcbiAgICAgKiDml4vovazmk43kvZzvvIzku6XlsY/luZXkuK3lv4Pngrnlj5Hlh7rlsITnur/vvIzlpoLmnpzmnInnorDmkp7lr7nosaHvvIzliJnlsIbnorDmkp7ngrnkvZzkuLrml4vovazkuK3lv4PvvIzlpoLmnpzmsqHmnInliJnlsIbvvIgwLDAsMO+8ieiuvuS4uuaXi+i9rOS4reW/g++8m1xyXG4gICAgICog57yp5pS+5pON5L2c77yM5Lul6byg5qCH5L2N572u5Y+R5Ye65bCE57q/77yM6Iul5pyJ56Kw5pKe5a+56LGh77yM5YiZ5qC55o2u56Kw5pKe54K55LiO5pGE5YOP5py655qE6Led56a76ZmQ5Yi25pGE5YOP5py655qE5pyA5bCP6Led56a777ybXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBSYXlDYXN0SGl0KCl7XHJcbiAgICAgICAgaWYodGhpcy5tX2NhbWVyYSE9bnVsbCAmJiB0aGlzLm1fc2NlbmUzZCE9bnVsbCl7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1fbW91c2VQb2ludC54ID0gTGF5YS5zdGFnZS5tb3VzZVg7XHJcbiAgICAgICAgICAgIHRoaXMubV9tb3VzZVBvaW50LnkgPSBMYXlhLnN0YWdlLm1vdXNlWTsgICBcclxuXHJcbiAgICAgICAgICAgIHRoaXMubV9jYW1lcmEudmlld3BvcnRQb2ludFRvUmF5KHRoaXMubV9tb3VzZVBvaW50LHRoaXMubV9yYXkpO1xyXG4gICAgICAgICAgICB0aGlzLm1fc2NlbmUzZC5waHlzaWNzU2ltdWxhdGlvbi5yYXlDYXN0KHRoaXMubV9yYXksdGhpcy5tX2hpdFJlc3VsdCk7XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLm1faGl0UmVzdWx0LnN1Y2NlZWRlZCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1faGl0T2JqZWN0ID0gdGhpcy5tX2hpdFJlc3VsdC5jb2xsaWRlci5vd25lciBhcyBMYXlhLk1lc2hTcHJpdGUzRDtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9oaXRQb2ludCA9IHRoaXMubV9oaXRSZXN1bHQucG9pbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHRoaXMubV9oaXRPYmplY3QgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yib5bu65LiA5LiqTGFibGVcclxuICAgICAqIEBwYXJhbSBjb2xvciBcclxuICAgICAqIEBwYXJhbSBzdHJva2VDb2xvciBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVMYWJlbChwb3M6TGF5YS5WZWN0b3IyLCBjb2xvcj86IHN0cmluZywgc3Ryb2tlQ29sb3I/OiBzdHJpbmcpOiBMYWJlbCB7XHJcbiAgICAgICAgY29uc3QgX2NvbG9yID0gXCIjZmZmZmZmXCI7XHJcbiAgICAgICAgY29uc3QgX3N0cm9rZUNvbG9yID0gXCIjMDAwMDAwXCI7XHJcbiAgICAgICAgY29uc3QgX3N0cm9rZVdpZHRoOiBudW1iZXIgPSAxO1xyXG5cclxuICAgICAgICB2YXIgbGFiZWw6IExhYmVsID0gbmV3IExhYmVsKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGFiZWwuZm9udCA9IFwiTWljcm9zb2Z0IFlhSGVpXCI7XHJcbiAgICAgICAgbGFiZWwudGV4dCA9IFwiU0FNUExFIERFTU9cIjtcclxuICAgICAgICBsYWJlbC5mb250U2l6ZSA9IDIwO1xyXG4gICAgICAgIGlmKGNvbG9yKXtcclxuICAgICAgICAgICAgbGFiZWwuY29sb3IgPSBjb2xvcjtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgbGFiZWwuY29sb3IgPSBfY29sb3I7XHJcbiAgICAgICAgfSAgICBcclxuICAgICAgICBpZiAoc3Ryb2tlQ29sb3IpIHtcclxuICAgICAgICAgICAgbGFiZWwuc3Ryb2tlID0gX3N0cm9rZVdpZHRoO1xyXG4gICAgICAgICAgICBsYWJlbC5zdHJva2VDb2xvciA9IF9zdHJva2VDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGFiZWwucG9zKHBvcy54LHBvcy55KTtcclxuICAgICAgICBMYXlhLnN0YWdlLmFkZENoaWxkKGxhYmVsKTtcclxuICAgICAgICByZXR1cm4gbGFiZWw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgU2hvd0luZm8oKXtcclxuICAgICAgICB2YXIgcG9zOkxheWEuVmVjdG9yMyA9IHRoaXMubV9jYW1lcmEudHJhbnNmb3JtLnBvc2l0aW9uO1xyXG4gICAgICAgIHZhciByb3Q6TGF5YS5WZWN0b3IzID0gdGhpcy5tX2NhbWVyYS50cmFuc2Zvcm0ucm90YXRpb25FdWxlcjtcclxuICAgICAgICB0aGlzLm1fbGFiZWwudGV4dCA9IFwiQ2FtZXJhIFBvcyA6IChcIiArIHBvcy54LnRvRml4ZWQoMikgKyBcIixcIiArIHBvcy55LnRvRml4ZWQoMikgKyBcIixcIiArIHBvcy56LnRvRml4ZWQoMikgKyBcIilcIiArIFwiXFxuXCI7XHJcbiAgICAgICAgdGhpcy5tX2xhYmVsLnRleHQgKz0gXCJDYW1lcmEgUm90IDogKFwiICsgcm90LngudG9GaXhlZCgyKSArIFwiLFwiICsgcm90LnkudG9GaXhlZCgyKSArIFwiLFwiICsgcm90LnoudG9GaXhlZCgyKSArIFwiKVwiKyBcIlxcblwiO1xyXG4gICAgICAgIHRoaXMubV9sYWJlbC50ZXh0ICs9IFwiQ2FtZXJhIG9ydGhvZ3JhcGhpY1ZlcnRpY2FsU2l6ZSA6IFwiICsgdGhpcy5tX2NhbWVyYS5vcnRob2dyYXBoaWNWZXJ0aWNhbFNpemUrIFwiXFxuXCI7XHJcbiAgICAgICAgdGhpcy5tX2xhYmVsLnRleHQgKz0gXCJNb3VzZSBQb3NYIDogXCIgKyBMYXlhLnN0YWdlLm1vdXNlWCsgXCJcXG5cIjtcclxuICAgICAgICB0aGlzLm1fbGFiZWwudGV4dCArPSBcIk1vdXNlIFBvc1kgOiBcIiArIExheWEuc3RhZ2UubW91c2VZKyBcIlxcblwiO1xyXG5cclxuICAgICAgICB0aGlzLm1fbGFiZWwudGV4dCArPSBcIuaYr+WQpuWcqDJEOiBcIiArIHRoaXMuSXMyRCArIFwiXFxuXCI7XHJcbiAgICAgICAgdGhpcy5tX2xhYmVsLnRleHQgKz0gXCJ0aGlzIGZvcndhcmRsZW5ndGg6IFwiICsgdGhpcy5tX2ZvcndhcmRMZW5ndGggKyBcIlxcblwiO1xyXG5cclxuICAgICAgICB0aGlzLm1fbGFiZWwudGV4dCArPSBcIjNkTW92ZVNwZWVkIDogXCIgKyAgIHRoaXMubV8zZE1vdmVTcGVlZCsgXCJcXG5cIjtcclxuICAgICAgICB0aGlzLm1fbGFiZWwudGV4dCArPSBcIjJkTW92ZVNwZWVkIDogXCIgKyAgIHRoaXMubV8yZE1vdmVTcGVlZCsgXCJcXG5cIjtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgR2FtZU1hbmFnZXIgZnJvbSBcIi4uL0dhbWVNYW5hZ2VyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYWJlbFVwZGF0UG9zIGV4dGVuZHMgTGF5YS5TY3JpcHR7XHJcblxyXG4gICAgcHJpdmF0ZSBtX3BhcmVudCA6IExheWEuTWVzaFNwcml0ZTNEO1xyXG4gICAgcHJpdmF0ZSBtX2NhbWVyYSA6IExheWEuQ2FtZXJhO1xyXG4gICAgcHJpdmF0ZSBtX2xhYmVsIDogTGF5YS5MYWJlbDtcclxuXHJcbiAgICBwcml2YXRlIG1fZm9udHNpemU6bnVtYmVyO1xyXG5cclxuICAgIG9uQXdha2UoKXtcclxuICAgICAgICB0aGlzLm1fbGFiZWwgPSB0aGlzLm93bmVyIGFzIExheWEuTGFiZWw7XHJcbiAgICAgICAgaWYoTGF5YS5Ccm93c2VyLm9uQW5kcm9pZHx8TGF5YS5Ccm93c2VyLm9uSVBob25lfHxMYXlhLkJyb3dzZXIub25Nb2JpbGUpe1xyXG4gICAgICAgICAgICB0aGlzLm1fZm9udHNpemUgPSAyNTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihMYXlhLkJyb3dzZXIub25QQ3x8TGF5YS5Ccm93c2VyLm9uTWFjKXtcclxuICAgICAgICAgICAgdGhpcy5tX2ZvbnRzaXplID0gMTQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uU3RhcnQoKXtcclxuICAgICAgICB0aGlzLlNldExhYmVsUG9zKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25VcGRhdGUoKXtcclxuICAgICAgICB0aGlzLlNldExhYmVsUG9zKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEluaXQocGFyZW50OkxheWEuTWVzaFNwcml0ZTNELCBjYW1lcmE6TGF5YS5DYW1lcmEsY29udGVudDogc3RyaW5nKXtcclxuICAgICAgICB0aGlzLm1fcGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIHRoaXMubV9jYW1lcmEgPSBjYW1lcmE7XHJcblxyXG4gICAgICAgIHRoaXMuSW5pdExhYmVsKCk7XHJcbiAgICAgICAgdGhpcy5TZXRMYWJlbENvbnRlbnQoY29udGVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFNldExhYmVsQ29udGVudChjb250ZW50OnN0cmluZyl7XHJcbiAgICAgICAgaWYodGhpcy5tX2xhYmVsID09IG51bGwpIHJldHVybiA7XHJcblxyXG4gICAgICAgIHRoaXMubV9sYWJlbC50ZXh0ID0gY29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIEluaXRMYWJlbCgpe1xyXG4gICAgICAgIGlmKHRoaXMubV9sYWJlbD09bnVsbCkgcmV0dXJuIDtcclxuXHJcbiAgICAgICAgdGhpcy5tX2xhYmVsLndpZHRoID0gMzAwO1xyXG4gICAgICAgIHRoaXMubV9sYWJlbC5oZWlnaHQgPSA1MDtcclxuICAgICAgICB0aGlzLm1fbGFiZWwucGl2b3RYID0gMTUwO1xyXG4gICAgICAgIHRoaXMubV9sYWJlbC5waXZvdFkgPSAyNTtcclxuICAgICAgICB0aGlzLm1fbGFiZWwuZm9udCA9IFwiTWljcm9zb2Z0IFlhSGVpXCI7XHJcbiAgICAgICAgdGhpcy5tX2xhYmVsLnRleHQgPSBcIlNBTVBMRSBERU1PXCI7XHJcbiAgICAgICAgdGhpcy5tX2xhYmVsLmZvbnRTaXplID0gdGhpcy5tX2ZvbnRzaXplO1xyXG4gICAgICAgIHRoaXMubV9sYWJlbC5jb2xvciA9IFwiI2ZmZmZmZlwiXHJcbiAgICAgICAgdGhpcy5tX2xhYmVsLnN0cm9rZSA9IDAuMDU7XHJcbiAgICAgICAgdGhpcy5tX2xhYmVsLnN0cm9rZUNvbG9yID0gXCIjMDAwMDAwXCI7XHJcbiAgICAgICAgdGhpcy5tX2xhYmVsLmFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBTZXRMYWJlbFBvcygpe1xyXG4gICAgICAgIGlmKHRoaXMubV9wYXJlbnQgPT0gbnVsbCB8fCB0aGlzLm1fY2FtZXJhID09IG51bGwpIHJldHVybiA7XHJcbiAgICAgICAgbGV0IGZsb29yUG9zID0gdGhpcy5tX3BhcmVudC50cmFuc2Zvcm0ucG9zaXRpb247XHJcbiAgICAgICAgbGV0IG5ld1BvcyA9IG5ldyBMYXlhLlZlY3RvcjMoZmxvb3JQb3MueCxmbG9vclBvcy55ICsgMyxmbG9vclBvcy56KTtcclxuICAgICAgICBsZXQgc2NyZWVuUG9zID0gbmV3IExheWEuVmVjdG9yMygpO1xyXG4gICAgICAgIHRoaXMubV9jYW1lcmEud29ybGRUb1ZpZXdwb3J0UG9pbnQobmV3UG9zLHNjcmVlblBvcykgO1xyXG4gICAgICAgIHRoaXMubV9sYWJlbC5wb3Moc2NyZWVuUG9zLngsc2NyZWVuUG9zLnkgKyAxNSk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBMaWdodENvbnRyb2wgZXh0ZW5kcyBMYXlhLlNjcmlwdDNEe1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBDYW1lcmE6TGF5YS5DYW1lcmE7XHJcbiAgICBwcml2YXRlIExpZ2h0OkxheWEuRGlyZWN0aW9uTGlnaHQ7XHJcblxyXG4gICAgb25Bd2FrZSgpe1xyXG4gICAgICAgIHRoaXMuTGlnaHQgPSB0aGlzLm93bmVyIGFzIExheWEuRGlyZWN0aW9uTGlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgb25VcGRhdGUoKXtcclxuICAgICAgICB0aGlzLkxpZ2h0LnRyYW5zZm9ybS5wb3NpdGlvbiA9IHRoaXMuQ2FtZXJhLnRyYW5zZm9ybS5wb3NpdGlvbjtcclxuICAgICAgICB0aGlzLkxpZ2h0LnRyYW5zZm9ybS5yb3RhdGlvbkV1bGVyID0gdGhpcy5DYW1lcmEudHJhbnNmb3JtLnJvdGF0aW9uRXVsZXI7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgR2FtZU1hbmFnZXIgZnJvbSBcIi4uL0dhbWVNYW5hZ2VyXCI7XHJcbmltcG9ydCBWZWN0b3IzID0gTGF5YS5WZWN0b3IzO1xyXG5pbXBvcnQgTWVzaFJlbmRlcmVyID0gTGF5YS5NZXNoUmVuZGVyZXI7XHJcbmltcG9ydCBFdmVudE1hbmFnZXIgZnJvbSBcIi4uL0V2ZW50cy9FdmVudE1hbmFnZXJcIjtcclxuaW1wb3J0IHsgRXZlbnRzIH0gZnJvbSBcIi4uL0V2ZW50cy9FdmVudHNcIjtcclxuaW1wb3J0IENvbW1vbiBmcm9tIFwiLi4vQ29tbW9uL0NvbW1vblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmF5U2VsZWN0b3IgZXh0ZW5kcyBMYXlhLlNjcmlwdDNEe1xyXG5cclxuICAgIHB1YmxpYyBDYW1lcmE6TGF5YS5DYW1lcmE7XHJcbiAgICBwdWJsaWMgU2NlbmUzRDpMYXlhLlNjZW5lM0Q7XHJcbiAgICBwdWJsaWMgTWFzazpudW1iZXI7XHJcblxyXG4gICAgcHVibGljIExvY2s6Ym9vbGVhbjtcclxuXHJcbiAgICBwcml2YXRlIG1faXNDbGlja2VkOmJvb2xlYW47XHJcblxyXG4gICAgcHJpdmF0ZSBtX2RlbHRhQ2xpY2tUaW1lOm51bWJlcjtcclxuXHJcbiAgICBwcml2YXRlIG1fc2VsZWN0ZWQ6TGF5YS5NZXNoU3ByaXRlM0Q7XHJcbiAgICBcclxuICAgIHByaXZhdGUgbV9yYXk6TGF5YS5SYXk7XHJcbiAgICBwcml2YXRlIG1faGl0UmVzdWx0OkxheWEuSGl0UmVzdWx0O1xyXG4gICAgcHJpdmF0ZSBtX21vdXNlUG9pbnQ6TGF5YS5WZWN0b3IyID0gbmV3IExheWEuVmVjdG9yMigpO1xyXG5cclxuICAgIG9uQXdha2UoKXtcclxuICAgICAgICBpZih0aGlzLm93bmVyIT1udWxsKXtcclxuICAgICAgICAgICAgdmFyIGNhbSA9IHRoaXMub3duZXIgYXMgTGF5YS5DYW1lcmE7XHJcbiAgICAgICAgICAgIGlmKGNhbSE9bnVsbCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkNhbWVyYSA9IGNhbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5tX3JheSA9IG5ldyBMYXlhLlJheShuZXcgVmVjdG9yMygpLG5ldyBWZWN0b3IzKCkpO1xyXG4gICAgICAgIHRoaXMubV9oaXRSZXN1bHQgPSBuZXcgTGF5YS5IaXRSZXN1bHQoKTtcclxuICAgIFxyXG4gICAgICAgIHRoaXMuQWRkTW91c2VFdmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVXBkYXRlKCl7XHJcbiAgICAgICAgdGhpcy5SYXlDYXN0SGl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgQWRkTW91c2VFdmVudCgpe1xyXG4gICAgICAgIExheWEuc3RhZ2Uub24oTGF5YS5FdmVudC5DTElDSyx0aGlzLHRoaXMuT25SYXlDYXN0Q2xpY2tlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgUmVtb3ZlTW91c2VFdmVudCgpe1xyXG4gICAgICAgIExheWEuc3RhZ2Uub2ZmKExheWEuRXZlbnQuQ0xJQ0ssdGhpcyx0aGlzLk9uUmF5Q2FzdENsaWNrZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRGlzYWJsZSgpe1xyXG4gICAgICAgIHRoaXMuUmVtb3ZlTW91c2VFdmVudCgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIFJheUNhc3RIaXQoKXtcclxuICAgICAgICB0aGlzLm1fbW91c2VQb2ludC54ID0gTGF5YS5zdGFnZS5tb3VzZVg7XHJcbiAgICAgICAgdGhpcy5tX21vdXNlUG9pbnQueSA9IExheWEuc3RhZ2UubW91c2VZO1xyXG5cclxuICAgICAgICBpZih0aGlzLkNhbWVyYSE9bnVsbCYmdGhpcy5TY2VuZTNEIT1udWxsKXtcclxuICAgICAgICAgICAgdGhpcy5DYW1lcmEudmlld3BvcnRQb2ludFRvUmF5KHRoaXMubV9tb3VzZVBvaW50LHRoaXMubV9yYXkpO1xyXG4gICAgICAgICAgICB0aGlzLlNjZW5lM0QucGh5c2ljc1NpbXVsYXRpb24ucmF5Q2FzdCh0aGlzLm1fcmF5LHRoaXMubV9oaXRSZXN1bHQpO1xyXG4gICAgICAgICAgICBpZih0aGlzLm1faGl0UmVzdWx0LnN1Y2NlZWRlZCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29sbGlkZXIgPSB0aGlzLm1faGl0UmVzdWx0LmNvbGxpZGVyLm93bmVyIGFzIExheWEuTWVzaFNwcml0ZTNEO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vdGhpcy5tX2RlbHRhQ2xpY2tUaW1lICs9TGF5YS50aW1lci5kZWx0YTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLm1faXNDbGlja2VkKXtcclxuICAgICAgICAgICAgICAgICAgICBFdmVudE1hbmFnZXIuSW5zdGFuY2UoKS5Qb3N0RXZlbnQoRXZlbnRzLk9uU3BhY2VDbGlja2VkLnRvU3RyaW5nKCksY29sbGlkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuQklNLlNldExheWFDb2xvcihjb2xsaWRlcixMYXlhLkNvbG9yLlJFRCk7ICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLm1fc2VsZWN0ZWQhPWNvbGxpZGVyKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1faXNDbGlja2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMubV9zZWxlY3RlZCE9bnVsbCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudE1hbmFnZXIuSW5zdGFuY2UoKS5Qb3N0RXZlbnQoRXZlbnRzLk9uU3BhY2VFeGl0LnRvU3RyaW5nKCksdGhpcy5tX3NlbGVjdGVkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuQklNLlJlc2V0Q29sb3IodGhpcy5tX3NlbGVjdGVkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9zZWxlY3RlZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fc2VsZWN0ZWQgPSBjb2xsaWRlcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRNYW5hZ2VyLkluc3RhbmNlKCkuUG9zdEV2ZW50KEV2ZW50cy5PblNwYWNlRXhpdC50b1N0cmluZygpLHRoaXMubV9zZWxlY3RlZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuQklNLlNldExheWFDb2xvcihjb2xsaWRlcixMYXlhLkNvbG9yLllFTExPVyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIE9uUmF5Q2FzdENsaWNrZWQoKXtcclxuXHJcblxyXG4gICAgICAgIHRoaXMubV9pc0NsaWNrZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyB0aGlzLm1fbW91c2VQb2ludC54ID0gTGF5YS5zdGFnZS5tb3VzZVg7XHJcbiAgICAgICAgLy8gdGhpcy5tX21vdXNlUG9pbnQueSA9IExheWEuc3RhZ2UubW91c2VZO1xyXG5cclxuICAgICAgICAvLyB0aGlzLkNhbWVyYS52aWV3cG9ydFBvaW50VG9SYXkodGhpcy5tX21vdXNlUG9pbnQsdGhpcy5tX3JheSk7XHJcblxyXG4gICAgICAgIC8vIGlmKHRoaXMuU2NlbmUzRCE9bnVsbCl7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgLy8gICAgIHRoaXMuU2NlbmUzRC5waHlzaWNzU2ltdWxhdGlvbi5yYXlDYXN0KHRoaXMubV9yYXksdGhpcy5tX2hpdFJlc3VsdCk7XHJcblxyXG4gICAgICAgIC8vICAgICBpZih0aGlzLm1faGl0UmVzdWx0LnN1Y2NlZWRlZCl7XHJcblxyXG4gICAgICAgIC8vICAgICAgICAgdmFyIGNvbGxpZGVyTmFtZSA9IHRoaXMubV9oaXRSZXN1bHQuY29sbGlkZXIub3duZXIubmFtZTtcclxuXHJcbiAgICAgICAgLy8gICAgICAgICAvL2NvbnNvbGUuZGVidWcoXCLnorDmkp7nmoTlr7nosaHkuLrvvJpcIisgY29sbGlkZXJOYW1lKTtcclxuXHJcbiAgICAgICAgLy8gICAgICAgICB2YXIgZmxvb3I6TGF5YS5NZXNoU3ByaXRlM0QgPSBHYW1lTWFuYWdlci5JbnN0YW5jZSgpLkJJTS5HZXRPbmVGbG9vclNwcml0ZTNEKGNvbGxpZGVyTmFtZSk7XHJcblxyXG4gICAgICAgIC8vICAgICAgICAgaWYoZmxvb3I9PW51bGwpcmV0dXJuIDtcclxuXHJcbiAgICAgICAgLy8gICAgICAgICB2YXIgbWF0cyA9IGZsb29yLm1lc2hSZW5kZXJlci5tYXRlcmlhbHM7XHJcblxyXG4gICAgICAgIC8vICAgICAgICAgbWF0cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHZhciBtYXQ6TGF5YS5CbGlublBob25nTWF0ZXJpYWwgPSBlbGVtZW50IGFzIExheWEuQmxpbm5QaG9uZ01hdGVyaWFsO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIG1hdC5hbGJlZG9Db2xvciA9IG5ldyBMYXlhLlZlY3RvcjQoMSwwLDAsMSk7XHJcbiAgICAgICAgLy8gICAgICAgICB9KTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIFxyXG5cclxuXHJcbiAgICBEcmF3TGluZSgpe1xyXG4gICAgICAgIC8vIHRoaXMubV9tb3VzZVBvaW50LnggPSBMYXlhLk1vdXNlTWFuYWdlci5pbnN0YW5jZS5tb3VzZVg7XHJcbiAgICAgICAgLy8gdGhpcy5tX21vdXNlUG9pbnQueSA9IExheWEuTW91c2VNYW5hZ2VyLmluc3RhbmNlLm1vdXNlWTtcclxuICAgICBcclxuICAgICAgICAvLyB0aGlzLm1fY2FtZXJhLndvcmxkVG9WaWV3cG9ydFBvaW50KHRoaXMubV9jYW1lcmEudHJhbnNmb3JtLnBvc2l0aW9uLHRoaXMuY2FtUG9zKTtcclxuXHJcbiAgICAgICAgLy8gdGhpcy5zcC5ncmFwaGljcy5jbGVhcigpO1xyXG4gICAgICAgIC8vIHRoaXMuc3AuZ3JhcGhpY3MuZHJhd0xpbmUodGhpcy5jYW1Qb3MueCx0aGlzLmNhbVBvcy55LHRoaXMubV9tb3VzZVBvaW50LngsdGhpcy5tX21vdXNlUG9pbnQueSxcIiNmZjAwMDBcIiwxKTsgXHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBOYW1lQ29uZmlne1xyXG4gICAgc3RhdGljIGlwOnN0cmluZz1cIm1lZXRvby5jblwiO1xyXG4gICAgc3RhdGljIHBvcnQ6c3RyaW5nPVwiMTk4NlwiO1xyXG5cclxuICAgIHN0YXRpYyB1c2VyTmFtZSA9IFwieWFuZ3hpblwiO1xyXG4gICAgc3RhdGljIHVzZXJQYXNzcHJvdCA9IFwiODFEQzlCREI1MkQwNERDMjAwMzZEQkQ4MzEzRUQwNTVcIjtcclxuXHJcbiAgICBzdGF0aWMgc2NyZWVuV2lkdGggPSBMYXlhLkJyb3dzZXIud2lkdGg7XHJcbiAgICBzdGF0aWMgc2NyZWVuSGVnaWh0ID0gTGF5YS5Ccm93c2VyLmhlaWdodDtcclxuXHJcbiAgICBzdGF0aWMgZmxvb3JMYXllciA9IFwiYnVpbGRpbmdMZXZlbHNcIlxyXG5cclxuICAgIHN0YXRpYyBmbG9vciA9IFwiRmxvb3JcIjtcclxuXHJcbiAgICBzdGF0aWMgY2FtcHVzQ29kZSA9IFwiUFVNQ0hXXCI7XHJcbn0iLCJpbXBvcnQgSGFuZGxlciA9IGxheWEudXRpbHMuSGFuZGxlcjtcclxuaW1wb3J0IE5hbWVDb25maWcgZnJvbSBcIi4uL0NvbmZpZ3VyZS9OYW1lQ29uZmlnXCI7XHJcbmltcG9ydCBHYW1lTWFuYWdlciBmcm9tIFwiLi4vR2FtZU1hbmFnZXJcIjtcclxuaW1wb3J0IFRhYmxlT3Jnbml6YXRpb24gZnJvbSBcIi4vVGFibGVPcmduaXphdGlvblwiO1xyXG5pbXBvcnQgTXRIdHRwIGZyb20gXCIuLi9OZXR3b3JrL010SHR0cFwiO1xyXG5pbXBvcnQgVGFibGVVc2FnZVR5cGUgZnJvbSBcIi4vVGFibGVCSU1Vc2FnZVR5cGVcIjtcclxuaW1wb3J0IFRhYmxlQklNU3BhY2UsIHsgU3BhY2VEYXRhIH0gZnJvbSBcIi4vVGFibGVCSU1TcGFjZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YU1hbmFnZXJ7XHJcblxyXG4gICAgdGFibGVPcmdhbml6YXRpb246VGFibGVPcmduaXphdGlvbjtcclxuICAgIHRhYmxlVXNhZ2VUeXBlOlRhYmxlVXNhZ2VUeXBlO1xyXG4gICAgdGFibGVCaW1TcGFjZTpUYWJsZUJJTVNwYWNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCl7fVxyXG5cclxuICAgIEluaXQoKXtcclxuICAgICAgICB0aGlzLlJlZ2lzdGVyVGFibGVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgUmVnaXN0ZXJUYWJsZXMoKXtcclxuICAgICAgICB0aGlzLnRhYmxlQmltU3BhY2UgPSBuZXcgVGFibGVCSU1TcGFjZSgpO1xyXG4gICAgICAgIHRoaXMudGFibGVCaW1TcGFjZS5Jbml0KEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuSHR0cC5VUkwsKCk9PntcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGFibGVPcmdhbml6YXRpb24gPSBuZXcgVGFibGVPcmduaXphdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLnRhYmxlT3JnYW5pemF0aW9uLkluaXQoR2FtZU1hbmFnZXIuSW5zdGFuY2UoKS5IdHRwLlVSTCwoKT0+e1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudGFibGVVc2FnZVR5cGUgPSBuZXcgVGFibGVVc2FnZVR5cGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFibGVVc2FnZVR5cGUuSW5pdChHYW1lTWFuYWdlci5JbnN0YW5jZSgpLkh0dHAuVVJMLCgpPT57XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuTG9hZFJlcygpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTsgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIEdldE9uZU9yZ2FuaXphdGlvbk5hbWUoY29kZTpzdHJpbmcsbGV2ZWw/OnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIGlmKHRoaXMudGFibGVPcmdhbml6YXRpb24uSXNMb2FkZWQpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50YWJsZU9yZ2FuaXphdGlvbi5HZXRPbmVPcmdhbml6YXRpb25OYW1lKGNvZGUsbGV2ZWwpO1xyXG4gICAgICAgIH1lbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgR2V0T25lT3JnYW5pemF0aW9uQ29sb3IoY29kZTpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICBpZih0aGlzLnRhYmxlT3JnYW5pemF0aW9uLklzTG9hZGVkKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFibGVPcmdhbml6YXRpb24uR2V0T25lT3JnYW5pemF0aW9uQ29sb3IoY29kZSk7XHJcbiAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgR2V0T25lVXNhZ2VOYW1lKGNvZGU6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgaWYodGhpcy50YWJsZVVzYWdlVHlwZS5Jc0xvYWRlZCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhYmxlVXNhZ2VUeXBlLkdldE9uZVVzYWdlTmFtZShjb2RlKTtcclxuICAgICAgICB9ZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBHZXRPbmVVc2FnZUNvbG9yKGNvZGU6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgaWYodGhpcy50YWJsZVVzYWdlVHlwZS5Jc0xvYWRlZCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRhYmxlVXNhZ2VUeXBlLkdldE9uZVVzYWdlQ29sb3IoY29kZSk7XHJcbiAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgR2V0T25lU3BhY2VEYXRhKGNvZGU6c3RyaW5nKTpTcGFjZURhdGF7XHJcbiAgICAgICAgaWYodGhpcy50YWJsZUJpbVNwYWNlLklzTG9hZGVkKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFibGVCaW1TcGFjZS5HZXRPbmVTcGFjZURhdGEoY29kZSk7XHJcbiAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgR2V0T25lTGV2ZWxPcmdhbml6YXRpb25zKGxldmVsOnN0cmluZyk6QXJyYXk8c3RyaW5nPntcclxuICAgICAgICBpZih0aGlzLnRhYmxlQmltU3BhY2UuSXNMb2FkZWQpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50YWJsZUJpbVNwYWNlLkdldE9uZUxldmVsT3Jnbml6YXRpb25zKGxldmVsKTtcclxuICAgICAgICB9ZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBHZXRPbmVMZXZlbEZsb29yc0J5T3JncyhsZXZlbDpzdHJpbmcsIG9yZ3M6QXJyYXk8c3RyaW5nPik6QXJyYXk8c3RyaW5nPntcclxuICAgICAgICBpZih0aGlzLnRhYmxlQmltU3BhY2UuSXNMb2FkZWQpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50YWJsZUJpbVNwYWNlLkdldE9uZUxldmVsQ29kZXNCeU9yZ3MobGV2ZWwsb3Jncyk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgR2FtZU1hbmFnZXIgZnJvbSBcIi4uL0dhbWVNYW5hZ2VyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJsZUJJTVNwYWNle1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgVGFiZWxOYW1lOnN0cmluZyA9IFwiQklNU3BhY2VcIjtcclxuXHJcbiAgICBwcml2YXRlIG1fbGV2ZWxTcGFjZUNvZGVzOkxheWEuV2Vha09iamVjdDtcclxuICAgIHByaXZhdGUgU3BhY2VEYXRhRGljOkxheWEuV2Vha09iamVjdDtcclxuXHJcbiAgICBJc0xvYWRlZDpib29sZWFuO1xyXG5cclxuICAgIEluaXQodXJsOnN0cmluZyxmaW5pc2hlZD86YW55KXtcclxuXHJcbiAgICAgICAgdGhpcy5Jbml0Q29udGFpbmVyKCk7XHJcblxyXG4gICAgICAgIHZhciBwb3N0VXJsID0gdXJsLmNvbmNhdChcIi9JVlMvQklNU3BhY2UvZHluYW1pY1F1ZXJ5XCIpO1xyXG4gICAgICAgIHZhciBwb3N0Qm9keSA9IEpTT04uc3RyaW5naWZ5KHtcImxldmVsQ29kZUxpc3RcIjpbXCJQVU1DSFctRDAzLUYwMDFcIixcIlBVTUNIVy1EMDMtRjAwMlwiLFwiUFVNQ0hXLUQwMy1GMDAzXCJdfSk7XHJcblxyXG4gICAgICAgIHRoaXMuQXN5bkxvYWREYXRhKHBvc3RVcmwscG9zdEJvZHksZmluaXNoZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIEdldE9uZVNwYWNlRGF0YShjb2RlOnN0cmluZyk6U3BhY2VEYXRhe1xyXG4gICAgICAgIGlmKGNvZGUgPT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgaWYodGhpcy5TcGFjZURhdGFEaWMuaGFzKGNvZGUpKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuU3BhY2VEYXRhRGljLmdldChjb2RlKTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBHZXRPcmdhbml6YXRpb25CeUNvZGUoY29kZTpzdHJpbmcpe1xyXG4gICAgICAgIGlmKGNvZGUgPT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgaWYodGhpcy5TcGFjZURhdGFEaWMuaGFzKGNvZGUpKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuU3BhY2VEYXRhRGljLmdldChjb2RlKS5vcmdhbml6YXRpb25Db2RlO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIEdldE9uZUxldmVsT3Jnbml6YXRpb25zKGxldmVsOnN0cmluZyk6QXJyYXk8c3RyaW5nPntcclxuICAgICAgICBsZXQgb3JncyA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMubV9sZXZlbFNwYWNlQ29kZXMuaGFzKGxldmVsKSl7XHJcbiAgICAgICAgICAgIHRoaXMubV9sZXZlbFNwYWNlQ29kZXMuZ2V0KGxldmVsKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9yZ0NvZGUgPSB0aGlzLkdldE9yZ2FuaXphdGlvbkJ5Q29kZShlbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgYiA9IG9yZ3Muc29tZSgoY29kZSk6Ym9vbGVhbj0+e3JldHVybiBjb2RlID09IG9yZ0NvZGU7fSlcclxuICAgICAgICAgICAgICAgIGlmKCFiKSBvcmdzLnB1c2gob3JnQ29kZSk7ICAgICAgIFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9yZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgR2V0T25lTGV2ZWxDb2Rlc0J5T3JncyhsZXZlbDpzdHJpbmcsb3JnczpBcnJheTxzdHJpbmc+KTpBcnJheTxzdHJpbmc+e1xyXG4gICAgICAgIGxldCBmbG9vckNvZGVzID0gbmV3IEFycmF5PHN0cmluZz4oKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5tX2xldmVsU3BhY2VDb2Rlcy5oYXMobGV2ZWwpKXtcclxuICAgICAgICAgICAgdGhpcy5tX2xldmVsU3BhY2VDb2Rlcy5nZXQobGV2ZWwpLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3JnQ29kZSA9IHRoaXMuR2V0T3JnYW5pemF0aW9uQnlDb2RlKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGIgPSBvcmdzLnNvbWUoKGNvZGUpOmJvb2xlYW49PntcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29kZSA9PSBvcmdDb2RlO1xyXG4gICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKGIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGZsb29yQ29kZXMucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmbG9vckNvZGVzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgSW5pdENvbnRhaW5lcigpe1xyXG4gICAgICAgIHRoaXMubV9sZXZlbFNwYWNlQ29kZXMgPSBuZXcgTGF5YS5XZWFrT2JqZWN0KCk7XHJcbiAgICAgICAgdGhpcy5TcGFjZURhdGFEaWMgPSBuZXcgTGF5YS5XZWFrT2JqZWN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBBc3luTG9hZERhdGEodXJsOnN0cmluZyxwb3N0Qm9keTphbnksZmluaXNoZWQ/OmFueSl7XHJcbiAgICAgICAgaWYodXJsID09IG51bGwgfHwgcG9zdEJvZHkgPT1udWxsKSByZXR1cm4gO1xyXG5cclxuICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZSgpLkh0dHAucG9zdCh1cmwscG9zdEJvZHksdGhpcywoZTphbnkpPT57XHJcbiAgICAgICAgICAgIGlmKGUuc3RhdGUgPT0gXCJzdWNjZWVkXCIpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHJzdCA9ZS5kYXRhW1wiZGF0YVwiXVtcImxpc3RcIl07XHJcbiAgICAgICAgICAgICAgICByc3QuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlID0gdGhpcy5DcmVhdGVTcGFjZURhdGEoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZWxlIT1udWxsJiYgZWxlLmNvZGUhPW51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5TcGFjZURhdGFEaWMuaGFzKGVsZS5jb2RlKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlNwYWNlRGF0YURpYy5zZXQoZWxlLmNvZGUsZWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2xldmVsQ29kZXNcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGV2ZWwgPSBlbGUubGV2ZWxDb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLm1fbGV2ZWxTcGFjZUNvZGVzLmhhcyhsZXZlbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2xldmVsU3BhY2VDb2Rlcy5zZXQobGV2ZWwsbmV3IEFycmF5PHN0cmluZz4oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9sZXZlbFNwYWNlQ29kZXMuZ2V0KGxldmVsKS5wdXNoKGVsZS5jb2RlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGZpbmlzaGVkLmFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLklzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgQ3JlYXRlU3BhY2VEYXRhKGVsZW1lbnQ6YW55KTpTcGFjZURhdGEge1xyXG4gICAgICAgIHZhciBkYXRhOiBTcGFjZURhdGEgPSBuZXcgU3BhY2VEYXRhKCk7XHJcbiAgICAgICAgZGF0YS5jb2RlID0gZWxlbWVudC5jb2RlO1xyXG4gICAgICAgIGRhdGEudXNhZ2VOYW1lID0gZWxlbWVudC51c2FnZU5hbWU7XHJcbiAgICAgICAgZGF0YS5idWlsZGluZ0NvZGUgPSBlbGVtZW50LmJ1aWxkaW5nQ29kZTtcclxuICAgICAgICBkYXRhLmNhbXB1c0NvZGUgPSBlbGVtZW50LmNhbXB1c0NvZGU7XHJcbiAgICAgICAgZGF0YS5sZXZlbENvZGUgPSBlbGVtZW50LmxldmVsQ29kZTtcclxuICAgICAgICBkYXRhLm9yZ2FuaXphdGlvbkNvZGUgPSBlbGVtZW50Lm9yZ2FuaXphdGlvbkNvZGU7XHJcbiAgICAgICAgZGF0YS51c2FnZVR5cGVDb2RlID0gZWxlbWVudC51c2FnZVR5cGVDb2RlO1xyXG4gICAgICAgIGRhdGEudXNlQXJlYSA9IGVsZW1lbnQudXNlQXJlYS50b0ZpeGVkKDIpLnRvU3RyaW5nKCkgKyBcIm3CslwiO1xyXG4gICAgICAgIGRhdGEucGVyaW1ldGVyID0gZWxlbWVudC5wZXJpbWV0ZXI7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU3BhY2VEYXRhe1xyXG4gICAgcHVibGljIGNvZGU6ICAgICAgICAgICAgIHN0cmluZztcclxuICAgIHB1YmxpYyB1c2FnZU5hbWU6ICAgICAgICBzdHJpbmc7XHJcbiAgICBwdWJsaWMgYnVpbGRpbmdDb2RlOiAgICAgc3RyaW5nO1xyXG4gICAgcHVibGljIGNhbXB1c0NvZGU6ICAgICAgIHN0cmluZztcclxuICAgIHB1YmxpYyBsZXZlbENvZGU6ICAgICAgICBzdHJpbmc7XHJcbiAgICBwdWJsaWMgb3JnYW5pemF0aW9uQ29kZTogc3RyaW5nO1xyXG4gICAgcHVibGljIHVzYWdlVHlwZUNvZGU6ICAgIHN0cmluZztcclxuICAgIHB1YmxpYyB1c2VBcmVhOiAgICAgICAgICBzdHJpbmc7XHJcbiAgICBwdWJsaWMgcGVyaW1ldGVyOiAgICAgICAgc3RyaW5nO1xyXG59ICBcclxuXHJcbiIsImltcG9ydCBHYW1lTWFuYWdlciBmcm9tIFwiLi4vR2FtZU1hbmFnZXJcIjtcclxuaW1wb3J0IE5hbWVDb25maWcgZnJvbSBcIi4uL0NvbmZpZ3VyZS9OYW1lQ29uZmlnXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJsZVVzYWdlVHlwZXtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IFRhYmVsTmFtZTpzdHJpbmcgPSBcIkJJTVVzYWdlVHlwZVwiO1xyXG4gICAgcHJpdmF0ZSBVc2FnZVR5cGVEaWM6TGF5YS5XZWFrT2JqZWN0O1xyXG5cclxuICAgIElzTG9hZGVkOmJvb2xlYW47XHJcblxyXG4gICAgSW5pdCh1cmw6c3RyaW5nLGZpbmlzaGVkPzphbnkpe1xyXG5cclxuICAgICAgICB0aGlzLkluaXRDb250YWluZXIoKTtcclxuXHJcbiAgICAgICAgdmFyIHBvc3RVcmwgPSB1cmwuY29uY2F0KFwiL0lWUy9Db21tb24vcmV0cmlldmVBbGxCeVRhYmxlTmFtZVwiKTtcclxuICAgICAgICB2YXIgcG9zdEJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XCJ0YWJsZU5hbWVcIjp0aGlzLlRhYmVsTmFtZX0pO1xyXG5cclxuICAgICAgICB0aGlzLkFzeW5Mb2FkRGF0YShwb3N0VXJsLHBvc3RCb2R5LGZpbmlzaGVkKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgR2V0T25lVXNhZ2VOYW1lKGNvZGU6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgaWYoY29kZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcclxuICAgICAgICBpZih0aGlzLlVzYWdlVHlwZURpYy5oYXMoY29kZSkpe1xyXG4gICAgICAgICAgICB2YXIgZGF0YTpVc2FnZVR5cGUgPSB0aGlzLlVzYWdlVHlwZURpYy5nZXQoY29kZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBHZXRPbmVVc2FnZUNvbG9yKGNvZGU6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgaWYoY29kZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIGxldmVsOnN0cmluZyA9IHRoaXMuR2V0VXNhZ2VMZXZlbExldmVsKGNvZGUpO1xyXG5cclxuICAgICAgICBpZihsZXZlbCE9XCIyXCIpe1xyXG4gICAgICAgICAgICBjb2RlID0gY29kZS5zdWJzdHIoMCw0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHRoaXMuVXNhZ2VUeXBlRGljLmhhcyhjb2RlKSl7XHJcbiAgICAgICAgICAgIHZhciBkYXRhOlVzYWdlVHlwZSA9IHRoaXMuVXNhZ2VUeXBlRGljLmdldChjb2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGEuY29sb3I7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBHZXRVc2FnZUxldmVsTGV2ZWwoY29kZTpzdHJpbmcpe1xyXG4gICAgICAgIGlmKGNvZGUgPT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgaWYodGhpcy5Vc2FnZVR5cGVEaWMuaGFzKGNvZGUpKXtcclxuICAgICAgICAgICAgdmFyIGRhdGE6VXNhZ2VUeXBlID0gdGhpcy5Vc2FnZVR5cGVEaWMuZ2V0KGNvZGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YS5sZXZlbDtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgSW5pdENvbnRhaW5lcigpe1xyXG4gICAgICAgIHRoaXMuVXNhZ2VUeXBlRGljID0gbmV3IExheWEuV2Vha09iamVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgQXN5bkxvYWREYXRhKHVybDpzdHJpbmcscG9zdGJvZHk6YW55LGZpbmluc2hlZD86YW55KXtcclxuICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZSgpLkh0dHAucG9zdCh1cmwscG9zdGJvZHksdGhpcywoZTphbnkpPT57XHJcbiAgICAgICAgICAgIGlmKGUuc3RhdGUgPT0gXCJzdWNjZWVkXCIpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHJzdCA9ZS5kYXRhW1wiZGF0YVwiXVtcImxpc3RcIl07XHJcbiAgICAgICAgICAgICAgICByc3QuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlID0gdGhpcy5DcmVhdGVVc2FnZVR5cGUoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZWxlIT1udWxsJiYgZWxlLmNvZGUhPW51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5Vc2FnZVR5cGVEaWMuaGFzKGVsZS5jb2RlKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlVzYWdlVHlwZURpYy5zZXQoZWxlLmNvZGUsZWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGZpbmluc2hlZC5hcHBseSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuSXNMb2FkZWQgPXRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIENyZWF0ZVVzYWdlVHlwZShlbGVtZW50OmFueSk6VXNhZ2VUeXBlIHtcclxuICAgICAgICB2YXIgZGF0YTogVXNhZ2VUeXBlID0gbmV3IFVzYWdlVHlwZSgpO1xyXG4gICAgICAgIGRhdGEuY29kZSA9IGVsZW1lbnQuY29kZTtcclxuICAgICAgICBkYXRhLm5hbWUgPSBlbGVtZW50Lm5hbWU7XHJcbiAgICAgICAgZGF0YS5sZXZlbCA9IGVsZW1lbnQubGV2ZWw7XHJcbiAgICAgICAgZGF0YS5jb2xvciA9IGVsZW1lbnQuY29sb3I7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVXNhZ2VUeXBle1xyXG4gICAgcHVibGljIGNvZGU6IHN0cmluZztcclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgbGV2ZWw6c3RyaW5nO1xyXG4gICAgcHVibGljIGNvbG9yOnN0cmluZztcclxufSAgIiwiaW1wb3J0IEdhbWVNYW5hZ2VyIGZyb20gXCIuLi9HYW1lTWFuYWdlclwiO1xyXG5pbXBvcnQgTmFtZUNvbmZpZyBmcm9tIFwiLi4vQ29uZmlndXJlL05hbWVDb25maWdcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYmxlT3Jnbml6YXRpb257XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBUYWJlbE5hbWU6c3RyaW5nID0gXCJPcmdhbml6YXRpb25cIjtcclxuICAgIHByaXZhdGUgb3Jnbml6YXRpb25EaWM6TGF5YS5XZWFrT2JqZWN0O1xyXG5cclxuICAgIElzTG9hZGVkOmJvb2xlYW47XHJcblxyXG4gICAgSW5pdCh1cmw6c3RyaW5nLGZpbmlzaGVkPzphbnkpe1xyXG5cclxuICAgICAgICB0aGlzLkluaXRDb250YWluZXIoKTtcclxuXHJcbiAgICAgICAgdmFyIHBvc3RVcmwgPSB1cmwuY29uY2F0KFwiL0lWUy9Db21tb24vcmV0cmlldmVBbGxCeVRhYmxlTmFtZVwiKTtcclxuICAgICAgICB2YXIgcG9zdEJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XCJ0YWJsZU5hbWVcIjp0aGlzLlRhYmVsTmFtZX0pO1xyXG5cclxuICAgICAgICB0aGlzLkFzeW5Mb2FkRGF0YShwb3N0VXJsLHBvc3RCb2R5LGZpbmlzaGVkKTtcclxuICAgIH1cclxuXHJcbiAgICBHZXRPbmVPcmdhbml6YXRpb25OYW1lKGNvZGU6c3RyaW5nLGxldmVsPzpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICBpZihjb2RlID09IG51bGwpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICBjb2RlID0gbGV2ZWwgPT0gbnVsbD9jb2RlOmNvZGUuc3Vic3RyKDAsMiAqIHBhcnNlSW50KGxldmVsKSk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMub3Jnbml6YXRpb25EaWMuaGFzKGNvZGUpKXtcclxuICAgICAgICAgICAgdmFyIGRhdGE6T3Jnbml6YXRpb24gPSB0aGlzLm9yZ25pemF0aW9uRGljLmdldChjb2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEdldE9uZU9yZ2FuaXphdGlvbkNvbG9yKGNvZGU6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgaWYoY29kZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIGxldmVsOnN0cmluZyA9IHRoaXMuR2V0T3JnYW5pemF0aW9uTGV2ZWwoY29kZSk7XHJcblxyXG4gICAgICAgIGlmKGxldmVsIT1cIjJcIil7XHJcbiAgICAgICAgICAgIGNvZGUgPSBjb2RlLnN1YnN0cigwLDQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5vcmduaXphdGlvbkRpYy5oYXMoY29kZSkpe1xyXG4gICAgICAgICAgICB2YXIgZGF0YTpPcmduaXphdGlvbiA9IHRoaXMub3Jnbml6YXRpb25EaWMuZ2V0KGNvZGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YS5jb2xvcjtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEdldE9yZ2FuaXphdGlvbkxldmVsKGNvZGU6c3RyaW5nKXtcclxuICAgICAgICBpZihjb2RlID09IG51bGwpIHJldHVybiBudWxsO1xyXG4gICAgICAgIGlmKHRoaXMub3Jnbml6YXRpb25EaWMuaGFzKGNvZGUpKXtcclxuICAgICAgICAgICAgdmFyIGRhdGE6T3Jnbml6YXRpb24gPSB0aGlzLm9yZ25pemF0aW9uRGljLmdldChjb2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGEubGV2ZWw7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIEluaXRDb250YWluZXIoKXtcclxuICAgICAgICB0aGlzLm9yZ25pemF0aW9uRGljID0gbmV3IExheWEuV2Vha09iamVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgQXN5bkxvYWREYXRhKHVybDpzdHJpbmcscG9zdGJvZHk6YW55LGZpbmluc2hlZD86YW55KXtcclxuICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZSgpLkh0dHAucG9zdCh1cmwscG9zdGJvZHksdGhpcywoZTphbnkpPT57XHJcbiAgICAgICAgICAgIGlmKGUuc3RhdGUgPT0gXCJzdWNjZWVkXCIpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHJzdCA9ZS5kYXRhW1wiZGF0YVwiXVtcImxpc3RcIl07XHJcbiAgICAgICAgICAgICAgICByc3QuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlID0gdGhpcy5DcmVhdGVPcmdhbml6YXRpb24oZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZWxlIT1udWxsJiYgZWxlLmNvZGUhPW51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5vcmduaXphdGlvbkRpYy5oYXMoZWxlLmNvZGUpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3Jnbml6YXRpb25EaWMuc2V0KGVsZS5jb2RlLGVsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBmaW5pbnNoZWQuYXBwbHkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuSXNMb2FkZWQgPXRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIENyZWF0ZU9yZ2FuaXphdGlvbihlbGVtZW50OmFueSk6T3Jnbml6YXRpb24ge1xyXG4gICAgICAgIHZhciBkYXRhOiBPcmduaXphdGlvbiA9IG5ldyBPcmduaXphdGlvbigpO1xyXG4gICAgICAgIGRhdGEuY29kZSA9IGVsZW1lbnQuY29kZTtcclxuICAgICAgICBkYXRhLm5hbWUgPSBlbGVtZW50Lm5hbWU7XHJcbiAgICAgICAgZGF0YS5sZXZlbCA9IGVsZW1lbnQubGV2ZWw7XHJcbiAgICAgICAgZGF0YS5jb2xvciA9IGVsZW1lbnQuY29sb3I7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgT3Jnbml6YXRpb257XHJcbiAgICBwdWJsaWMgY29kZTogc3RyaW5nO1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcclxuICAgIHB1YmxpYyBsZXZlbDpzdHJpbmc7XHJcbiAgICBwdWJsaWMgY29sb3I6c3RyaW5nO1xyXG59ICAiLCJcclxuaW1wb3J0IEV2ZW50RGlzcGF0Y2hlciA9IGxheWEuZXZlbnRzLkV2ZW50RGlzcGF0Y2hlcjsgIFxyXG4gICBcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRNYW5hZ2VyIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVye1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGV2ZW50RGlzcGF0Y2hlcjpFdmVudERpc3BhdGNoZXIgPSBuZXcgRXZlbnREaXNwYXRjaGVyKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOkV2ZW50TWFuYWdlcjtcclxuICAgIHB1YmxpYyBzdGF0aWMgSW5zdGFuY2UoKXtcclxuICAgICAgICBpZihFdmVudE1hbmFnZXIuX2luc3RhbmNlID09IG51bGwpe1xyXG4gICAgICAgICAgICBFdmVudE1hbmFnZXIuX2luc3RhbmNlID0gbmV3IEV2ZW50TWFuYWdlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gRXZlbnRNYW5hZ2VyLl9pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUG9zdEV2ZW50KGVOYW1lOnN0cmluZyxhcmdzPzphbnkpe1xyXG4gICAgICAgIC8vb25zb2xlLmRlYnVnKFwi5YiG5Y+R5LqL5Lu2XCIpO1xyXG4gICAgICAgIEV2ZW50TWFuYWdlci5ldmVudERpc3BhdGNoZXIuZXZlbnQoZU5hbWUsYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEFkZEV2ZW50TGlzdGVuZXIoZU5hbWU6c3RyaW5nLGNhbGxlcjphbnksbGlzdGVuZXI6RnVuY3Rpb24sYXJncz86YW55W10pe1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCLkvqblkKzkuovku7ZcIixlTmFtZSk7XHJcbiAgICAgICAgRXZlbnRNYW5hZ2VyLmV2ZW50RGlzcGF0Y2hlci5vbihlTmFtZSxjYWxsZXIsbGlzdGVuZXIsYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFJlbW92ZUV2ZW50TGlzdGVuZXIoZU5hbWU6c3RyaW5nLGNhbGxlcjphbnksbGlzdGVuZXI6RnVuY3Rpb24sb25jZT86Ym9vbGVhbil7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIuenu+mZpOS6i+S7tlwiLGVOYW1lKTtcclxuICAgICAgICBFdmVudE1hbmFnZXIuZXZlbnREaXNwYXRjaGVyLm9mZihlTmFtZSxjYWxsZXIsbGlzdGVuZXIsb25jZSk7XHJcbiAgICB9XHJcblxyXG59IiwiZXhwb3J0IGVudW0gRXZlbnRze1xyXG4gICAgT25VSV9MZXZlbEJ0bl9DbGlja2VkLFxyXG5cclxuICAgIE9uU3BhY2VFbnRlcixcclxuICAgIE9uU3BhY2VDbGlja2VkLFxyXG4gICAgT25TcGFjZUV4aXQsXHJcblxyXG4gICAgT25DYW1lcmFEaXN0YW5jZUNoYW5nZWQsXHJcblxyXG4gICAgT25EZXBUcmVlSXRlbUNsaWNrZWQsXHJcbn0iLCJcclxuaW1wb3J0IE10SHR0cCBmcm9tIFwiLi9OZXR3b3JrL010SHR0cFwiO1xyXG5pbXBvcnQgTmFtZUNvbmZpZyBmcm9tIFwiLi9Db25maWd1cmUvTmFtZUNvbmZpZ1wiO1xyXG5pbXBvcnQgRGF0YU1hbmFnZXIgZnJvbSBcIi4vRGF0YS9EYXRhTWFuYWdlclwiO1xyXG5cclxuaW1wb3J0IEdhbWVVSSBmcm9tIFwiLi9HYW1lVUlcIjtcclxuXHJcbmltcG9ydCBIYW5kbGVyID0gTGF5YS5IYW5kbGVyO1xyXG5pbXBvcnQgQ2FtZXJhTW92ZVNjcmlwdCBmcm9tIFwiLi9Db21wb25lbnQvQ2FtZXJhTW92ZVNjcmlwdFwiO1xyXG5pbXBvcnQgTGFiZWxVcGRhdFBvcyBmcm9tIFwiLi9Db21wb25lbnQvTGFiZWxVcGRhdGVcIjtcclxuaW1wb3J0IE1haW5VSSBmcm9tIFwiLi9NYWluVUlcIjtcclxuaW1wb3J0IEJJTU1hbmFnZXIsIHsgTGFiZWxUeXBlIH0gZnJvbSBcIi4vQklNL0JJTU1hbmFnZXJcIjtcclxuaW1wb3J0IENhbWVyYU1hbmFnZXIgZnJvbSBcIi4vQ2FtZXJhL0NhbWVyYU1hbmFnZXJcIjtcclxuaW1wb3J0IEV2ZW50TWFuYWdlciBmcm9tIFwiLi9FdmVudHMvRXZlbnRNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IEV2ZW50cyB9IGZyb20gXCIuL0V2ZW50cy9FdmVudHNcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZU1hbmFnZXJ7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOkdhbWVNYW5hZ2VyOyAgICBcclxuXHJcbiAgICBzdGF0aWMgSW5zdGFuY2UoKTpHYW1lTWFuYWdlcntcclxuICAgICAgICBpZihHYW1lTWFuYWdlci5faW5zdGFuY2UgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIEdhbWVNYW5hZ2VyLl9pbnN0YW5jZSA9IG5ldyBHYW1lTWFuYWdlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gR2FtZU1hbmFnZXIuX2luc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBCSU06QklNTWFuYWdlcjtcclxuICAgIHB1YmxpYyBEYXRhOkRhdGFNYW5hZ2VyO1xyXG4gICAgcHVibGljIENhbWVyYTpDYW1lcmFNYW5hZ2VyO1xyXG4gICAgcHVibGljIEh0dHAgOk10SHR0cDtcclxuXHJcbiAgICBwdWJsaWMgTWFpblNjZW5lOkxheWEuU2NlbmUzRDtcclxuICAgIHB1YmxpYyBNYWluVUk6TWFpblVJO1xyXG5cclxuICAgIHByaXZhdGUgSXNJbml0U2NlbmU6Ym9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgTG9naW5Mb2NrOkJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHRoaXMuSHR0cCA9IG5ldyBNdEh0dHAoTmFtZUNvbmZpZy5pcCxOYW1lQ29uZmlnLnBvcnQpO1xyXG5cclxuICAgICAgICB0aGlzLkJJTSA9IG5ldyBCSU1NYW5hZ2VyKCk7XHJcbiAgICAgICAgdGhpcy5EYXRhID0gbmV3IERhdGFNYW5hZ2VyKCk7XHJcbiAgICAgICAgdGhpcy5DYW1lcmEgPSBuZXcgQ2FtZXJhTWFuYWdlcigpO1xyXG4gICBcclxuICAgICAgICB0aGlzLkFkZEV2ZW50cygpO1xyXG4gICAgfSAgIFxyXG5cclxuXHJcbiAgICBBZGRFdmVudHMoKXtcclxuICAgICAgICBFdmVudE1hbmFnZXIuSW5zdGFuY2UoKS5BZGRFdmVudExpc3RlbmVyKEV2ZW50cy5PblVJX0xldmVsQnRuX0NsaWNrZWQudG9TdHJpbmcoKSx0aGlzLHRoaXMuT25MZXZlbEJ0bkNsaWNrZWQpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIE9uTGV2ZWxCdG5DbGlja2VkKGxldmVsTmFtZTpzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMuQklNLkhpZGVPbmVMZXZlbEZsb29ycyh0aGlzLkJJTS5DdXJyZW5MZXZlbCk7XHJcbiAgICAgICAgdGhpcy5CSU0uU2hvd09uZUxldmVsRmxvb3JzKGxldmVsTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvZ2luKCl7ICAgXHJcblxyXG4gICAgICAgIGlmKHRoaXMuTG9naW5Mb2NrKSByZXR1cm4gO1xyXG5cclxuICAgICAgICB2YXIgbG9uZ2luVXJsID0gIHRoaXMuSHR0cC5VUkwuY29uY2F0KFwiL0lWUy9sb2dpblwiKTtcclxuICAgICAgICB2YXIgcG9zdEJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XCJuYW1lXCI6TmFtZUNvbmZpZy51c2VyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwd2RcIjpOYW1lQ29uZmlnLnVzZXJQYXNzcHJvdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aGlyZFBhcnR5Q29kZVwiOlwiMFwifSk7XHJcbiAgICAgICAgdGhpcy5IdHRwLnBvc3QobG9uZ2luVXJsLHBvc3RCb2R5LHRoaXMsdGhpcy5Mb2dpblN1Y2NlZWQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuTG9naW5Mb2NrID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBMb2dpblN1Y2NlZWQoZTphbnkpe1xyXG4gICAgICAgIGlmKGUuc3RhdGUgPT0gXCJzdWNjZWVkXCIpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiTG9naW4gc3VjY2VlZCFcIik7XHJcbiAgICAgICAgICAgIHRoaXMuTG9hZERhdGEoKTtcclxuXHJcbiAgICAgICAgICAgIC8vdGVzdFxyXG4gICAgICAgICAgICAvL3RoaXMuTG9hZFJlcygpO1xyXG4gICAgICAgIH0gZWxzZXtcclxuICAgICAgICAgICAgYWxlcnQoZS5tc2cpO1xyXG4gICAgICAgIH0gICBcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRGF0YSgpe1xyXG5cclxuICAgICAgICB0aGlzLkRhdGEuSW5pdCgpO1xyXG4gICAgXHJcbiAgICB9XHJcblxyXG4gICAgTG9hZFJlcygpe1xyXG5cclxuICAgICAgICBMYXlhLmxvYWRlci5sb2FkKFwicmVzL0pzb25GaWxlL3Jlc19wdW1jaHcuanNvblwiLEhhbmRsZXIuY3JlYXRlKHRoaXMsKGRhdGEpPT57XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzVXJsOkFycmF5PHN0cmluZz4gPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xyXG5cclxuICAgICAgICAgICAgZGF0YS51cmwuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc1VybC5wdXNoKHRoaXMuSHR0cC5VUkwuY29uY2F0KFwiL1BhdGNoL3Jlcy9cIixlbGVtZW50KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5CSU0uTG9hZFJlcyhyZXNVcmwsKCk9PntcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLkluaXRNYWluVUkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLkJJTS5TaG93T25lTGV2ZWxGbG9vcnModGhpcy5CSU0uQ3VycmVuTGV2ZWwpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KSlcclxuICAgIH1cclxuICAgIFxyXG4gICAgSW5pdDNEU2NlbmUoKXtcclxuXHJcbiAgICAgICAgaWYodGhpcy5Jc0luaXRTY2VuZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBMYXlhM0QuaW5pdCgwLCAwLCB0cnVlKTtcclxuXHJcbiAgICAgICAgTGF5YS5zdGFnZS5zY2FsZU1vZGUgPSBMYXlhLlN0YWdlLlNDQUxFX0ZVTEw7XHJcbiAgICAgICAgTGF5YS5zdGFnZS5zY3JlZW5Nb2RlID0gTGF5YS5TdGFnZS5TQ1JFRU5fTk9ORTtcclxuXHJcbiAgICAgICAgLy9MYXlhLlN0YXQuc2hvdygpO1xyXG5cclxuICAgICAgICB0aGlzLk1haW5TY2VuZSA9IG5ldyBMYXlhLlNjZW5lM0QoKTtcclxuICAgICAgICBMYXlhLnN0YWdlLmFkZENoaWxkKHRoaXMuTWFpblNjZW5lKTtcclxuICAgICAgIFxyXG4gICAgICAgIHRoaXMuQ2FtZXJhLkluaXRDYW1lcmEoKTtcclxuXHJcbiAgICAgICAgdGhpcy5Jc0luaXRTY2VuZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdE1haW5VSSgpe1xyXG4gICAgICAgIHRoaXMuTWFpblVJID0gbmV3IE1haW5VSSgpO1xyXG4gICAgICAgIExheWEuc3RhZ2UuYWRkQ2hpbGQodGhpcy5NYWluVUkpO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5NYWluVUkuQ3JlYXRlVHJlZSh0aGlzLkRhdGEuR2V0T25lTGV2ZWxPcmdhbml6YXRpb25zKHRoaXMuQklNLkN1cnJlbkxldmVsKSk7XHJcbiAgICAgICAgdGhpcy5NYWluVUkuQ3JlYXRlTGV2ZWxzKHRoaXMuQklNLkxldmVscyk7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgdWkgfSBmcm9tIFwiLi8uLi91aS9sYXlhTWF4VUlcIjtcclxuaW1wb3J0IEdhbWVNYW5hZ2VyIGZyb20gXCIuL0dhbWVNYW5hZ2VyXCI7XHJcbmltcG9ydCBOYW1lQ29uZmlnIGZyb20gXCIuL0NvbmZpZ3VyZS9OYW1lQ29uZmlnXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIOacrOekuuS+i+mHh+eUqOmdnuiEmuacrOeahOaWueW8j+WunueOsO+8jOiAjOS9v+eUqOe7p+aJv+mhtemdouWfuuexu++8jOWunueOsOmhtemdoumAu+i+keOAguWcqElERemHjOmdouiuvue9ruWcuuaZr+eahFJ1bnRpbWXlsZ7mgKfljbPlj6/lkozlnLrmma/ov5vooYzlhbPogZRcclxuICog55u45q+U6ISa5pys5pa55byP77yM57un5om/5byP6aG16Z2i57G777yM5Y+v5Lul55u05o6l5L2/55So6aG16Z2i5a6a5LmJ55qE5bGe5oCn77yI6YCa6L+HSURF5YaFdmFy5bGe5oCn5a6a5LmJ77yJ77yM5q+U5aaCdGhpcy50aXBMYmxs77yMdGhpcy5zY29yZUxibO+8jOWFt+acieS7o+eggeaPkOekuuaViOaenFxyXG4gKiDlu7rorq7vvJrlpoLmnpzmmK/pobXpnaLnuqfnmoTpgLvovpHvvIzpnIDopoHpopHnuYHorr/pl67pobXpnaLlhoXlpJrkuKrlhYPntKDvvIzkvb/nlKjnu6fmib/lvI/lhpnms5XvvIzlpoLmnpzmmK/ni6znq4vlsI/mqKHlnZfvvIzlip/og73ljZXkuIDvvIzlu7rorq7nlKjohJrmnKzmlrnlvI/lrp7njrDvvIzmr5TlpoLlrZDlvLnohJrmnKzjgIJcclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lVUkgZXh0ZW5kcyB1aS5wb3J0YWwuTG9hZGluZ1VJIHtcclxuXHJcbiAgICBzdGF0aWMgX2luc3RhbmNlIDogR2FtZVVJO1xyXG5cclxuICAgIEdhbWVNYW5hZ2VyOkdhbWVNYW5hZ2VyO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpOyAgXHJcblxyXG4gICAgICAgIEdhbWVVSS5faW5zdGFuY2UgPSB0aGlzO1xyXG5cclxuICAgICAgICB0aGlzLkdhbWVNYW5hZ2VyID0gR2FtZU1hbmFnZXIuSW5zdGFuY2UoKTtcclxuXHJcbiAgICAgICAgdGhpcy5VSUFkYXB0ZXIoKTtcclxuICAgICAgICB0aGlzLkxvZ2luQnRuLm9uKExheWEuRXZlbnQuQ0xJQ0ssdGhpcyx0aGlzLk9uTG9naW5CdG5DbGlja2VkKTtcclxuXHJcblxyXG4gICAgICAgIExheWEuc3RhZ2Uub24oTGF5YS5FdmVudC5SRVNJWkUsTGF5YS5zdGFnZSwoKT0+e1xyXG4gICAgICAgICAgICB0aGlzLlVJQWRhcHRlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vRW5hYmxl5Yid5aeL5YyWXHJcbiAgICBvbkVuYWJsZSgpOnZvaWR7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLy/nmbvpmYZcclxuICAgIE9uTG9naW5CdG5DbGlja2VkKGU6IExheWEuRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICAvL0dhbWVNYW5hZ2VyLkluc3RhbmNlKCkuTG9naW4oKTtcclxuICAgICAgICB0aGlzLkdhbWVNYW5hZ2VyLkxvZ2luKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy/orr7nva7otYTmupDliqDovb3ov5vluqZcclxuICAgIFNldExvYWRQZXJjZW50KHBlcmNlbnQ6bnVtYmVyKXtcclxuICAgICAgICB0aGlzLlByb2dyZXNzQmFyLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuUHJvZ3Jlc3NCYXIudmFsdWUgPSBwZXJjZW50O1xyXG4gICAgICAgIGlmKHBlcmNlbnQgPT0gMSl7XHJcbiAgICAgICAgICAgIHRoaXMuRGVzdHJveVNjZW5lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIERlc3Ryb3lTY2VuZSgpe1xyXG4gICAgICAgIC8vdGhpcy5kZXN0cm95KCk7XHJcbiAgICAgICAgTGF5YS5TY2VuZS5jbG9zZSh0aGlzLnNjZW5lKTtcclxuICAgIH1cclxuXHJcbiAgICAvL1VJ6YCC6YWNXHJcbiAgICBVSUFkYXB0ZXIoKXtcclxuICAgICAgICBsZXQgd2lkdGggPSBMYXlhLkJyb3dzZXIud2lkdGg7XHJcbiAgICAgICAgbGV0IGhlaWdodCA9IExheWEuQnJvd3Nlci5oZWlnaHQ7XHJcblxyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICB0aGlzLkJhY2tncm91bmQud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLkJhY2tncm91bmQuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuVGl0bGUucG9zKHdpZHRoLzIsaGVpZ2h0LzQpO1xyXG4gICAgICAgIHRoaXMuTG9naW5CdG4ucG9zKHdpZHRoLzIsaGVpZ2h0LzMgKyAxMDApO1xyXG4gICAgICAgIHRoaXMuUHJvZ3Jlc3NCYXIucG9zKHdpZHRoLzIsaGVpZ2h0ICogMyAvIDQpO1xyXG4gICAgICAgIHRoaXMuUHJvZ3Jlc3NCYXIudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7dWl9IGZyb20gXCIuLy4uL3VpL2xheWFNYXhVSVwiO1xyXG5pbXBvcnQgTmFtZUNvbmZpZyBmcm9tIFwiLi9Db25maWd1cmUvTmFtZUNvbmZpZ1wiO1xyXG5pbXBvcnQgR2FtZU1hbmFnZXIgZnJvbSBcIi4vR2FtZU1hbmFnZXJcIjtcclxuaW1wb3J0IEJJTU1hbmFnZXIsIHsgTGFiZWxUeXBlIH0gZnJvbSBcIi4vQklNL0JJTU1hbmFnZXJcIjtcclxuXHJcbmltcG9ydCBCdXR0b24gPSBMYXlhLkJ1dHRvbjtcclxuaW1wb3J0IENvbW1vbiBmcm9tIFwiLi9Db21tb24vQ29tbW9uXCI7XHJcbmltcG9ydCBFdmVudE1hbmFnZXIgZnJvbSBcIi4vRXZlbnRzL0V2ZW50TWFuYWdlclwiO1xyXG5pbXBvcnQgeyBFdmVudHMgfSBmcm9tIFwiLi9FdmVudHMvRXZlbnRzXCI7XHJcblxyXG5pbXBvcnQgVUlUcmVlIGZyb20gXCIuL1VJL1RyZWUvVUlUcmVlXCI7XHJcbmltcG9ydCB7IFRyZWVJdGVtRGF0YSB9IGZyb20gXCIuL1VJL1RyZWUvVUlUcmVlSXRlbVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFpblVJIGV4dGVuZHMgdWkuTWFpblNjZW5lLk1haW5TY2VuZVVJe1xyXG5cclxuICAgIHN0YXRpYyBfaW5zdGFuY2UgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgbV9pczJEOkJvb2xlYW47XHJcbiAgICBwcml2YXRlIG1fbGV2ZWxCdG5zOkFycmF5PEJ1dHRvbj47XHJcbiAgICBwcml2YXRlIG1fbGV2ZWxQb3M6TGF5YS5XZWFrT2JqZWN0O1xyXG5cclxuICAgIHByaXZhdGUgbV9sZXZlbEJ0bk9yaVBvczpMYXlhLlZlY3RvcjI7XHJcblxyXG4gICAgcHJpdmF0ZSBtX2lzU2hvd011bHRpQnRuczpib29sZWFuID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgbV9pc1Nob3dBbGxMZXZlbHM6Ym9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHB1YmxpYyBDdXJyZW50TGFiZWxUeXBlOkxhYmVsVHlwZSA9IExhYmVsVHlwZS5Vc2FnZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25FbmFibGUoKXtcclxuICAgICAgICBNYWluVUkuX2luc3RhbmNlID0gdGhpcztcclxuICAgICAgICB0aGlzLlVJQWRhcHRlcigpOyAgIFxyXG4gICAgICAgIHRoaXMuQWRkRXZlbnQoKTsgXHJcbiAgICAgICAgdGhpcy5tX2lzMkQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5tX2xldmVsQnRucyA9IG5ldyBBcnJheTxCdXR0b24+KCk7XHJcbiAgICAgICAgdGhpcy5tX2xldmVsUG9zID0gbmV3IExheWEuV2Vha09iamVjdCgpO1xyXG5cclxuICAgICAgICBMYXlhLnN0YWdlLm9uKExheWEuRXZlbnQuUkVTSVpFLExheWEuc3RhZ2UsKCk9PntcclxuICAgICAgICAgICAgdGhpcy5VSUFkYXB0ZXIoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBVSUFkYXB0ZXIoKXtcclxuICAgICAgICBsZXQgd2lkdGggPSBMYXlhLnN0YWdlLndpZHRoO1xyXG4gICAgICAgIGxldCBoZWlnaHQgPSBMYXlhLnN0YWdlLmhlaWdodDtcclxuXHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLl8yRDNEQnRuLnBvcygxMDAsaGVpZ2h0LTEwMClcclxuXHJcbiAgICAgICAgdGhpcy5EZXBCdG4ucG9zKDEwMCxoZWlnaHQvMyk7XHJcbiAgICAgICAgdGhpcy5Vc2FnZUJ0bi5wb3MoMTAwLGhlaWdodC8zKzE1MCk7XHJcbiAgICAgICAgdGhpcy5BcmVhQnRuLnBvcygxMDAsaGVpZ2h0LzMrMzAwKTtcclxuXHJcbiAgICAgICAgdGhpcy5NdWx0aUJ0bi5wb3Mod2lkdGgtMTUwLGhlaWdodC0xODApOyAgICBcclxuICAgICAgICB0aGlzLkFsbEJ0bi5wb3Mod2lkdGgtMTUwLGhlaWdodC0xMDApXHJcblxyXG4gICAgICAgIC8v6YeN5paw5Yi35pawbGV2ZWxidG5cclxuICAgICAgICBpZih0aGlzLm1fbGV2ZWxCdG5zJiZ0aGlzLm1fbGV2ZWxCdG5zLmxlbmd0aCE9MCl7XHJcbiAgICAgICAgICAgIGxldCBpbmRleCA9IDBcclxuICAgICAgICAgICAgdGhpcy5tX2xldmVsQnRucy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tX2xldmVsQnRuT3JpUG9zID0gbmV3IExheWEuVmVjdG9yMih0aGlzLk11bHRpQnRuLngsdGhpcy5NdWx0aUJ0bi55KTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQucG9zKHRoaXMuTXVsdGlCdG4ueCx0aGlzLk11bHRpQnRuLnkgLSArK2luZGV4ICogODApXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLm1fbGV2ZWxQb3MuaGFzKGVsZW1lbnQpKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fbGV2ZWxQb3MuZGVsKGVsZW1lbnQpOyBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1fbGV2ZWxQb3Muc2V0KGVsZW1lbnQsbmV3IExheWEuVmVjdG9yMihlbGVtZW50LngsZWxlbWVudC55KSk7XHJcbiAgICAgICAgICAgICAgICB9ICAgXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL+W6lOivpeaciVJlbW92ZUV2ZW5ldFxyXG4gICAgQWRkRXZlbnQoKXtcclxuICAgICAgICB0aGlzLl8yRDNEQnRuLm9uKExheWEuRXZlbnQuQ0xJQ0ssbnVsbCwoZSk9PntcclxuICAgICAgICAgICAgdGhpcy5fMkQzREJ0bkNsaWNrZWQoKTtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5EZXBCdG4ub24oTGF5YS5FdmVudC5DTElDSyxudWxsLChlKT0+e1xyXG4gICAgICAgICAgICAgR2FtZU1hbmFnZXIuSW5zdGFuY2UoKS5CSU0uUmVmcmVzaExhYmVsQ29udGVudChMYWJlbFR5cGUuRGVwYXJ0KTtcclxuICAgICAgICAgICAgIHRoaXMuQ3VycmVudExhYmVsVHlwZSA9IExhYmVsVHlwZS5EZXBhcnQ7XHJcbiAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLlVzYWdlQnRuLm9uKExheWEuRXZlbnQuQ0xJQ0ssbnVsbCwoZSk9PntcclxuICAgICAgICAgICAgR2FtZU1hbmFnZXIuSW5zdGFuY2UoKS5CSU0uUmVmcmVzaExhYmVsQ29udGVudChMYWJlbFR5cGUuVXNhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLkN1cnJlbnRMYWJlbFR5cGUgPSBMYWJlbFR5cGUuVXNhZ2U7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuQXJlYUJ0bi5vbihMYXlhLkV2ZW50LkNMSUNLLG51bGwsKGUpPT57XHJcbiAgICAgICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZSgpLkJJTS5SZWZyZXNoTGFiZWxDb250ZW50KExhYmVsVHlwZS5BcmVhKTtcclxuICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuTXVsdGlCdG4ub24oTGF5YS5FdmVudC5DTElDSyxudWxsLChlKT0+e1xyXG4gICAgICAgICAgICB0aGlzLlNob3dMZXZlbHModGhpcy5tX2lzU2hvd011bHRpQnRucyk7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7ICAgXHJcbiAgICAgICAgfSk7ICBcclxuXHJcbiAgICAgICAgdGhpcy5BbGxCdG4ub24oTGF5YS5FdmVudC5DTElDSyxudWxsLChlKT0+e1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tX2lzU2hvd0FsbExldmVscyA9ICF0aGlzLm1faXNTaG93QWxsTGV2ZWxzXHJcblxyXG4gICAgICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZSgpLkJJTS5TaG93QWxsTGV2ZWxzKHRoaXMubV9pc1Nob3dBbGxMZXZlbHMpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgICBcclxuICAgICAgICB9KTsgIFxyXG4gICAgfVxyXG5cclxuICAgIENyZWF0ZUxldmVscyhsZXZlbHM6QXJyYXk8c3RyaW5nPil7XHJcbiAgICAgICAgaWYobGV2ZWxzPT1udWxsfHxsZXZlbHMubGVuZ3RoID09IDApXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5tX2xldmVsQnRucy5zcGxpY2UoMCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHVuZGVyR3JvdW5kTGV2ZWwgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xyXG4gICAgICAgIHZhciB1cEdyb3VuZExldmVsID0gbmV3IEFycmF5PHN0cmluZz4oKTtcclxuXHJcbiAgICAgICAgbGV2ZWxzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZihlbGVtZW50Lmxlbmd0aCE9MTUpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhcImxldmVsIG5hbWUgaXMgbm90IGxlZ2FsIVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoQ29tbW9uLkdldFB1ckxldmVsKGVsZW1lbnQpLm1hdGNoKFwiQlwiKSE9bnVsbCl7XHJcbiAgICAgICAgICAgICAgICB1bmRlckdyb3VuZExldmVsLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgdXBHcm91bmRMZXZlbC5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHVuZGVyR3JvdW5kTGV2ZWwuc29ydCgoYSxiKTpudW1iZXI9PntcclxuICAgICAgICAgICAgcmV0dXJuIGEuY2hhckF0KDE0KT5iLmNoYXJBdCgxNCk/LTE6MTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdXBHcm91bmRMZXZlbC5zb3J0KChhLGIpOm51bWJlcj0+e1xyXG4gICAgICAgICAgICByZXR1cm4gYS5jaGFyQXQoMTQpPmIuY2hhckF0KDE0KT8xOi0xO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgcmVhbExldmVsczpBcnJheTxzdHJpbmc+ID0gdW5kZXJHcm91bmRMZXZlbC5jb25jYXQodXBHcm91bmRMZXZlbCk7XHJcblxyXG4gICAgICAgIC8vdGVtcFxyXG4gICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5tX2xldmVsQnRuT3JpUG9zID0gbmV3IExheWEuVmVjdG9yMih0aGlzLk11bHRpQnRuLngsdGhpcy5NdWx0aUJ0bi55KTtcclxuXHJcbiAgICAgICAgcmVhbExldmVscy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLkNyZWF0ZU9uZUJ1dHRvbihlbGVtZW50LG5ldyBMYXlhLlZlY3RvcjIodGhpcy5tX2xldmVsQnRuT3JpUG9zLngsdGhpcy5tX2xldmVsQnRuT3JpUG9zLnkgLSArK2luZGV4KjgwKSlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBDcmVhdGVPbmVCdXR0b24obGV2ZWxDb2RlOnN0cmluZyxwb3M6TGF5YS5WZWN0b3IyKXtcclxuICAgICAgICBpZihsZXZlbENvZGUgPT0gbnVsbCkgcmV0dXJuIDtcclxuXHJcbiAgICAgICAgdmFyIHB1ckxldmVsID0gQ29tbW9uLkdldFB1ckxldmVsKGxldmVsQ29kZSk7XHJcblxyXG4gICAgICAgIHZhciBsdmxCdG46QnV0dG9uID0gbmV3IEJ1dHRvbihcImNvbXAvYnV0dG9uLnBuZ1wiKTtcclxuICAgICAgICBcclxuICAgICAgICBsdmxCdG4ubmFtZSA9IGxldmVsQ29kZTtcclxuICAgICAgICBsdmxCdG4ud2lkdGggPSA4MDtcclxuICAgICAgICBsdmxCdG4uaGVpZ2h0ID0gNjA7XHJcbiAgICAgICAgbHZsQnRuLnBvcyhwb3MueCxwb3MueSk7XHJcbiAgICAgICAgbHZsQnRuLmxhYmVsU2l6ZSA9IDMwO1xyXG4gICAgICAgIGx2bEJ0bi5sYWJlbCA9IHB1ckxldmVsLmNoYXJBdCgwKStwdXJMZXZlbC5jaGFyQXQoMyk7XHJcbiAgICAgICAgbHZsQnRuLm9uKExheWEuRXZlbnQuQ0xJQ0ssbnVsbCwoZSxsdmxOYW1lKT0+e1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBFdmVudE1hbmFnZXIuSW5zdGFuY2UoKS5Qb3N0RXZlbnQoRXZlbnRzLk9uVUlfTGV2ZWxCdG5fQ2xpY2tlZC50b1N0cmluZygpLGx2bEJ0bi5uYW1lKVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIExheWEuc3RhZ2UuYWRkQ2hpbGQobHZsQnRuKTtcclxuXHJcbiAgICAgICAgdGhpcy5tX2xldmVsQnRucy5wdXNoKGx2bEJ0bik7XHJcblxyXG4gICAgICAgIHRoaXMubV9sZXZlbFBvcy5zZXQobHZsQnRuLG5ldyBMYXlhLlZlY3RvcjIobHZsQnRuLngsbHZsQnRuLnkpKTtcclxuICAgIH1cclxuXHJcbiAgICBTaG93TGV2ZWxzKGI6Ym9vbGVhbil7XHJcbiAgICAgICAgdGhpcy5tX2lzU2hvd011bHRpQnRucyA9ICFiO1xyXG5cclxuICAgICAgICBpZighdGhpcy5tX2lzU2hvd011bHRpQnRucyl7XHJcbiAgICAgICAgICAgIHRoaXMuTXVsdGlCdG4ubGFiZWwgPSBcIuWxleW8gFwiO1xyXG4gICAgICAgICAgICB0aGlzLm1fbGV2ZWxCdG5zLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBMYXlhLlR3ZWVuLnRvKGVsZW1lbnQse3g6dGhpcy5tX2xldmVsQnRuT3JpUG9zLngseTp0aGlzLm1fbGV2ZWxCdG5PcmlQb3MueX0sNTAsTGF5YS5FYXNlLmxpbmVhckluLExheWEuSGFuZGxlci5jcmVhdGUodGhpcywoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudmlzaWJsZSA9IHRoaXMubV9pc1Nob3dNdWx0aUJ0bnM7XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0aGlzLk11bHRpQnRuLmxhYmVsID0gXCLmipjlj6BcIjtcclxuICAgICAgICAgICAgdGhpcy5tX2xldmVsQnRucy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC52aXNpYmxlID0gdGhpcy5tX2lzU2hvd011bHRpQnRucztcclxuICAgICAgICAgICAgICAgIHZhciBwb3MgPSB0aGlzLm1fbGV2ZWxQb3MuZ2V0KGVsZW1lbnQpIGFzIExheWEuVmVjdG9yMjtcclxuICAgICAgICAgICAgICAgIExheWEuVHdlZW4udG8oZWxlbWVudCx7eDpwb3MueCx5OnBvcy55fSw1MCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfMkQzREJ0bkNsaWNrZWQoKXtcclxuICAgICAgICB0aGlzLm1faXMyRCA9ICF0aGlzLm1faXMyRDtcclxuICAgICAgICBHYW1lTWFuYWdlci5JbnN0YW5jZSgpLkNhbWVyYS5SZXNldENhbWVyYSh0aGlzLm1faXMyRCk7XHJcbiAgICAgICAgaWYodGhpcy5tX2lzMkQpe1xyXG4gICAgICAgICAgICB0aGlzLl8yRDNEQnRuLmxhYmVsID0gXCIzRFwiO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0aGlzLl8yRDNEQnRuLmxhYmVsID0gXCIyRFwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgbV9vcmdMZXZlbDE6TGF5YS5XZWFrT2JqZWN0ID0gbmV3IExheWEuV2Vha09iamVjdCgpO1xyXG4gICAgbV9vcmdMZXZlbDI6TGF5YS5XZWFrT2JqZWN0ID0gbmV3IExheWEuV2Vha09iamVjdCgpO1xyXG4gICAgbV9sZXZlbDFhcnJzOkFycmF5PHN0cmluZz4gPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xyXG4gICAgQ3JlYXRlVHJlZShvcmdzOkFycmF5PHN0cmluZz4pe1xyXG4gICAgICAgIC8vVEVNUDrpu5jorqTkuLoz57qnXHJcblxyXG4gICAgICAgIGxldCBsZXZlbDE6c3RyaW5nO1xyXG4gICAgICAgIGxldCBsZXZlbDI6c3RyaW5nO1xyXG4gICAgICAgIGxldCBsZXZlbDM6c3RyaW5nO1xyXG4gICAgICAgIG9yZ3MuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoKGVsZW1lbnQubGVuZ3RoKXtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5tX29yZ0xldmVsMS5oYXMoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX29yZ0xldmVsMS5zZXQoZWxlbWVudCxuZXcgQXJyYXk8c3RyaW5nPigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2xldmVsMWFycnMucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbDEgPSBlbGVtZW50LnN1YnN0cigwLDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsMiA9IGVsZW1lbnQuc3Vic3RyKDAsNCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLm1fb3JnTGV2ZWwxLmhhcyhsZXZlbDEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubV9vcmdMZXZlbDEuc2V0KGxldmVsMSxuZXcgQXJyYXk8c3RyaW5nPigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX2xldmVsMWFycnMucHVzaChsZXZlbDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYiA9IHRoaXMubV9vcmdMZXZlbDEuZ2V0KGxldmVsMSkuc29tZSgoY29kZSk6Ym9vbGVhbiA9PntyZXR1cm4gY29kZSA9PSBsZXZlbDJ9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZighYikgdGhpcy5tX29yZ0xldmVsMS5nZXQobGV2ZWwxKS5wdXNoKGxldmVsMik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbDEgPSBlbGVtZW50LnN1YnN0cigwLDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsMiA9IGVsZW1lbnQuc3Vic3RyKDAsNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWwzID0gZWxlbWVudC5zdWJzdHIoMCw2KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMubV9vcmdMZXZlbDEuaGFzKGxldmVsMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX29yZ0xldmVsMS5zZXQobGV2ZWwxLG5ldyBBcnJheTxzdHJpbmc+KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fbGV2ZWwxYXJycy5wdXNoKGxldmVsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBiMiA9IHRoaXMubV9vcmdMZXZlbDEuZ2V0KGxldmVsMSkuc29tZSgoY29kZSk6Ym9vbGVhbiA9PntyZXR1cm4gY29kZSA9PSBsZXZlbDJ9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZighYjIpIHRoaXMubV9vcmdMZXZlbDEuZ2V0KGxldmVsMSkucHVzaChsZXZlbDIpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMubV9vcmdMZXZlbDIuaGFzKGxldmVsMikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tX29yZ0xldmVsMi5zZXQobGV2ZWwyLG5ldyBBcnJheTxzdHJpbmc+KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYjMgPSB0aGlzLm1fb3JnTGV2ZWwyLmdldChsZXZlbDIpLnNvbWUoKGNvZGUpOmJvb2xlYW4gPT57cmV0dXJuIGNvZGUgPT0gbGV2ZWwzfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIWIzKSB0aGlzLm1fb3JnTGV2ZWwyLmdldChsZXZlbDIpLnB1c2gobGV2ZWwzKTsgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCB1aXRyZWUgPSBuZXcgVUlUcmVlKCk7XHJcbiAgICAgICAgbGV0IHRyZWVkYXRhOkFycmF5PFRyZWVJdGVtRGF0YT4gPSBuZXcgQXJyYXk8VHJlZUl0ZW1EYXRhPigpO1xyXG5cclxuICAgICAgICB0aGlzLm1fbGV2ZWwxYXJycy5mb3JFYWNoKGx2bDEgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcm9vdDpUcmVlSXRlbURhdGEgPSB0aGlzLmNyZWF0ZVRyZWVJdGVtKGx2bDEsR2FtZU1hbmFnZXIuSW5zdGFuY2UoKS5EYXRhLkdldE9uZU9yZ2FuaXphdGlvbk5hbWUobHZsMSksMSxmYWxzZSxudWxsKTtcclxuICAgICAgICAgICAgdHJlZWRhdGEucHVzaChyb290KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubV9vcmdMZXZlbDEuZ2V0KGx2bDEpLmZvckVhY2gobHZsMiA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNsZWFmID0gKCF0aGlzLm1fb3JnTGV2ZWwyLmhhcyhsdmwyKSB8fCB0aGlzLm1fb3JnTGV2ZWwyLmdldChsdmwyKS5sZW5ndGggPT0gMCk/dHJ1ZTpmYWxzZTtcclxuICAgICAgICAgICAgICAgIGxldCBsZXZlbDI6VHJlZUl0ZW1EYXRhID0gdGhpcy5jcmVhdGVUcmVlSXRlbShsdmwyLEdhbWVNYW5hZ2VyLkluc3RhbmNlKCkuRGF0YS5HZXRPbmVPcmdhbml6YXRpb25OYW1lKGx2bDIpLDIsaXNsZWFmLGx2bDEpO1xyXG4gICAgICAgICAgICAgICAgcm9vdC5jaGlsZHJlbi5wdXNoKGxldmVsMik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5tX29yZ0xldmVsMi5oYXMobHZsMikpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubV9vcmdMZXZlbDIuZ2V0KGx2bDIpLmZvckVhY2gobHZsMz0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGV2ZWwzOlRyZWVJdGVtRGF0YSA9IHRoaXMuY3JlYXRlVHJlZUl0ZW0obHZsMyxHYW1lTWFuYWdlci5JbnN0YW5jZSgpLkRhdGEuR2V0T25lT3JnYW5pemF0aW9uTmFtZShsdmwzKSwzLHRydWUsbHZsMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsMi5jaGlsZHJlbi5wdXNoKGxldmVsMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICB9KTsgICAgICAgICAgIFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB1aXRyZWUuSW5pdFRyZWUodHJlZWRhdGEsbnVsbCxuZXcgTGF5YS5WZWN0b3IyKExheWEuQnJvd3Nlci53aWR0aCAtIDUwMCwxMCksXCIjRkZENzAwXCIpO1xyXG4gICAgICAgIHVpdHJlZS5PblZhbHVlQ2hhbmdlZCA9KGRhdGEsYik9PntcclxuICAgICAgICAgICAgdGhpcy5PblZhbHVlQ2hhbmdlZChkYXRhLGIpO1xyXG4gICAgICAgIH0gXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlVHJlZUl0ZW0oY29kZTpzdHJpbmcsbmFtZTpzdHJpbmcsbGV2ZWw6bnVtYmVyLGlzTGVhZjpib29sZWFuLHBhcmVudENvZGU6c3RyaW5nKTpUcmVlSXRlbURhdGF7XHJcbiAgICAgICAgbGV0IGl0ZW06VHJlZUl0ZW1EYXRhID0gbmV3IFRyZWVJdGVtRGF0YSgpO1xyXG4gICAgICAgIGl0ZW0uY29kZSA9IGNvZGU7XHJcbiAgICAgICAgaXRlbS5uYW1lID0gbmFtZTtcclxuICAgICAgICBpdGVtLmxldmVsID0gbGV2ZWw7XHJcbiAgICAgICAgaXRlbS5pc0xlYWYgPSBpc0xlYWY7XHJcbiAgICAgICAgaXRlbS5wYXJlbnRDb2RlID0gcGFyZW50Q29kZTtcclxuICAgICAgICBpdGVtLmNoaWxkcmVuID0gbmV3IEFycmF5PFRyZWVJdGVtRGF0YT4oKTtcclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuXHJcbiAgICBPblZhbHVlQ2hhbmdlZChhcnI6QXJyYXk8YW55PixiOmJvb2xlYW4pe1xyXG5cclxuICAgICAgICBsZXQgc3RyID0gbmV3IEFycmF5PHN0cmluZz4oKTtcclxuICAgICAgICBhcnIuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgc3RyLnB1c2goZWxlbWVudC5JdGVtRGF0YS5jb2RlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgRXZlbnRNYW5hZ2VyLkluc3RhbmNlKCkuUG9zdEV2ZW50KEV2ZW50cy5PbkRlcFRyZWVJdGVtQ2xpY2tlZC50b1N0cmluZygpLFtzdHIsYl0pO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCBNdFByb3RvY2FsQ29tbW9uIGZyb20gXCIuL010UHJvdG9jYWxDb21tb25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE10SHR0cHtcclxuXHJcbiAgICBwcml2YXRlIG1faXA6c3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBtX3BvcnQ6c3RyaW5nO1xyXG4gICAgcHVibGljIFVSTDogc3RyaW5nXHJcblxyXG4gICAgcHVibGljIG1fdG9rZW46c3RyaW5nO1xyXG5cclxuICAgIHByaXZhdGUgbV9odHRwOkxheWEuSHR0cFJlcXVlc3Q7IFxyXG4gICAgcHJpdmF0ZSBtX3Byb3RvY2FsQ29tbW9uIDogTXRQcm90b2NhbENvbW1vbjtcclxuICAgIHByaXZhdGUgbV9jYWxsYmFjazphbnk7XHJcbiAgICBwcml2YXRlIG1fY2FsbGVyOmFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpcDpzdHJpbmcscG9ydDpzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMubV9pcCA9IGlwO1xyXG4gICAgICAgIHRoaXMubV9wb3J0ID0gcG9ydDtcclxuICAgICAgICB0aGlzLlVSTCA9IFwiaHR0cDovL1wiK3RoaXMubV9pcCArIFwiOlwiICsgdGhpcy5tX3BvcnQ7XHJcblxyXG4gICAgICAgIHRoaXMubV9odHRwICA9IG5ldyBMYXlhLkh0dHBSZXF1ZXN0O1xyXG4gICAgICAgIHRoaXMubV9wcm90b2NhbENvbW1vbiA9IG5ldyBNdFByb3RvY2FsQ29tbW9uKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBnZXQodXJsOnN0cmluZyxjYWxsZXI6YW55LGNhbGxiYWNrOmFueSl7XHJcbiAgICAgICAgdGhpcy5tX2NhbGxlciA9IGNhbGxlcjtcclxuICAgICAgICB0aGlzLm1fY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgICAgICB0aGlzLm1faHR0cC5vbmNlKExheWEuRXZlbnQuQ09NUExFVEUsdGhpcyx0aGlzLm9uSHR0cFJlcXVlc3RDb21wbGV0ZSk7XHJcbiAgICAgICAgdGhpcy5tX2h0dHAub25jZShMYXlhLkV2ZW50LkVSUk9SLHRoaXMsdGhpcy5vbkh0dHBSZXF1ZXN0RXJyb3IpO1xyXG4gICAgICAgIHRoaXMubV9odHRwLnNlbmQodXJsLG51bGwsJ2dldCcsJ3RleHQnKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcG9zdCh1cmw6c3RyaW5nLGRhdGE6YW55LGNhbGxlcjphbnksY2FsbGJhY2s6YW55KXtcclxuICAgICAgICB0aGlzLm1fY2FsbGVyID0gY2FsbGVyO1xyXG4gICAgICAgIHRoaXMubV9jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMubV9odHRwLm9uY2UoTGF5YS5FdmVudC5DT01QTEVURSwgdGhpcywgdGhpcy5vbkh0dHBSZXF1ZXN0Q29tcGxldGUpO1xyXG4gICAgICAgIHRoaXMubV9odHRwLm9uY2UoTGF5YS5FdmVudC5FUlJPUiwgdGhpcywgdGhpcy5vbkh0dHBSZXF1ZXN0RXJyb3IpO1xyXG4gICAgICAgIHRoaXMubV9odHRwLnNlbmQodXJsLCBkYXRhLCAncG9zdCcsICdqc29uJyx0aGlzLm1fcHJvdG9jYWxDb21tb24uQ29tbW9uSGVhZGVyKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uSHR0cFJlcXVlc3RFcnJvcihlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1fY2FsbGJhY2suYXBwbHkodGhpcy5tX2NhbGxlcixbe3N0YXRlOlwiZmFpbGVkXCIsbXNnOmV9XSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByaXZhdGUgb25IdHRwUmVxdWVzdENvbXBsZXRlKGU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubV9jYWxsYmFjay5hcHBseSh0aGlzLm1fY2FsbGVyLFt7c3RhdGU6XCJzdWNjZWVkXCIsZGF0YTp0aGlzLm1faHR0cC5kYXRhfV0pO1xyXG4gICAgfVxyXG4gICAgXHJcbn0iLCIvL+WNj+iuri0t6K+35rGC5aS05paH5Lu2XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3RvY29sQ29tbW9ue1xyXG5cclxuICAgIHB1YmxpYyBDb21tb25IZWFkZXIgOkFycmF5PGFueT47XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBBY2Nlc3NDb250cm9sQWxsb3dPcmlnaW4gPSBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBBY2Nlc3NDb250cm9sQWxsb3dPcmlnaW5WYWx1ZSA9IFwiKlwiO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBBY2Nlc3NDb250cm9sQWxsb3dIZWFkZXJzID0gXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IEFjY2Vzc0NvbnRyb2xBbGxvd0hlYWRlcnNWYWx1ZSA9IFwiQ29udGVudC1UeXBlLENvbnRlbnQtTGVuZ3RoLCBBdXRob3JpemF0aW9uLCBBY2NlcHQsWC1SZXF1ZXN0ZWQtV2l0aFwiO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBBY2Nlc3NDb250cm9sQWxsb3dNZXRob2RzID0gXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzXCI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IEFjY2Vzc0NvbnRyb2xBbGxvd01ldGhvZHNWYWx1ZSA9IFwiUE9TVCwgR0VULCBPUFRJT05TLERFTEVURSxQVVRcIjtcclxuICAgIFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBYQXV0aFRva2VuRmllbGQ6c3RyaW5nID0gXCJYLUF1dGgtVG9rZW5cIjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgWEF1dGhUb2tlbkZpZWxkVmFsdWU6c3RyaW5nID0gXCJvcGVuLXNlc2FtZVwiO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBBY2NlcHRGaWVsZDpzdHJpbmcgPSBcIkFjY2VwdFwiO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBDb250ZW50VHlwZUZpZWxkVmFsdWU6c3RyaW5nID0gXCJhcHBsaWNhdGlvbi9qc29uXCI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IENvbnRlbnRUeXBlRmllbGQ6c3RyaW5nID0gXCJDb250ZW50LVR5cGVcIjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgVG9rZW5GaWVsZDpzdHJpbmcgPSBcImNvb2tpZVwiO1xyXG4gXHJcbiAgICBwcml2YXRlIGNvb2tpZTpzdHJpbmc7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5Db21tb25IZWFkZXIgPSBuZXcgQXJyYXk8YW55PigpXHJcbiAgICAgICAgdGhpcy5Db21tb25IZWFkZXIucHVzaCh0aGlzLkFjY2Vzc0NvbnRyb2xBbGxvd09yaWdpbix0aGlzLkFjY2Vzc0NvbnRyb2xBbGxvd09yaWdpblZhbHVlKTtcclxuICAgICAgICB0aGlzLkNvbW1vbkhlYWRlci5wdXNoKHRoaXMuQWNjZXNzQ29udHJvbEFsbG93SGVhZGVycyx0aGlzLkFjY2Vzc0NvbnRyb2xBbGxvd0hlYWRlcnNWYWx1ZSk7XHJcbiAgICAgICAgdGhpcy5Db21tb25IZWFkZXIucHVzaCh0aGlzLkFjY2Vzc0NvbnRyb2xBbGxvd01ldGhvZHMsdGhpcy5BY2Nlc3NDb250cm9sQWxsb3dNZXRob2RzVmFsdWUpO1xyXG4gICAgICAgIHRoaXMuQ29tbW9uSGVhZGVyLnB1c2godGhpcy5YQXV0aFRva2VuRmllbGQsdGhpcy5YQXV0aFRva2VuRmllbGRWYWx1ZSk7XHJcbiAgICAgICAgdGhpcy5Db21tb25IZWFkZXIucHVzaCh0aGlzLkFjY2VwdEZpZWxkLHRoaXMuQ29udGVudFR5cGVGaWVsZFZhbHVlKTtcclxuICAgICAgICB0aGlzLkNvbW1vbkhlYWRlci5wdXNoKHRoaXMuQ29udGVudFR5cGVGaWVsZCx0aGlzLkNvbnRlbnRUeXBlRmllbGRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFNldENvb2tpZXMoY29va2llOnN0cmluZyl7XHJcbiAgICAgICAgY29va2llID0gY29va2llO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCBMb2FkZXIgPSBMYXlhLmxvYWRlcjtcclxuaW1wb3J0IEhhbmRsZXIgPSBsYXlhLnV0aWxzLkhhbmRsZXI7XHJcbmltcG9ydCBHYW1lVUkgZnJvbSBcIi4uL0dhbWVVSVwiO1xyXG5pbXBvcnQgQ29tbW9uIGZyb20gXCIuLi9Db21tb24vQ29tbW9uXCI7XHJcbiAgICBcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzTWFuYWdlcntcclxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTpSZXNNYW5hZ2VyOyAgXHJcblxyXG4gICAgc3RhdGljIEluc3RhbmNlKCk6UmVzTWFuYWdlcntcclxuICAgICAgICBpZihSZXNNYW5hZ2VyLl9pbnN0YW5jZSA9PSBudWxsKXtcclxuICAgICAgICAgICAgUmVzTWFuYWdlci5faW5zdGFuY2UgPSBuZXcgUmVzTWFuYWdlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUmVzTWFuYWdlci5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFJlc05hbWVzIDogQXJyYXk8YW55PjtcclxuICAgIHB1YmxpYyBSZXNFbml0aXR5RGljIDogTGF5YS5XZWFrT2JqZWN0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5SZXNOYW1lcyA9IG5ldyBBcnJheTxhbnk+KCk7XHJcbiAgICAgICAgdGhpcy5SZXNFbml0aXR5RGljID0gbmV3IExheWEuV2Vha09iamVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8v5Yqg6L295aSa5Liq6LWE5rqQXHJcbiAgICBwdWJsaWMgTG9hZFByZWZhYkFzc2V0cyhyZXNOYW1lczpBcnJheTxhbnk+LGZpbmlzaGVkPzpIYW5kbGVyKXtcclxuICAgICAgICBpZihyZXNOYW1lcyA9PW51bGwgfHxyZXNOYW1lcy5sZW5ndGggPT0gMClyZXR1cm4gO1xyXG5cclxuICAgICAgICB0aGlzLlJlc05hbWVzID0gcmVzTmFtZXM7XHJcblxyXG4gICAgICAgIExheWEubG9hZGVyLmNyZWF0ZShyZXNOYW1lcyxcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIEhhbmRsZXIuY3JlYXRlKHRoaXMsKCk9PntcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5SZXNOYW1lcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzOkxheWEuU3ByaXRlM0QgPSBMYXlhLmxvYWRlci5nZXRSZXMoZWxlbWVudC51cmwpIGFzIExheWEuU3ByaXRlM0Q7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLlJlc0VuaXRpdHlEaWMuaGFzKGVsZW1lbnQudXJsKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuUmVzRW5pdGl0eURpYy5zZXQoZWxlbWVudC51cmwscmVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZihmaW5pc2hlZCE9bnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXM6QXJyYXk8YW55PiA9IFtlbGVtZW50LnVybCxyZXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZC5ydW5XaXRoKHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pLFxyXG5cclxuICAgICAgICAgICAgSGFuZGxlci5jcmVhdGUodGhpcywocCk9PntcclxuICAgICAgICAgICAgICAgdGhpcy5TZXRMb2FkUGVyY2VudChwKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApOyBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0T25lQXNzZXQodXJsOnN0cmluZyk6TGF5YS5TcHJpdGUzRHtcclxuICAgICAgICBpZih1cmwgPT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuUmVzRW5pdGl0eURpYy5oYXModXJsKSl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlc0VuaXRpdHlEaWMuZ2V0KHVybCkgYXMgTGF5YS5TcHJpdGUzRDtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBSZWxlYXNlT25lQXNzZXQodXJsOnN0cmluZyl7XHJcbiAgICAgICAgaWYodXJsID09IG51bGwpIHJldHVybiA7XHJcbiAgICAgICAgdmFyIHJlcyA9IHRoaXMuR2V0T25lQXNzZXQodXJsKSBhcyBMYXlhLlNwcml0ZTNEO1xyXG5cclxuICAgICAgICBpZihyZXMgIT0gbnVsbCl7XHJcbiAgICAgICAgICAgIC8v5b6F5rWL6K+V77yM5piv5ZCm6YeK5pS+5LqG5YaF5a2YXHJcbiAgICAgICAgICAgIHJlcy5kZXN0cm95KHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIC8v5b6F5rWL6K+VXHJcbiAgICBSZWxlYXNlQWxsQXNzZXRzKCl7XHJcbiAgICAgICAgaWYodGhpcy5SZXNFbml0aXR5RGljIT1udWxsKXtcclxuICAgICAgICAgICAgdGhpcy5SZXNOYW1lcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5SZXNFbml0aXR5RGljLmhhcyhlbGVtZW50KSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5SZXNFbml0aXR5RGljLmdldChlbGVtZW50KS5kZXN0cm95KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBTZXRMb2FkUGVyY2VudChwOm51bWJlcil7XHJcbiAgICAgICAgR2FtZVVJLl9pbnN0YW5jZS5TZXRMb2FkUGVyY2VudChwKTtcclxuICAgIH1cclxufSIsImltcG9ydCBVSVRyZWVJdGVtLCB7IFRyZWVJdGVtRGF0YSwgQ2hlY2tTdGF0dXMsIFRyZWVJdGVtU3R5bGUgfSBmcm9tIFwiLi9VSVRyZWVJdGVtXCI7XHJcbmltcG9ydCBIYW5kbGVyID0gTGF5YS5IYW5kbGVyO1xyXG5pbXBvcnQgVmVjdG9yMiA9IExheWEuVmVjdG9yMjtcclxuXHJcbi8qKlxyXG4gKiDliJvlu7rnroDmmJPmoJFcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJVHJlZXtcclxuXHJcbiAgICBwcml2YXRlIG1fdHJlZTpMYXlhLlZCb3g7XHJcblxyXG4gICAgcHJpdmF0ZSBtX0l0ZW1Db2RlczpBcnJheTxzdHJpbmc+O1xyXG4gICAgcHJpdmF0ZSBtX3RyZWVJdGVtc0RpYzpMYXlhLldlYWtPYmplY3Q7XHJcblxyXG4gICAgcHJpdmF0ZSBtX3ZhbHVlQ2hhbmdlZEl0ZW06QXJyYXk8VUlUcmVlSXRlbT47XHJcbiAgICBwdWJsaWMgT25WYWx1ZUNoYW5nZWQ6RnVuY3Rpb247XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLm1fSXRlbUNvZGVzID0gbmV3IEFycmF5PHN0cmluZz4oKTtcclxuICAgICAgICB0aGlzLm1fdHJlZUl0ZW1zRGljID0gbmV3IExheWEuV2Vha09iamVjdCgpO1xyXG4gICAgICAgIHRoaXMubV92YWx1ZUNoYW5nZWRJdGVtID0gbmV3IEFycmF5PFVJVHJlZUl0ZW0+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdFRyZWUoaXRlbXM6QXJyYXk8VHJlZUl0ZW1EYXRhPixzdHlsZT86VHJlZUl0ZW1TdHlsZSx0cmVlUG9zPzpMYXlhLlZlY3RvcjIsdHJlZUJnQ29sb3I/OnN0cmluZyx1aXRyZWVBdGxhcz86c3RyaW5nKXtcclxuICAgICAgICBpZihpdGVtcyA9PSBudWxsfHxpdGVtcy5sZW5ndGggPT0gMClyZXR1cm4gO1xyXG5cclxuICAgICAgICBsZXQgZGVmYXVsdFBhdGggPSBcInJlcy9hdGxhcy90cmVlLmF0bGFzXCI7XHJcbiAgICAgICAgbGV0IF91aXRyZWVBdGxhcyA9IHVpdHJlZUF0bGFzID09IG51bGw/ZGVmYXVsdFBhdGg6dWl0cmVlQXRsYXM7XHJcblxyXG4gICAgICAgIExheWEubG9hZGVyLmxvYWQoX3VpdHJlZUF0bGFzLEhhbmRsZXIuY3JlYXRlKHRoaXMsKCk9PntcclxuXHJcbiAgICAgICAgICAgIHRoaXMuQ2xlYXJUcmVlSXRlbURpYygpO1xyXG5cclxuICAgICAgICAgICAgLy9UZW1w77yM55SoVkJveOWItuS9nOS4gOS4qlRyZWVcclxuICAgICAgICAgICAgdGhpcy5tX3RyZWUgPSBuZXcgTGF5YS5WQm94KCk7XHJcbiAgICAgICAgICAgIHRoaXMubV90cmVlLnggPSB0cmVlUG9zPT1udWxsPzA6dHJlZVBvcy54O1xyXG4gICAgICAgICAgICB0aGlzLm1fdHJlZS55ID0gdHJlZVBvcz09bnVsbD8wOnRyZWVQb3MueTtcclxuICAgICAgICAgICAgdGhpcy5tX3RyZWUuYmdDb2xvciA9IHRyZWVCZ0NvbG9yID09IG51bGw/XCIjZmZmZmZmXCI6dHJlZUJnQ29sb3I7XHJcblxyXG4gICAgICAgICAgICBpZih0cmVlQmdDb2xvciAhPSBudWxsKXtcclxuICAgICAgICAgICAgICAgIGlmKHN0eWxlID09IG51bGwpIHN0eWxlID0gbmV3IFRyZWVJdGVtU3R5bGUoKTsgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzdHlsZS5JdGVtQ29sb3IgPSB0cmVlQmdDb2xvcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgTGF5YS5zdGFnZS5hZGRDaGlsZCh0aGlzLm1fdHJlZSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5BZGRJdGVtKGVsZW1lbnQsc3R5bGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuUmVmcmVzaEl0ZW1Qb3NpdGlvbigpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBBZGRJdGVtKGl0ZW06VHJlZUl0ZW1EYXRhLHN0eWxlPzpUcmVlSXRlbVN0eWxlKXtcclxuICAgICAgICBpZihpdGVtID09IG51bGwpIHJldHVybiA7XHJcbiAgICAgICAgbGV0IHRyZWVJdGVtOlVJVHJlZUl0ZW0gPSBuZXcgVUlUcmVlSXRlbSgpO1xyXG4gICAgICAgIHRyZWVJdGVtLkluaXRUcmVlSXRlbShpdGVtLHN0eWxlKTtcclxuICAgICAgICB0cmVlSXRlbS5PbkFycm93Q2xpY2sgPSgoaXRlbSxiKT0+e3RoaXMuT25BcnJvd0NsaWNrZWQoaXRlbSxiKTt9KTtcclxuICAgICAgICB0cmVlSXRlbS5PbkNoZWNrQm94Q2xpY2sgPSgoaXRlbSxiKT0+e3RoaXMuT25DaGVja0JveENsaWNrZWQoaXRlbSxiKTt9KTtcclxuXHJcbiAgICAgICAgdGhpcy5tX0l0ZW1Db2Rlcy5wdXNoKGl0ZW0uY29kZSk7XHJcbiAgICAgICAgaWYoIXRoaXMubV90cmVlSXRlbXNEaWMuaGFzKGl0ZW0uY29kZSkpIFxyXG4gICAgICAgICAgICB0aGlzLm1fdHJlZUl0ZW1zRGljLnNldChpdGVtLmNvZGUsdHJlZUl0ZW0pO1xyXG5cclxuICAgICAgICB0aGlzLm1fdHJlZS5hZGRDaGlsZCh0cmVlSXRlbS5UcmVlSXRlbSk7XHJcblxyXG4gICAgICAgIGlmKCFpdGVtLmlzTGVhZil7XHJcbiAgICAgICAgICAgIGl0ZW0uY2hpbGRyZW4uZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuQWRkSXRlbShlbGVtZW50LHN0eWxlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBPbkFycm93Q2xpY2tlZChpdGVtOlVJVHJlZUl0ZW0sIGI6Ym9vbGVhbil7XHJcbiAgICAgICAgaWYoaXRlbSA9PSBudWxsKSByZXR1cm4gO1xyXG5cclxuICAgICAgICB0aGlzLlJlZnJlc2hBcnJvd1N0YXR1cyhpdGVtLkl0ZW1EYXRhLmNvZGUsYik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5SZWZyZXNoSXRlbVBvc2l0aW9uKCk7XHJcbiAgICB9XHJcbiBcclxuXHJcbiAgICBwcml2YXRlIE9uQ2hlY2tCb3hDbGlja2VkKGl0ZW06VUlUcmVlSXRlbSxiOmJvb2xlYW4pe1xyXG4gICAgICAgIGlmKGl0ZW0gPT0gbnVsbCkgcmV0dXJuIDtcclxuXHJcbiAgICAgICAgdGhpcy5tX3ZhbHVlQ2hhbmdlZEl0ZW0uc3BsaWNlKDApO1xyXG5cclxuICAgICAgICBpZighaXRlbS5JdGVtRGF0YS5pc0xlYWYpXHJcbiAgICAgICAgICAgIHRoaXMuUmVmcmVzaENoZWNrU3RhdHVzQnlQYXJlbnQoaXRlbS5JdGVtRGF0YSxiKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMubV92YWx1ZUNoYW5nZWRJdGVtLnB1c2goaXRlbSk7XHJcblxyXG4gICAgICAgIHRoaXMuUmVmcmVzaENoZWNrU3RhdHVzQnlDaGlsZHJlbihpdGVtLkl0ZW1EYXRhKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5PblZhbHVlQ2hhbmdlZCkgdGhpcy5PblZhbHVlQ2hhbmdlZCh0aGlzLm1fdmFsdWVDaGFuZ2VkSXRlbSxiKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIFJlZnJlc2hDaGVja1N0YXR1c0J5UGFyZW50KGRhdGE6VHJlZUl0ZW1EYXRhLGI6Ym9vbGVhbil7XHJcbiAgICAgICAgaWYoZGF0YSA9PSBudWxsIHx8ICF0aGlzLm1fdHJlZUl0ZW1zRGljLmhhcyhkYXRhLmNvZGUpKSByZXR1cm4gO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCB0cmVlSXRlbSA9IHRoaXMubV90cmVlSXRlbXNEaWMuZ2V0KGRhdGEuY29kZSkgYXMgVUlUcmVlSXRlbTtcclxuXHJcbiAgICAgICAgaWYodHJlZUl0ZW0uSXRlbURhdGEuY2hpbGRyZW4gIT0gbnVsbCl7XHJcbiAgICAgICAgICAgIHRyZWVJdGVtLkl0ZW1EYXRhLmNoaWxkcmVuLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLm1fdHJlZUl0ZW1zRGljLmhhcyhlbGVtZW50LmNvZGUpKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkOlVJVHJlZUl0ZW0gPSB0aGlzLm1fdHJlZUl0ZW1zRGljLmdldChlbGVtZW50LmNvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuU2V0Q2hlY2tib3hTdGF0dXMoYj9DaGVja1N0YXR1cy5jaGVjazpDaGVja1N0YXR1cy51bmNoZWNrKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY2hpbGQuSXRlbURhdGEuaXNMZWFmKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1fdmFsdWVDaGFuZ2VkSXRlbS5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlJlZnJlc2hDaGVja1N0YXR1c0J5UGFyZW50KGNoaWxkLkl0ZW1EYXRhLGIpO1xyXG4gICAgICAgICAgICAgICAgfSAgXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIFJlZnJlc2hDaGVja1N0YXR1c0J5Q2hpbGRyZW4oZGF0YTpUcmVlSXRlbURhdGEpe1xyXG4gICAgICAgIGlmKGRhdGEubGV2ZWwgPT0gMSkgcmV0dXJuIDtcclxuXHJcbiAgICAgICAgbGV0IGNoZWNrID0gMDtcclxuICAgICAgICBsZXQgcGFydGx5ID0gMDtcclxuICAgICAgICBsZXQgcGFyZW50OlVJVHJlZUl0ZW0gPSB0aGlzLm1fdHJlZUl0ZW1zRGljLmhhcyhkYXRhLnBhcmVudENvZGUpP3RoaXMubV90cmVlSXRlbXNEaWMuZ2V0KGRhdGEucGFyZW50Q29kZSk6bnVsbDtcclxuICAgICAgICBpZihwYXJlbnQpe1xyXG4gICAgICAgICAgICBwYXJlbnQuSXRlbURhdGEuY2hpbGRyZW4uZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgc3dpdGNoKGVsZW1lbnQuc3RhdHVzKXtcclxuICAgICAgICAgICAgICAgICAgIGNhc2UgQ2hlY2tTdGF0dXMuY2hlY2s6Y2hlY2srKzticmVhaztcclxuICAgICAgICAgICAgICAgICAgIGNhc2UgQ2hlY2tTdGF0dXMucGFydGx5OnBhcnRseSsrO2JyZWFrO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYocGFydGx5PjApe1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LlNldENoZWNrYm94U3RhdHVzKENoZWNrU3RhdHVzLnBhcnRseSk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgaWYoY2hlY2sgPT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LlNldENoZWNrYm94U3RhdHVzKENoZWNrU3RhdHVzLnVuY2hlY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuUmVmcmVzaENoZWNrU3RhdHVzQnlDaGlsZHJlbihwYXJlbnQuSXRlbURhdGEpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoY2hlY2sgPT0gcGFyZW50Lkl0ZW1EYXRhLmNoaWxkcmVuLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LlNldENoZWNrYm94U3RhdHVzKENoZWNrU3RhdHVzLmNoZWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlJlZnJlc2hDaGVja1N0YXR1c0J5Q2hpbGRyZW4ocGFyZW50Lkl0ZW1EYXRhKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5TZXRDaGVja2JveFN0YXR1cyhDaGVja1N0YXR1cy5wYXJ0bHkpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBSZWZyZXNoQXJyb3dTdGF0dXMoY29kZTpzdHJpbmcsYjpib29sZWFuKXtcclxuICAgICAgICBpZihjb2RlID09IG51bGwgfHwgIXRoaXMubV90cmVlSXRlbXNEaWMuaGFzKGNvZGUpKSByZXR1cm4gO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCB0cmVlSXRlbSA9IHRoaXMubV90cmVlSXRlbXNEaWMuZ2V0KGNvZGUpIGFzIFVJVHJlZUl0ZW07XHJcbiAgICAgICAgdHJlZUl0ZW0uSXRlbURhdGEuY2hpbGRyZW4uZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgaWYodGhpcy5tX3RyZWVJdGVtc0RpYy5oYXMoZWxlbWVudC5jb2RlKSl7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGQ6VUlUcmVlSXRlbSA9IHRoaXMubV90cmVlSXRlbXNEaWMuZ2V0KGVsZW1lbnQuY29kZSk7XHJcbiAgICAgICAgICAgICAgICBjaGlsZC5UcmVlSXRlbS52aXNpYmxlID0gYjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZighYiAmJiAhY2hpbGQuSXRlbURhdGEuaXNMZWFmKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlJlZnJlc2hBcnJvd1N0YXR1cyhjaGlsZC5JdGVtRGF0YS5jb2RlLGIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLlNldEFycm93U3RhdHVzKGIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICBcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIFJlZnJlc2hJdGVtUG9zaXRpb24oKXtcclxuICAgICAgICBsZXQgdHJlZWxpc3QgPSBuZXcgQXJyYXk8VUlUcmVlSXRlbT4oKTtcclxuICAgICAgICB0aGlzLm1fSXRlbUNvZGVzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIGxldCBpdGVtID0gdGhpcy5tX3RyZWVJdGVtc0RpYy5nZXQoZWxlbWVudCkgYXMgVUlUcmVlSXRlbTtcclxuICAgICAgICAgICAgaWYoaXRlbS5UcmVlSXRlbS52aXNpYmxlKXtcclxuICAgICAgICAgICAgICAgIHRyZWVsaXN0LnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZm9yKGxldCBpID0gMDtpPHRyZWVsaXN0Lmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICB0cmVlbGlzdFtpXS5UcmVlSXRlbS55ID0gaSAqIDUwO1xyXG4gICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICB0aGlzLm1fdHJlZS5oZWlnaHQgPSB0cmVlbGlzdC5sZW5ndGggKiA1MDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIENsZWFyVHJlZUl0ZW1EaWMoKXtcclxuICAgICAgICB0aGlzLm1fSXRlbUNvZGVzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMubV90cmVlSXRlbXNEaWMuaGFzKGVsZW1lbnQpKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tX3RyZWVJdGVtc0RpYy5kZWwoZWxlbWVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgVHJlZUl0ZW1EYXRhe1xyXG4gICAgcHVibGljIGNvZGU6c3RyaW5nO1xyXG4gICAgcHVibGljIG5hbWU6c3RyaW5nO1xyXG4gICAgcHVibGljIGxldmVsOm51bWJlcjtcclxuICAgIHB1YmxpYyBpc0xlYWY6Ym9vbGVhbjtcclxuICAgIHB1YmxpYyBwYXJlbnRDb2RlOnN0cmluZztcclxuICAgIHB1YmxpYyBjaGlsZHJlbjpBcnJheTxUcmVlSXRlbURhdGE+O1xyXG5cclxuICAgIHB1YmxpYyBhcnJvd1N0YXR1czpib29sZWFuO1xyXG4gICAgcHVibGljIHN0YXR1czpDaGVja1N0YXR1cztcclxufVxyXG5leHBvcnQgY2xhc3MgVHJlZUl0ZW1TdHlsZXtcclxuICAgIHB1YmxpYyBJdGVtV2lkdGg6bnVtYmVyO1xyXG4gICAgcHVibGljIEl0ZW1IZWlndGg6bnVtYmVyO1xyXG4gICAgcHVibGljIEl0ZW1JbnRlbnRMZXZlbDpudW1iZXI7XHJcbiAgICBwdWJsaWMgSXRlbUlubmVyU3BhY2U6bnVtYmVyO1xyXG4gICAgcHVibGljIEl0ZW1Db2xvcjpzdHJpbmc7XHJcbiAgICBwdWJsaWMgTGFiZWxDb2xvcjpzdHJpbmc7XHJcbiAgICBwdWJsaWMgTGFiZWxGb250c2l6ZTpudW1iZXI7XHJcbiAgICBwdWJsaWMgTGFiZWxBbGlnbjpzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFRyZWVTdHlsZXtcclxuICAgIE5vcm1hbCxcclxuICAgIExlZ2VuZFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBDaGVja1N0YXR1c3tcclxuICAgIGNoZWNrLFxyXG4gICAgcGFydGx5LFxyXG4gICAgdW5jaGVjayxcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlUcmVlSXRlbXtcclxuXHJcbiAgICBwdWJsaWMgVHJlZUl0ZW06TGF5YS5IQm94O1xyXG4gICAgcHVibGljIEl0ZW1EYXRhOlRyZWVJdGVtRGF0YTsgICAgXHJcblxyXG4gICAgcHVibGljIE9uQXJyb3dDbGljazpGdW5jdGlvbjtcclxuICAgIHB1YmxpYyBPbkNoZWNrQm94Q2xpY2s6RnVuY3Rpb247XHJcbiAgICBwdWJsaWMgT25UcmVlSXRlbUNsaWNrOkZ1bmN0aW9uO1xyXG5cclxuICAgIHByaXZhdGUgQXJyb3c6TGF5YS5DbGlwO1xyXG4gICAgcHJpdmF0ZSBDaGVja0JveDpMYXlhLkNsaXA7XHJcbiAgICBwcml2YXRlIExhYmVsOkxheWEuTGFiZWw7XHJcblxyXG4gICAgcHJpdmF0ZSBtX3RyZWVJdGVtV2lkdGggPSAzMDA7XHJcbiAgICBwcml2YXRlIG1fdHJlZUl0ZW1IZWlnaHQgPSA1MDtcclxuICAgIHByaXZhdGUgbV90cmVlSXRlbUludGVudExldmVsID0gMzA7XHJcbiAgICBwcml2YXRlIG1fdHJlZUl0ZW1Jbm5lclNwYWNlID0gMTA7XHJcbiAgICBwcml2YXRlIG1fdHJlZUl0ZW1CZ0NvbG9yID0gXCIjZmZmZmZmXCI7XHJcblxyXG4gICAgcHJpdmF0ZSBtX2xhYmVsQ29sb3IgPSBcIiMwMDAwMDBcIjtcclxuICAgIHByaXZhdGUgbV9mb250c2l6ZSA9IDMwO1xyXG4gICAgcHJpdmF0ZSBtX2FsaWduID0gXCJsZWZ0XCI7XHJcbiAgIFxyXG4gICAgLyoqICoqKioqKioqKioqKioqKioqKipQdWJsaWMgTWV0aG9kcyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICBwdWJsaWMgSW5pdFRyZWVJdGVtKGRhdGE6VHJlZUl0ZW1EYXRhLGl0ZW1TdHlsZT86VHJlZUl0ZW1TdHlsZSl7XHJcbiAgICAgICAgaWYoZGF0YSA9PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuSXRlbURhdGEgPSBkYXRhIGFzIFRyZWVJdGVtRGF0YTtcclxuXHJcbiAgICAgICAgdGhpcy5TZXRUcmVlSXRlbVN0eWxlKGl0ZW1TdHlsZSk7XHJcblxyXG4gICAgICAgIHRoaXMuQ3JlYXRlQXJyb3coKTtcclxuICAgICAgICB0aGlzLkNyZWF0ZUNoZWNrQm94KCk7XHJcbiAgICAgICAgdGhpcy5DcmVhdGVMYWJlbCgpO1xyXG4gICAgICAgIHRoaXMuQ3JlYXRlSEJveCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRUcmVlSXRlbVN0eWxlKHN0eWxlPzpUcmVlSXRlbVN0eWxlKXtcclxuICAgICAgICBpZihzdHlsZSA9PSBudWxsKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5tX3RyZWVJdGVtV2lkdGggPSBzdHlsZS5JdGVtV2lkdGggPT0gbnVsbD90aGlzLm1fdHJlZUl0ZW1XaWR0aDpzdHlsZS5JdGVtV2lkdGg7XHJcbiAgICAgICAgdGhpcy5tX3RyZWVJdGVtSGVpZ2h0ID0gc3R5bGUuSXRlbUhlaWd0aCA9PSBudWxsP3RoaXMubV90cmVlSXRlbUhlaWdodDpzdHlsZS5JdGVtSGVpZ3RoO1xyXG4gICAgICAgIHRoaXMubV90cmVlSXRlbUludGVudExldmVsID0gc3R5bGUuSXRlbUludGVudExldmVsID09IG51bGw/dGhpcy5tX3RyZWVJdGVtSW50ZW50TGV2ZWw6c3R5bGUuSXRlbUludGVudExldmVsO1xyXG4gICAgICAgIHRoaXMubV90cmVlSXRlbUlubmVyU3BhY2UgPSBzdHlsZS5JdGVtSW5uZXJTcGFjZSA9PSBudWxsP3RoaXMubV90cmVlSXRlbUlubmVyU3BhY2U6c3R5bGUuSXRlbUlubmVyU3BhY2U7XHJcbiAgICAgICAgdGhpcy5tX3RyZWVJdGVtQmdDb2xvciA9IHN0eWxlLkl0ZW1Db2xvciA9PSBudWxsP3RoaXMubV90cmVlSXRlbUJnQ29sb3I6c3R5bGUuSXRlbUNvbG9yOyBcclxuICAgICAgICB0aGlzLm1fbGFiZWxDb2xvciA9IHN0eWxlLkxhYmVsQ29sb3IgPT0gbnVsbD90aGlzLm1fbGFiZWxDb2xvcjpzdHlsZS5MYWJlbENvbG9yO1xyXG4gICAgICAgIHRoaXMubV9mb250c2l6ZSA9IHN0eWxlLkxhYmVsRm9udHNpemUgPT0gbnVsbD90aGlzLm1fZm9udHNpemU6IHN0eWxlLkxhYmVsRm9udHNpemU7XHJcbiAgICAgICAgdGhpcy5tX2FsaWduID0gc3R5bGUuTGFiZWxBbGlnbiA9PSBudWxsP3RoaXMubV9hbGlnbjpzdHlsZS5MYWJlbEFsaWduO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRBcnJvd1N0YXR1cyhiOmJvb2xlYW4pe1xyXG4gICAgICAgIHRoaXMuSXRlbURhdGEuYXJyb3dTdGF0dXMgPSBiO1xyXG4gICAgICAgIGlmKHRoaXMuSXRlbURhdGEuYXJyb3dTdGF0dXMpIHtcclxuICAgICAgICAgICAgdGhpcy5BcnJvdy5pbmRleCA9IDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5BcnJvdy5pbmRleCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRDaGVja2JveFN0YXR1cyhzdGF0dXM6Q2hlY2tTdGF0dXMpe1xyXG4gICAgICAgIHN3aXRjaChzdGF0dXMpe1xyXG4gICAgICAgICAgICBjYXNlIENoZWNrU3RhdHVzLmNoZWNrIDogXHJcbiAgICAgICAgICAgICAgICB0aGlzLkNoZWNrQm94LmluZGV4ID0gMjtcclxuICAgICAgICAgICAgICAgIHRoaXMuSXRlbURhdGEuc3RhdHVzID0gQ2hlY2tTdGF0dXMuY2hlY2s7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDaGVja1N0YXR1cy5wYXJ0bHkgOiBcclxuICAgICAgICAgICAgICAgIHRoaXMuQ2hlY2tCb3guaW5kZXggPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5JdGVtRGF0YS5zdGF0dXMgPSBDaGVja1N0YXR1cy5wYXJ0bHk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDaGVja1N0YXR1cy51bmNoZWNrIDogXHJcbiAgICAgICAgICAgICAgICB0aGlzLkNoZWNrQm94LmluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuSXRlbURhdGEuc3RhdHVzID0gQ2hlY2tTdGF0dXMudW5jaGVjaztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIFNldENvbnRlbnQoY29udGVudDpzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMuTGFiZWwudGV4dCA9IGNvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKipUcmVlSXRlbSoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgcHJpdmF0ZSBDcmVhdGVIQm94KGludGVudExldmVsPzpudW1iZXIpe1xyXG4gICAgICAgIHRoaXMuVHJlZUl0ZW0gPSBuZXcgTGF5YS5IQm94KCk7XHJcbiAgICAgICAgdGhpcy5UcmVlSXRlbS5uYW1lID0gXCJ0cmVlSXRlbVwiO1xyXG4gICAgICAgIHRoaXMuVHJlZUl0ZW0uc3BhY2UgPSB0aGlzLm1fdHJlZUl0ZW1Jbm5lclNwYWNlO1xyXG4gICAgICAgIHRoaXMuVHJlZUl0ZW0ud2lkdGggPSB0aGlzLm1fdHJlZUl0ZW1XaWR0aFxyXG4gICAgICAgIHRoaXMuVHJlZUl0ZW0uaGVpZ2h0ID0gIHRoaXMubV90cmVlSXRlbUhlaWdodFxyXG4gICAgICAgIGlmKHRoaXMubV90cmVlSXRlbUJnQ29sb3IubGVuZ3RoPjcpe1xyXG4gICAgICAgICAgICB0aGlzLm1fdHJlZUl0ZW1CZ0NvbG9yID0gdGhpcy5tX3RyZWVJdGVtQmdDb2xvci5zdWJzdHIoMCw3KSArIFwiMDBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5UcmVlSXRlbS5iZ0NvbG9yID0gdGhpcy5tX3RyZWVJdGVtQmdDb2xvcjtcclxuICAgICAgICB0aGlzLlRyZWVJdGVtLnggPSB0aGlzLm1fdHJlZUl0ZW1JbnRlbnRMZXZlbCAqICh0aGlzLkl0ZW1EYXRhLmxldmVsIC0gMSk7XHJcblxyXG4gICAgICAgIHRoaXMuVHJlZUl0ZW0uYWRkQ2hpbGQodGhpcy5BcnJvdyk7XHJcbiAgICAgICAgdGhpcy5UcmVlSXRlbS5hZGRDaGlsZCh0aGlzLkNoZWNrQm94KTtcclxuICAgICAgICB0aGlzLlRyZWVJdGVtLmFkZENoaWxkKHRoaXMuTGFiZWwpO1xyXG5cclxuICAgICAgICBMYXlhLnN0YWdlLmFkZENoaWxkKHRoaXMuVHJlZUl0ZW0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKiogKioqKioqKioqKioqKioqKioqKioqKiphcnJvdyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICBwcml2YXRlIENyZWF0ZUFycm93KCl7XHJcbiAgICAgICAgbGV0IGFycm93UmVzID0gXCJ0cmVlL2Fycm93LnBuZ1wiO1xyXG4gICAgICAgIHRoaXMuQXJyb3cgPSBuZXcgTGF5YS5DbGlwKGFycm93UmVzLDEsMik7XHJcbiAgICAgICAgdGhpcy5BcnJvdy53aWR0aCA9IHRoaXMubV90cmVlSXRlbUhlaWdodCAtIDIwO1xyXG4gICAgICAgIHRoaXMuQXJyb3cuaGVpZ2h0ID0gdGhpcy5tX3RyZWVJdGVtSGVpZ2h0IC0gMjA7XHJcbiAgICAgICAgdGhpcy5BcnJvdy55ID0gMTA7XHJcbiAgICAgICAgdGhpcy5BcnJvdy5jbGlwWSA9IDI7XHJcbiAgICAgICAgdGhpcy5BcnJvdy5uYW1lID0gXCJhcnJvd1wiO1xyXG5cclxuICAgICAgICBpZih0aGlzLkl0ZW1EYXRhLmlzTGVhZikgdGhpcy5BcnJvdy52aXNpYmxlID0gZmFsc2U7IFxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuU2V0QXJyb3dTdGF0dXModHJ1ZSk7XHJcblxyXG4gICAgICAgIHRoaXMuQXJyb3cub24oTGF5YS5FdmVudC5DTElDSyx0aGlzLChlKT0+e1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLkl0ZW1EYXRhLmFycm93U3RhdHVzID0gIXRoaXMuSXRlbURhdGEuYXJyb3dTdGF0dXM7XHJcbiAgICAgICAgICAgIHRoaXMuU2V0QXJyb3dTdGF0dXModGhpcy5JdGVtRGF0YS5hcnJvd1N0YXR1cyk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuT25BcnJvd0NsaWNrKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5PbkFycm93Q2xpY2sodGhpcyx0aGlzLkl0ZW1EYXRhLmFycm93U3RhdHVzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBMYXlhLnN0YWdlLmFkZENoaWxkKHRoaXMuQXJyb3cpOyAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIC8qKioqKioqKioqKioqKioqKipDaGVja0JveCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgIHByaXZhdGUgQ3JlYXRlQ2hlY2tCb3goKXtcclxuICAgICAgICB0aGlzLkNoZWNrQm94ID0gbmV3IExheWEuQ2xpcChcInRyZWUvY2hlY2tib3gucG5nXCIsMSwyKTtcclxuICAgICAgICB0aGlzLkNoZWNrQm94LndpZHRoID0gdGhpcy5tX3RyZWVJdGVtSGVpZ2h0IC0gMjA7XHJcbiAgICAgICAgdGhpcy5DaGVja0JveC5oZWlnaHQgPSB0aGlzLm1fdHJlZUl0ZW1IZWlnaHQgLSAyMDtcclxuICAgICAgICB0aGlzLkNoZWNrQm94LnkgPSAxMFxyXG4gICAgICAgIHRoaXMuQ2hlY2tCb3guY2xpcFkgPSAzO1xyXG4gICAgICAgIHRoaXMuQ2hlY2tCb3gubmFtZSA9IFwiY2hlY2tib3hcIjtcclxuXHJcbiAgICAgICAgdGhpcy5TZXRDaGVja2JveFN0YXR1cyhDaGVja1N0YXR1cy5jaGVjayk7IC8v6buY6K6k5YWo6YCJXHJcblxyXG4gICAgICAgIHRoaXMuQ2hlY2tCb3gub24oTGF5YS5FdmVudC5DTElDSyx0aGlzLChlKT0+e1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyBcclxuXHJcbiAgICAgICAgICAgIGxldCBiOmJvb2xlYW4gPSB0aGlzLkl0ZW1EYXRhLnN0YXR1cyA9PSBDaGVja1N0YXR1cy51bmNoZWNrID8gZmFsc2U6dHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5TZXRDaGVja2JveFN0YXR1cyghYj9DaGVja1N0YXR1cy5jaGVjazpDaGVja1N0YXR1cy51bmNoZWNrKVxyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5PbkNoZWNrQm94Q2xpY2spXHJcbiAgICAgICAgICAgICAgICB0aGlzLk9uQ2hlY2tCb3hDbGljayh0aGlzLCFiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBMYXlhLnN0YWdlLmFkZENoaWxkKHRoaXMuQ2hlY2tCb3gpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKioqKioqKioqKioqKioqTGFiZWwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgIHByaXZhdGUgQ3JlYXRlTGFiZWwoKXtcclxuICAgICAgICB0aGlzLkxhYmVsID0gbmV3IExheWEuTGFiZWwoKTtcclxuICAgICAgICB0aGlzLkxhYmVsLm5hbWUgPSBcImxhYmVsXCJcclxuICAgICAgICB0aGlzLkxhYmVsLmhlaWdodCA9IHRoaXMubV90cmVlSXRlbUhlaWdodDtcclxuICAgICAgICB0aGlzLkxhYmVsLmFsaWduID0gdGhpcy5tX2FsaWduO1xyXG4gICAgICAgIHRoaXMuTGFiZWwudmFsaWduID0gXCJtaWRkbGVcIjtcclxuICAgICAgICB0aGlzLkxhYmVsLmZvbnRTaXplID0gdGhpcy5tX2ZvbnRzaXplO1xyXG4gICAgICAgIHRoaXMuTGFiZWwuY29sb3IgPSB0aGlzLm1fbGFiZWxDb2xvcjtcclxuXHJcbiAgICAgICAgdGhpcy5TZXRDb250ZW50KHRoaXMuSXRlbURhdGEubmFtZSk7XHJcblxyXG4gICAgICAgIExheWEuc3RhZ2UuYWRkQ2hpbGQodGhpcy5MYWJlbCk7XHJcbiAgICB9XHJcbn0iLCIvKipUaGlzIGNsYXNzIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IExheWFBaXJJREUsIHBsZWFzZSBkbyBub3QgbWFrZSBhbnkgbW9kaWZpY2F0aW9ucy4gKi9cbmltcG9ydCBWaWV3PUxheWEuVmlldztcclxuaW1wb3J0IERpYWxvZz1MYXlhLkRpYWxvZztcclxuaW1wb3J0IFNjZW5lPUxheWEuU2NlbmU7XG52YXIgUkVHOiBGdW5jdGlvbiA9IExheWEuQ2xhc3NVdGlscy5yZWdDbGFzcztcbmV4cG9ydCBtb2R1bGUgdWkuTWFpblNjZW5lIHtcclxuICAgIGV4cG9ydCBjbGFzcyBNYWluU2NlbmVVSSBleHRlbmRzIFNjZW5lIHtcclxuXHRcdHB1YmxpYyBEZXBCdG46TGF5YS5CdXR0b247XG5cdFx0cHVibGljIFVzYWdlQnRuOkxheWEuQnV0dG9uO1xuXHRcdHB1YmxpYyBBcmVhQnRuOkxheWEuQnV0dG9uO1xuXHRcdHB1YmxpYyBNdWx0aUJ0bjpMYXlhLkJ1dHRvbjtcblx0XHRwdWJsaWMgXzJEM0RCdG46TGF5YS5CdXR0b247XG5cdFx0cHVibGljIEFsbEJ0bjpMYXlhLkJ1dHRvbjtcbiAgICAgICAgcHVibGljIHN0YXRpYyAgdWlWaWV3OmFueSA9e1widHlwZVwiOlwiU2NlbmVcIixcInByb3BzXCI6e1wid2lkdGhcIjo2MDAsXCJoZWlnaHRcIjo5MDB9LFwiY29tcElkXCI6MixcImNoaWxkXCI6W3tcInR5cGVcIjpcIkJ1dHRvblwiLFwicHJvcHNcIjp7XCJ5XCI6MjcxLFwieFwiOjIzLFwid2lkdGhcIjo4MCxcInZhclwiOlwiRGVwQnRuXCIsXCJza2luXCI6XCJjb21wL2J1dHRvbi5wbmdcIixcImxhYmVsU2l6ZVwiOjMwLFwibGFiZWxcIjpcIuenkeWupFwiLFwiaGVpZ2h0XCI6NjB9LFwiY29tcElkXCI6N30se1widHlwZVwiOlwiQnV0dG9uXCIsXCJwcm9wc1wiOntcInlcIjozNTUsXCJ4XCI6MjMsXCJ3aWR0aFwiOjgwLFwidmFyXCI6XCJVc2FnZUJ0blwiLFwic2tpblwiOlwiY29tcC9idXR0b24ucG5nXCIsXCJsYWJlbFNpemVcIjozMCxcImxhYmVsXCI6XCLnlKjpgJRcIixcImhlaWdodFwiOjYwfSxcImNvbXBJZFwiOjh9LHtcInR5cGVcIjpcIkJ1dHRvblwiLFwicHJvcHNcIjp7XCJ5XCI6NDM3LFwieFwiOjIzLFwid2lkdGhcIjo4MCxcInZhclwiOlwiQXJlYUJ0blwiLFwic2tpblwiOlwiY29tcC9idXR0b24ucG5nXCIsXCJsYWJlbFNpemVcIjozMCxcImxhYmVsXCI6XCLpnaLnp69cIixcImhlaWdodFwiOjYwfSxcImNvbXBJZFwiOjl9LHtcInR5cGVcIjpcIkJ1dHRvblwiLFwicHJvcHNcIjp7XCJ5XCI6NjAwLFwieFwiOjQ3NixcIndpZHRoXCI6ODAsXCJ2YXJcIjpcIk11bHRpQnRuXCIsXCJza2luXCI6XCJjb21wL2J1dHRvbi5wbmdcIixcImxhYmVsU2l6ZVwiOjMwLFwibGFiZWxcIjpcIuaKmOWPoFwiLFwiaGVpZ2h0XCI6NjB9LFwiY29tcElkXCI6MTN9LHtcInR5cGVcIjpcIkJ1dHRvblwiLFwicHJvcHNcIjp7XCJ5XCI6NjgwLFwieFwiOjIzLFwid2lkdGhcIjo4MCxcInZhclwiOlwiXzJEM0RCdG5cIixcInNraW5cIjpcImNvbXAvYnV0dG9uLnBuZ1wiLFwibGFiZWxTaXplXCI6MzAsXCJsYWJlbFwiOlwiMkRcIixcImhlaWdodFwiOjYwfSxcImNvbXBJZFwiOjE0fSx7XCJ0eXBlXCI6XCJCdXR0b25cIixcInByb3BzXCI6e1wieVwiOjY4MCxcInhcIjo0NzYsXCJ3aWR0aFwiOjgwLFwidmFyXCI6XCJBbGxCdG5cIixcInNraW5cIjpcImNvbXAvYnV0dG9uLnBuZ1wiLFwibGFiZWxTaXplXCI6MzAsXCJsYWJlbFwiOlwi5YWo6YOoXCIsXCJoZWlnaHRcIjo2MH0sXCJjb21wSWRcIjoyNn1dLFwibG9hZExpc3RcIjpbXCJjb21wL2J1dHRvbi5wbmdcIl0sXCJsb2FkTGlzdDNEXCI6W119O1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKCl7IHN1cGVyKCl9XHJcbiAgICAgICAgY3JlYXRlQ2hpbGRyZW4oKTp2b2lkIHtcclxuICAgICAgICAgICAgc3VwZXIuY3JlYXRlQ2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVWaWV3KE1haW5TY2VuZVVJLnVpVmlldyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUkVHKFwidWkuTWFpblNjZW5lLk1haW5TY2VuZVVJXCIsTWFpblNjZW5lVUkpO1xyXG59XHJcbmV4cG9ydCBtb2R1bGUgdWkucG9ydGFsIHtcclxuICAgIGV4cG9ydCBjbGFzcyBMb2FkaW5nVUkgZXh0ZW5kcyBTY2VuZSB7XHJcblx0XHRwdWJsaWMgQmFja2dyb3VuZDpMYXlhLkltYWdlO1xuXHRcdHB1YmxpYyBUaXRsZTpMYXlhLkxhYmVsO1xuXHRcdHB1YmxpYyBMb2dpbkJ0bjpMYXlhLkJ1dHRvbjtcblx0XHRwdWJsaWMgUHJvZ3Jlc3NCYXI6TGF5YS5Qcm9ncmVzc0JhcjtcbiAgICAgICAgY29uc3RydWN0b3IoKXsgc3VwZXIoKX1cclxuICAgICAgICBjcmVhdGVDaGlsZHJlbigpOnZvaWQge1xyXG4gICAgICAgICAgICBzdXBlci5jcmVhdGVDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRTY2VuZShcInBvcnRhbC9Mb2FkaW5nXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFJFRyhcInVpLnBvcnRhbC5Mb2FkaW5nVUlcIixMb2FkaW5nVUkpO1xyXG59XHIiXX0=
